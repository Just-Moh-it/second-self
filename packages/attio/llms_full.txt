# Authorize Endpoint
Source: https://docs.attio.com/api-reference/oauth-20/authorize-endpoint

https:/api.attio.com/openapi/oauth get /authorize
Use open source libraries to perform OAuth 2.0. You can find a list of libraries here: https://oauth.net/code/



# Introspect Endpoint
Source: https://docs.attio.com/api-reference/oauth-20/introspect-endpoint

https:/api.attio.com/openapi/oauth post /oauth/introspect
Check whether an access token is valid, and if so, what scopes and identity it grants



# Token Endpoint
Source: https://docs.attio.com/api-reference/oauth-20/token-endpoint

https:/api.attio.com/openapi/oauth post /oauth/token
Use open source libraries to perform OAuth 2.0. You can find a list of libraries here: https://oauth.net/code/



# Actors
Source: https://docs.attio.com/docs/actors

Keeping track of who did what

In various places in the Attio API, you will see the concept of an "actor". An actor is something that performs actions inside Attio. A workspace member is the prime example of an actor, but you will also encounter apps and automations as actors.

## Types of Actors

An Actor is made up of two things: a type and an ID. The current list of actors types and their corresponding ID format is as follows:

* `workspace-member` - A human user who is signed into a workspace. Comes with a unique UUID. You can get further information about the workspace member, e.g. name, avatar and email address, using the [list workspace members endpoints](/rest-api/endpoint-reference/workspace-members/get-a-workspace-member).
* `api-token` - An integration using the developer API. Comes with a unique UUID for the token.
* `system` - An internal part of the Attio system. For example, communications intelligence updates are registered with system actors. Always comes with a `null` ID.

Actors are recorded in various parts of the system. Every attribute value write, for example, includes the actor who wrote it, e.g:

```json The actor who wrote a particular value
"created_by_actor": {
  "type": "workspace-member",
  "id": "175bec0c-f06a-4c45-9962-7a7a6be28b8a"
}
```

Actors are often encountered via the "actor reference" attribute type. Every standard object includes a `created_by` attribute of this type. For more information, please see the [actor reference](/docs/attribute-types/attribute-types-actor-reference.mdx) documentation.


# Archiving vs deleting
Source: https://docs.attio.com/docs/archiving-vs-deleting



Attio uses two separate but related concepts: **archiving** and **deleting**.

**Deleting** should be considered permanent. Any data you delete will eventually be removed from our servers entirely, without the ability for restoration. As such, deletes should be handled extremely carefully.

When using our API, deleting occurs using the conventional REST semantics of the `DELETE` HTTP verb.

**Archiving** is softer, allowing data to remain in the system, albeit in a more hidden state. The exact behaviour of archived data will depend on the object you are archiving, but the behaviour will be documented for the given endpoint.

When using our API, archiving occurs by setting the `is_archived` property to `true`, and restored by setting it to `false`.


# Overview
Source: https://docs.attio.com/docs/attribute-types/attribute-types



Attributes are used to model data on objects and lists. Standard objects come with a series of "system" attributes predefined, but users and developers can create and modify their own attributes as well.

## Attribute properties

In the API, attributes are presented as a set of properties. Some attribute types have specific properties (e.g. an actor reference attribute has the `referenced_actor_type` property), but all attributes have the following properties:

* `id`, which is a [composite ID](/docs/slugs-and-ids) composed of `(workspace_id, object_id, attribute_id)`
* `title`, the human-readable name of the attribute (e.g. `"Name"`)
* `description`, an optional human-readable description (e.g. `"The name as registered in our database"`)
* `api_slug`, a shorthand way for developers to refer to this attribute (e.g. `"name"`)
* `type`, one of the enumerated types below (e.g. `"text"`)
* `is_archived`, whether the [attribute has been archived](/docs/archiving-vs-deleting)
* `is_required`, whether a value is required when creating the record or list entry
* `is_unique`, whether the value for this attribute is unique among all other records or list entries of that type
* `is_multiselect`, whether you can write more than one value to this attribute
* `is_default_value_enabled` and `default_value`, see the [default values guide](/docs/default-values)
* `created_at`, a timestamp of when this attribute was first created
* `config`, an object containing specific configuration for `currency` or `record_reference` types

For more information about attributes, you can find our [attribute APIs here](/rest-api/endpoint-reference/attributes).

## Attribute values

Attribute values represent the value of the given attribute on a given record or list entry. They also have a set of common properties, that you'll see referenced throughout this guide:

* `active_from`, a timestamp showing when this value was created
* `active_until`, either a timestamp (meaning the value was readable until that point in time) or `null`, meaning the value is still currently active. Most endpoints will only return active values, meaning this value is usually `null`. In special cases, such as the [list record attribute values API](https://attio.readme.io/reference/get_v2-objects-object-records-record-id-attributes-attribute-values), you can also query historic data.
* `created_by_actor`, a reference to the `id` and `type` of the [Actor](/docs/actors) who created this value
* `attribute_type`, matches the `type` property on the Attribute itself (e.g. `"text"`)

## Attribute types

Attio currently has 17 different attribute types, and they can behave differently when creating, viewing, filtering and sorting. This guide will walk through each type, with examples of where you might find them and how to work with them:

* [Actor reference](/docs/attribute-types/attribute-types-actor-reference)
* [Checkbox](/docs/attribute-types/attribute-types-checkbox)
* [Currency](/docs/attribute-types/attribute-types-currency)
* [Date](/docs/attribute-types/attribute-types-date)
* [Domain](/docs/attribute-types/attribute-types-domain)
* [Email address](/docs/attribute-types/attribute-types-email-address)
* [Interaction](/docs/attribute-types/attribute-types-interaction)
* [Location](/docs/attribute-types/attribute-types-location)
* [(Personal) name](/docs/attribute-types/attribute-types-personal-name)
* [Number](/docs/attribute-types/attribute-types-number)
* [Phone number](/docs/attribute-types/attribute-types-phone-number)
* [Rating](/docs/attribute-types/attribute-types-rating)
* [Record reference](/docs/attribute-types/attribute-types-record-reference)
* [Select](/docs/attribute-types/attribute-types-select)
* [Status](/docs/attribute-types/attribute-types-status)
* [Text](/docs/attribute-types/attribute-types-text)
* [Timestamp](/docs/attribute-types/attribute-types-timestamp)


# Actor reference
Source: https://docs.attio.com/docs/attribute-types/attribute-types-actor-reference

References to workspace members and others

Actor references are used to link to [actors](/docs/actors) in Attio. You're most likely to encounter this attribute via the `created_by` attribute which is available on every object, the `owner` attribute on a deal object, or the `strongest_connection_user` on a company or person.

Actor reference attributes can be single-select or multi-select.

Please note, in the mobile and web clients, attributes of this type are marked as "User" attributes.

### Reading values

Actor reference values have two properties, `referenced_actor_type` and `referenced_actor_id`. The `referenced_actor_type` can be one of `"api-token"`, `"workspace-member"` or `"system"`. The `referenced_actor_id` is a UUID, or the value `null`, that uniquely identifies the actor.

<CodeGroup>
  ```json Example: workspace member
  {
    "active_from": "2023-04-03T15:21:06.447000000Z",
    "active_until": null,
    "created_by_actor": {...},
    "attribute_type": "actor-reference",
    "referenced_actor_type": "workspace-member",
    "referenced_actor_id": "fbe75eb0-d704-4d12-9e41-aa187e60ed73"
  }
  ```
</CodeGroup>

### Writing values

Currently, the only type of [actor](/docs/actors) that can be explicitly set in our API is `"workspace-member"`. We may expand this list in future.

When writing references to workspace members, we allow you to identify actors by email addresses. You may do this either by passing an email address string directly, or by using an object with the key `workspace_member_email_address`.

Actor reference attributes may be multi-select or single-select. When writing to multi-select attributes, you must always wrap values in an array. Single-select attributes accept unwrapped data.

<CodeGroup>
  ```json Using email string
  {
    "owner": ["[email protected]"]
  }
  ```

  ```json Single-select string
  {
    "owner": "[email protected]"
  }
  ```

  ```json Using workspace_member_email_address
  {
    "owner": [
      {
        "workspace_member_email_address": "[email protected]"
      }
    ]
  }
  ```
</CodeGroup>

You may also specify the actor type and ID explicitly using an object with the keys `referenced_actor_type` and `referenced_actor_id`.

<CodeGroup>
  ```json Using workspace member ID
  {
    "owner": [
      {
        "referenced_actor_type": "workspace-member",
        "referenced_actor_id": "50cf242c-7fa3-4cad-87d0-75b1af71c57b"
      }
    ]
  }
  ```
</CodeGroup>

### Filtering

Actor reference values can only be filtered using both the `referenced_actor_type` and `referenced_actor_id` properties. If using explicit operators, only the `$eq` operator is supported. For example:

<CodeGroup>
  ```json Value written by workspace member
  {
    "filter": {
      "created_by": {
        "referenced_actor_type": "workspace-member",
        "referenced_actor_id": "ec44a06c-b690-4e4f-95b6-757fb4e2f55f"
      }
    }
  }
  ```

  ```json Value written by API token
  {
    "filter": {
      "created_by": {
        "referenced_actor_type": "api-token"
      }
    }
  }
  ```

  ```json Expanded format
  {
    "filter": {
      "created_by": {
        "referenced_actor_type": {
          "$eq": "api-token"
        }
      }
    }
  }
  ```
</CodeGroup>


# Checkbox
Source: https://docs.attio.com/docs/attribute-types/attribute-types-checkbox

Modelling boolean values

Checkbox attributes are used to represent boolean values (`true` and `false`). In the UI, they are presented to users as a checkbox, hence the name.

There are no predefined checkbox attributes on any of the standard objects. As a result, checkbox attributes will only be present when added by the user.

Checkbox attributes may only be single-select.

### Reading values

If the checkbox is checked, you'll get the `true` property back, otherwise it will be `false`. This attribute does not support null values.

<CodeGroup>
  ```json Example: a checked attribute
  {
    "active_from": "2023-04-03T15:21:06.447000000Z",
    "active_until": null,
    "created_by_actor": {...},
    "attribute_type": "checkbox",
    "value": true
  }
  ```
</CodeGroup>

### Writing values

To write checkbox attribute values, you can use either the boolean values `true`/`false` or their string equivalents `"true"`/`"false"`.

We support setting these values directly as raw booleans/strings, or by using an object with a single key, `value`.

We only support single-select checkbox attributes, so you may always write checkbox values without wrapping the values in an array (array values containing a single element are also supported).

<CodeGroup>
  ```json Using boolean
  {
    "a_custom_checkbox_attribute": true
  }
  ```

  ```json Using string
  {
    "a_custom_checkbox_attribute": "true"
  }
  ```

  ```json Using array
  {
    "a_custom_checkbox_attribute": [true]
  }
  ```

  ```json Using object
  {
    "a_custom_checkbox_attribute": [
      {
        "value": true
      }
    ]
  }
  ```
</CodeGroup>

### Filtering

Checkbox attribute values can be filtered by true/false. If using explicit operators, only the `$eq` operator is supported. For example:

<CodeGroup>
  ```json Records where checkbox is checked
  {
    "filter": {
      "a_custom_checkbox_attribute": true
    }
  }
  ```

  ```json Expanded format
  {
    "filter": {
      "a_custom_checkbox_attribute": {
        "value": {
          "$eq": false
        }
      }
    }
  }
  ```
</CodeGroup>


# Currency
Source: https://docs.attio.com/docs/attribute-types/attribute-types-currency

More than just numbers

Currency attributes represent quantities of money. They are similar to number attributes, allowing storing numbers with up to four decimal places of precision, but are presented differently in the UI with a currency symbol usually alongside.

Two examples of currency attributes are the `funding_raised_usd` attribute on the company object, and the `value` attribute on the deal object.

There is a `currency_code` property returned from the API on each attribute value, but please note that this is shared among all attribute values of the attribute; it is not possible to override currency for a particular record or entry.

Currency attributes can only be single-select.

### Configuration

When creating currency attributes, you can specify two configuration properties:

* `default_currency_code` - The [ISO4217](https://www.iso.org/iso-4217-currency-codes.html) currency code e.g. `USD` or `EUR`. All values for the attribute inherit this value.
* `display_type` How the currency should be displayed across the app. See [MDN for more details](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#currencydisplay).

<CodeGroup>
  ```http Specifying configuration when creating a currency attribute
  POST /v2/objects/:object/attributes HTTP/1.1
  Authorization: Bearer <<oauth2>>
  Content-Type: application/json

  {
  "title": "Amount owed",
  "api_slug": "amount_owed",
  "type": "currency",
  "config": {
  "currency": {
  "default_currency_code": "USD",
  "display_type": "symbol"
  }
  }
  }

  ```
</CodeGroup>

### Reading values

Currency attributes have two properties, `currency_code` (string) and `currency_value` (number). This attribute does not support null values.

<CodeGroup>
  ```json Example: $499.00
  {
    "active_from": "2023-04-03T15:21:06.447000000Z",
    "active_until": null,
    "created_by_actor": {...},
    "attribute_type": "currency",
    "currency_value": "499.00",
    "currency_code": "USD"
  }
  ```
</CodeGroup>

### Writing values

Currency values can be written using floating point numbers. We accept values with up to 4 decimal places of precision. You do not need to pass floating point numbers explicitly; we will automatically convert integers to their floating point equivalents.

Where possible, Attio will convert strings into numbers. For example, the string `"4.99"` will be parsed as the float `4.99`.

As currency attributes may only be single-select, you may always write values without wrapping in an array if preferred.

We also support writing currency values using an object with a single key, `currency_value`.

<CodeGroup>
  ```json Using float
  {
    "amount_owed": 4.99
  }
  ```

  ```json Using string
  {
    "amount_owed": "4.99"
  }
  ```

  ```json Using object
  {
    "amount_owed": [
      {
        "currency_value": "399.00"
      }
    ]
  }
  ```
</CodeGroup>

It is not possible to specify the `currency_code` since this is inherited from the attribute.

### Filtering

Currency attribute values can be filtered by their value, using either JSON strings or numbers. You can filter for an exact value using the implicit syntax, or use the `$eq`,`$gt`,`$gte`,`$lt`,`$lte` operators with the explicit syntax.

<CodeGroup>
  ```json Finding records with an exact currency value
  {
    "filter": {
      "amount_owed": "399.00"
    }
  }
  ```

  ```json Currency at least 500
  {
    "filter": {
      "amount_owed": {
        "currency_value": {
          "$gte": 500
        }
      }
    }
  }
  ```
</CodeGroup>


# Date
Source: https://docs.attio.com/docs/attribute-types/attribute-types-date

A timezone-less calendar date

Date attributes are used to represent a single calendar year, month and day, independent of timezone. Attio exclusively works with the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, i.e. `YYYY-MM-DD` e.g. `2023-11-24`.

There is only one default example of a date attribute, `foundation_date` on the company object.

Date attributes can only be single-select.

### Reading values

Date attributes have a single property, `value` (a string).

<CodeGroup>
  ```json Example: 24th November, 2023
  {
    "active_from": "2023-04-03T15:21:06.447000000Z",
    "active_until": null,
    "created_by_actor": {...},
    "attribute_type": "date",
    "value": "2023-11-24"
  }
  ```
</CodeGroup>

### Writing values

Date values can be written by passing an ISO 8601 date string.

If hours, months, seconds or timezones are provided, they will be trimmed. For example:

* `'2023'` → `'2023-01-01'`
* `'2023-01'` → `'2023-01-01'`
* `'2023-01-02'` → `'2023-01-02'`
* `'2023-01-02T13:00'` → `'2023-01-02'`
* `'2023-01-02T14:00:00'` → `'2023-01-02'`
* `'2023-01-02T15:00:00.000000000'` → `'2023-01-02'`
* `'2023-01-02T15:00:00.000000000+02:00'` → `'2023-01-02'`

If a timezone is provided that would result in a different calendar date in UTC, the date will be coerced to UTC and then the timezone component will be trimmed. For example, the value `'2023-01-02T23:00:00-10:00'` will be returned as `'2023-01-03'`.

As date values are always single-select, you may write values either by passing the date string directly, or by wrapping a single value in an array.

You may also write date values using an object with a single `value` key.

<CodeGroup>
  ```json Using string
  {
    "foundation_date": "2004-07-29"
  }
  ```

  ```json Using object
  {
    "foundation_date": [
      {
        "value": "2004-07-29"
      }
    ]
  }
  ```
</CodeGroup>

### Filtering

Date attribute values can be filtered by their value. You can filter for an exact date using the implicit syntax, or use the `$eq`,`$gt`,`$gte`,`$lt`,`$lte` operators with the explicit syntax.

<CodeGroup>
  ```json Companies founded on 2023-11-24
  {
    "filter": {
      "foundation_date": "2023-11-24"
    }
  }
  ```

  ```json Companies formed after the year 2000
  {
    "filter": {
      "foundation_date": {
        "value": {
          "$gte": "2000-01-01"
        }
      }
    }
  }
  ```
</CodeGroup>


# Domain
Source: https://docs.attio.com/docs/attribute-types/attribute-types-domain

An internet domain

Domain attributes represent an internet domain, for example, "apple.com".

Attio represents domains as structured objects rather than raw strings, allowing filtering and display of specific domain properties such as the root domain.

Please note that domain attributes store domains, not URLs. Any inputted values will have paths and query parameters trimmed. If you would like to store full URLs, please use a text attribute.

It isn't currently possible to create your own domain attributes, so you'll find only the multi-select `domains` attribute on a company object.

### Reading values

There are two properties on a domain attribute, `domain` and `root_domain`.

The `domain` property contains the entire domain, after normalization.

The `root_domain` property is the top-most part of the domain besides the public suffix. For example, the root domain of `"app.attio.com"` would be `"attio.com"`.

<CodeGroup>
  ```json Example: app.attio.com
  {
    "active_from": "2023-04-03T15:21:06.447000000Z",
    "active_until": null,
    "created_by_actor": {...},
    "attribute_type": "domain",
    "domain": "app.attio.com",
    "root_domain": "attio.com"
  }
  ```
</CodeGroup>

### Writing values

To write domain values, simply pass the string of the domain.

The `root_domain` property will automatically be inferred from input values so there is no need to write it yourself.

You may also write domain values using an object with a single key, `domain`.

As the `domains` attribute is multi-select, you must always pass values wrapped in an array.

<CodeGroup>
  ```json Using string (single value)
  {
    "domains": ["app.attio.com"]
  }
  ```

  ```json Using string (multiple values)
  {
    "domains": ["app.attio.com", "attio.com"]
  }
  ```

  ```json Using object
  {
    "domains": [
      {
        "domain": "app.attio.com"
      }
    ]
  }
  ```
</CodeGroup>

### Filtering

Domain attribute values can be filtered by either the `root_domain` or `domain` property, and support several operators:

* `$eq` for an exact match
* `$not_empty` for any value present
* `$contains` , `$starts_with` and `$ends_with`

In implicit mode, the `domain` property is checked for equality, otherwise you can use the explicit syntax to combine the properties and operators above.

<CodeGroup>
  ```json Companies where domain=app.attio.com
  {
    "filter": {
      "domain": "app.attio.com"
    }
  }
  ```

  ```json ...where subdomain=attio.com
  {
    "filter": {
      "domains": {
        "root_domain": {
          "$eq": "attio.com"
        }
      }
    }
  }
  ```

  ```json ...where domain includes attio
  {
    "filter": {
      "domains": {
        "domain": {
          "$contains": "attio"
        }
      }
    }
  ```
</CodeGroup>


# Email address
Source: https://docs.attio.com/docs/attribute-types/attribute-types-email-address

An email address

Email address attributes are a string referencing an internet email address. For example, an email address might be `"[email protected]"`. Like [domain](/docs/attribute-types/attribute-types-domain) attributes, we do some parsing of the email domain part, as well as validating the general shape of an email address overall.

It isn't currently possible to create your own email address attributes. You'll find only the multiselect `email_addresses` attribute on a person object, or the single attribute `email_address` attribute on the user standard object.

### Reading values

There are five properties available on this attribute:

* `email_address` - the normalized form of the email address, this is the one you are most likely to use
* `original_email_address` - the email as it was originally input to the system, without normalization
* `email_domain` - the full domain part of the email address
* `email_root_domain` - the root domain part of the email address
* `email_local_specifier` - the local part of the email address

<CodeGroup>
  ```json Example: person@company.com
  {
    "active_from": "2023-04-03T15:21:06.447000000Z",
    "active_until": null,
    "created_by_actor": {...},
    "attribute_type": "email-address",
    "email_address": "[email protected]",
    "original_email_address": "[email protected]",
    "email_domain": "company.com",
    "email_root_domain": "company.com",
    "email_local_specifier": "person"
  }
  ```
</CodeGroup>

### Writing values

Email address values can be written by passing in a string of the email you would like to write.

We also support passing values with a single key, `email_address`.

We strictly validate that email addresses have valid domain and local part formats.

Attio will automatically infer the root domain, local specify and other properties available on read so there is no need to write them yourself.

If writing to a multi-select attribute, you must wrap your input values in an array.

<CodeGroup>
  ```json Writing to email_addresses
  {
    "email_addresses": ["[email protected]", "[email protected]"]
  }
  ```

  ```json Writing to email_address
  {
    "email_address": "[email protected]"
  }
  ```

  ```json Using object
  {
    "email_addresses": [
      {
        "email_address": "[email protected]"
      }
    ]
  }
  ```
</CodeGroup>

### Filtering

Email attribute values can be filtered by the `email_address`, `email_domain`, `email_root_domain` and `email_local_specifier` properties, and support several operators:

* `$eq` for an exact match
* `$contains` , `$starts_with` and `$ends_with`

In implicit mode, the `email_address` property is checked for equality, otherwise you can use the explicit syntax to combine the properties and operators above.

<CodeGroup>
  ```json People where email_addresses=person@company.com
  {
    "filter": {
      "email_addresses": "[email protected]"
    }
  }
  ```

  ```json ...where domain=attio.com
  {
    "filter": {
      "email_addresses": {
        "email_domain": {
          "$eq": "attio.com"
        }
      }
    }
  }
  ```

  ```json ...where local part includes person
  {
    "filter": {
      "email_addresses": {
        "email_local_specifier": {
          "$contains": "person"
        }
      }
    }
  ```
</CodeGroup>


# Interaction
Source: https://docs.attio.com/docs/attribute-types/attribute-types-interaction

Calendar events and emails

Interactions are quite a generic concept, used to model when a given actor interacted with a record in a particular way. Presently, Attio has just two types of interaction:

* Email interactions (`first_email_interaction` and `last_email_interaction`)
* Calendar interactions (`first_calendar_interaction`, `last_calendar_interaction` and `next_calendar_interaction`)

These attributes are available on both the Company and Person objects, although they are enriched and not available on every billing plan. For more information about these attributes, [please see our Enriched data help page](https://attio.com/help/reference/data-and-syncing/enriched-data#communication-intelligence).

### Reading values

Interaction attribute values have an `interaction_type` property, which can be either `"email"` or `"calendar-event"`, and an `interacted_at` timestamp property in ISO8601 format.

There is also an `owner_actor` property, which is an object relating the [actor](/docs/actors) who created this interaction (this is different from the `created_by` attribute value property which could be e.g. a system actor).

<CodeGroup>
  ```json Example: last email received by Tom on 2023-11-25
  {
    "active_from": "2023-11-25T15:21:06.447000000Z",
    "active_until": null,
    "created_by_actor": {
      "type": "system",
      "id": null
    },
    "attribute_type": "interaction",
    "interaction_type": "email",
    "interacted_at": "2023-11-25T15:21:06.447000000Z",
    "owner_actor": {
      "type": "workspace-member",
      "id": "50cf242c-7fa3-4cad-87d0-75b1af71c57b" // Tom
    }
  }
  ```
</CodeGroup>

### Writing values

It is not currently possible to write Interaction values, they are only created by the Attio system.

### Filtering

There are three properties of interactions that can be used in filtering:

* `owner_member_id` filters by the workspace member ID that is the `owner_actor`, this supports `$eq` and `$not_empty` operators
* `interacted_at` (timestamp) supports `$eq`, `$gte`, `$gt`, `$lte` and `$lt` operators
* `interaction_type` can also be filtered by `$eq` and `$not_empty`

<CodeGroup>
  ```json Companies ... which have had an email interaction
  {
    "filter": {
      "last_email_interaction": {
        "owner_member_id": {
          "$not_empty": true
        }
      }
    }
  }
  ```

  ```json ... with whom Tom had a recent meeting
  {
    "filter": {
      "last_calendar_interaction": {
        "owner_member_id": "50cf242c-7fa3-4cad-87d0-75b1af71c57b",
        "interacted_at": {
          "$gte": "2023-11-01"
        }
      }
    }
  }
  ```

  ```json ... via email
  {
    "filter": {
      "first_email_interaction": {
        "interaction_type": "email"
      }
    }
  }
  ```
</CodeGroup>


# Location
Source: https://docs.attio.com/docs/attribute-types/attribute-types-location

A physical location in the world

Location attributes model a physical location in the world. We store all location properties (address lines, postcode, country code, etc) on a single attribute value, rather than separate attributes. This means that when working with locations, updates must be atomic—every property must be specified, even if it is null.

You'll find an example of this attribute as `primary_location` on both person and company objects.

Locations have the following properties:

* `line_1` - the first line of the address, e.g. `"1 Infinite Loop"`
* `line_2` - the second line of the address e.g. `"Block 1"`
* `line_3`, `line_4`, same as above
* `locality` - the town, neighbourhood or area, e.g. `"Cupertino"`
* `region` - the state, county, province or region, e.g. `"CA"`
* `postcode` - the postal or zip code, e.g. `"95014"`
* `country_code` - the ISO 3166-1 alpha-2 country code, e.g. `US`
* `latitude` - latitudinal coordinates, e.g. `"37.331741"`
* `longitude` - longitudinal coordinates, e.g. `"-122.030333"`

There are some properties which are not presently shown in the Attio app but are captured by the API—for example, address lines or postcodes.

### Reading values

Depending on your use case, there are various properties of a location that might be relevant for you. The API will return the full object as structured data, without attempting to format it:

<CodeGroup>
  ```json Example: Apple Headquarters
  {
    "active_from": "2023-04-03T15:21:06.447000000Z",
    "active_until": null,
    "created_by_actor": {...},
    "attribute_type": "location",
    "line_1": "1 Infinite Loop",
    "line_2": null,
    "line_3": null,
    "line_4": null,
    "locality": "Cupertino",
    "region": "CA",
    "postcode": "95014",
    "country_code": "US",
    "latitude": "37.331741",
    "longitude": "-122.030333",

  }

  ```
</CodeGroup>

### Writing values

When writing location values, Attio will intelligently parse strings into structured location data.

<CodeGroup>
  ```json json
  {
    "primary_location": "1 Infinite Loop, Cupertino, CA, 95014, US"
  }
  ```
</CodeGroup>

You may also specify each location property explicitly using an object value. When using the object syntax, we require that updates to a location attribute must specify a value for every attribute, even if it is `null`.

<CodeGroup>
  ```json Using object
  {
    "primary_location": {
      "line_1": "1 Infinite Loop",
      "line_2": null,
      "line_3": null,
      "line_4": null,
      "locality": "Cupertino",
      "region": "CA",
      "postcode": "95014",
      "country_code": "US",
      "latitude": "37.331741",
      "longitude": "-122.030333"
    }
  }
  ```
</CodeGroup>

### Filtering

The properties `line_1`, `line_2`, `line_3`, `line_4`, `locality`, `region` and `postcode` can all be filtered by `$eq`, `$contains`, `$starts_with` and `$ends_with` operators.

The property `country_code` can be filtered by `$eq` and `$starts_with` operators.

<CodeGroup>
  ```json People in Cupertino, California
  {
    "filter": {
      "primary_location": {
         "locality": "Cupertino",
         "region": "CA",
         "country_code": "US"
      }
    }
  }
  ```

  ```json ...where locality contains "cuper"
  {
    "filter": {
      "primary_location": {
        "locality": {
          "$contains": "cuper" /* Case insensitive */
        }
      }
    }
  }
  ```
</CodeGroup>

It is not currently possible to filter by latitude/longitude.


# Number
Source: https://docs.attio.com/docs/attribute-types/attribute-types-number

Quantities, sums and metrics

Number attributes store floating point numbers with up to four decimal places of precision.

An example of a number attribute is the `twitter_follower_count` attribute on both the company and person objects.

Only single-select number attributes are supported.

### Reading values

Number attribute values have a `value` property:

<CodeGroup>
  ```json Example: 14 Twitter followers
  {
    "active_from": "2023-04-03T15:21:06.447000000Z",
    "active_until": null,
    "created_by_actor": {...},
    "attribute_type": "number",
    "value": 14
  }
  ```
</CodeGroup>

### Writing values

To write number values, simply pass your desired number, either as an integer or a float. Alternatively, you can use an object with a single `value` property.

<CodeGroup>
  ```json Using number
  {
    "a_custom_number_attribute": 3.1415
  }
  ```

  ```json Using object
  {
    "a_custom_number_attribute": [
      {
        "value": 3.1415
      }
    ]
  }
  ```
</CodeGroup>

Please note that `twitter_follower_count` is a system attribute and cannot be written to from the API.

### Filtering

Numbers can be filtered by the operators `$eq`, `$gte`, `$gt`,`$lte`,`$lt`. The implicit syntax does an exact equality check:

<CodeGroup>
  ```json Finding records with 14 Twitter followers
  {
    "filter": {
      "twitter_follower_count": 14
    }
  }
  ```

  ```json ... with more than 1000 followers
  {
    "filter": {
      "twitter_follower_count": {
        "value": {
          "$gte": 1000
        }
      }
    }
  }
  ```
</CodeGroup>


# (Personal) name
Source: https://docs.attio.com/docs/attribute-types/attribute-types-personal-name

A person's name

Name attributes represent a person's name. They have three properties: `first_name`, `last_name` and `full_name`.

Only the person object has a `name` attribute. Name attributes cannot be created by users.

### Reading values

All three properties are present in responses:

<CodeGroup>
  ```json Example: John Smith
  {
    "active_from": "2023-04-03T15:21:06.447000000Z",
    "active_until": null,
    "created_by_actor": {...},
    "attribute_type": "personal-name",
    "first_name": "John",
    "last_name": "Smith",
    "full_name": "John Smith"
  }
  ```
</CodeGroup>

### Writing values

Attio provides two syntaxes for writing name values, a string syntax and an object syntax. If possible, we recommend using the object syntax as it provides full control over the name values you create.

When writing values using the object syntax, all three properties must be set.

<CodeGroup>
  ```json Using object
  {
    "name": {
      "first_name": "John",
      "last_name": "Smith",
      "full_name": "John Smith"
    }
  }
  ```
</CodeGroup>

When writing using a string, the string must match format 'Last name(s), First name(s)'. Text without a comma is interpreted as solely comprising the first name. Further commas will be ignored and assumed to be part of the first name.

<CodeGroup>
  ```json Using string
  {
    "name": "Smith, John"
  }
  ```
</CodeGroup>

### Filtering

You can filter by any of the properties, using these operators:

* `$eq`
* `$not_empty`
* `$contains`, `$starts_with`, `$ends_with`

Using the implicit filter syntax, you can search for exact matches of `full_name`, otherwise any combination of property/operator.

<CodeGroup>
  ```json People exactly named John Smith
  {
    "filter": {
      "name": "John Smith"
    }
  }
  ```

  ```json ...where first_name starts with "jo"
  {
    "filter": {
      "name": {
        "first_name": {
          "$starts_with": "jo" /* Case insensitive */
        }
      }
    }
  }
  ```

  ```json ... where last_name is specified
  {
    "filter": {
      "name": {
        "last_name": {
          "$not_empty": true
        }
      }
    }
  }
  ```
</CodeGroup>


# Phone number
Source: https://docs.attio.com/docs/attribute-types/attribute-types-phone-number

International telephone numbers

Phone number attributes represent telephone numbers. They are represented in [E164 format](https://en.wikipedia.org/wiki/E.164) and always prefixed with a country code.

The person object comes with a phone number attribute (`phone_numbers`), which is is a multi-select attribute, but users can also create their own phone number attributes on other objects or lists as well.

There are three properties on a phone number: `original_phone_number` (as inputted by the user), `country_code` (an ISO 3166-1 alpha-2 country code) and `normalized_phone_number` (as set by Attio). All properties are represented as strings.

### Reading values

<CodeGroup>
  ```json Example: a US telephone number
  {
    "active_from": "2023-04-03T15:21:06.447000000Z",
    "active_until": null,
    "created_by_actor": {...},
    "attribute_type": "phone-number",
    "original_phone_number": "+15558675309",
    "normalized_phone_number": "+15558675309",
    "country_code": "US"
  }
  ```
</CodeGroup>

### Writing values

You may either write phone number values as strings or objects. For both formats, you must provide sufficient information to identify the country code of the number.

For string values, the phone number must be prefixed with the area code, starting with "+".

Object values must include both a `original_phone_number` and `country_code` property. You may pass `null` to `country_code` if an area code prefix is provided as part of `original_phone_number`.

All values are validated against the E164 format.

Since the `phone_numbers` attribute is multi-select, you must always pass values as part of an array.

<CodeGroup>
  ```json Using string
  {
    "phone_numbers": ["+447777777777"]
  }
  ```

  ```json Setting phone number with country
  {
    "phone_numbers": [
      {
        "original_phone_number": "+447777777777",
        "country_code": "GB"
      }
    ]
  }
  ```

  ```json Setting just the number
  {
    "phone_numbers": [
      {
        "original_phone_number": "+44 7777777777",
        "country_code": null
      }
    ]
  }
  ```
</CodeGroup>

### Filtering

Phone numbers can be filtered by equality or substrings (`$eq`,`$contains`,`$starts_with`,`$ends_with`). Note that the explicit property is called `phone_number`, internally Attio will use the normalized phone number for searching.

The `country_code` property can also be filtered by `$eq` and `$not_empty`.

<CodeGroup>
  ```json People by exact phone number
  {
    "filter": {
      "phone_numbers": "+15558675309"
    }
  }
  ```

  ```json ... with US phone numbers
  {
    "filter": {
      "phone_numbers": {
        "country_code": {
          "$eq": "US"
        }
      }
    }
  }
  ```

  ```json ... with part of a phone number
  {
    "filter": {
      "phone_numbers": {
        "phone_number": {
          "$contains": "67530"
        }
      }
    }
  }
  ```
</CodeGroup>


# Rating
Source: https://docs.attio.com/docs/attribute-types/attribute-types-rating

Star ratings from 0 to 5

Rating attributes are a numeric value from 0 to 5. In the UI, they are presented as a proportion of 5 stars.

There are no default rating attributes in Attio, but they can be created by users and in the API.

Only single-select rating attributes are permitted.

### Reading values

Rating attribute values have a `value` property:

<CodeGroup>
  ```json Example: 3 out of 5 stars
  {
    "active_from": "2023-04-03T15:21:06.447000000Z",
    "active_until": null,
    "created_by_actor": {...},
    "attribute_type": "rating",
    "value": 3
  }
  ```
</CodeGroup>

### Writing values

To write rating values, you can either pass an integer directly, or an object with a single key, `value`.

As all rating attributes are single-select, you may pass the value directly or as an array containing a single element.

<CodeGroup>
  ```json Using number
  {
    "performance": 4
  }
  ```

  ```json Using object
  {
    "performance": [
      {
        "value": 4
      }
    ]
  }
  ```
</CodeGroup>

### Filtering

Ratings can be filtered by the operators `$eq`, `$gte`, `$gt`,`$lte`,`$lt`. The implicit syntax does an exact equality check:

<CodeGroup>
  ```json Finding records rated 4 stars
  {
    "filter": {
      "performance": 4
    }
  }
  ```

  ```json ... with more than 3 stars
  {
    "filter": {
      "performance": {
        "value": {
          "$gte": 3
        }
      }
    }
  }
  ```
</CodeGroup>


# Record reference
Source: https://docs.attio.com/docs/attribute-types/attribute-types-record-reference

Relationships and one-way links between records

Record reference attributes are one of the most useful types of attribute. They allow pointing to other records of the same object, or records of other objects. When combined with features such as drill-down filters, it becomes possible to deeply relate the various parts of your data model.

By default, all of the standard objects have at least one record reference:

* Company has `team` (people), `associated_deals` (deals) and `associated_workspaces` (workspaces)
* Person has `company` (company), `associated_deals`(deals) and `associated_users` (users)
* Deal has `associated_people` (people) and `associated_company` (company)
* User has `person` (person) and `workspace` (workspace)
* Workspace has `users` (users) and `company` (company)

### A note about relationship attributes

All of the example attributes above are also relationship attributes.

[Relationship attributes](https://attio.com/help/reference/workspace/attributes#relationship-attributes) describe a relationship between two objects, which appear as a pair of record reference attributes, one on each object. Updating an attribute value on either of the attributes automatically updates the other attribute, which means you don't need to explicitly update both. For example, adding a person to a company by updating the company `team` property, will also update the `company` property on that person.

Currently, you will be able to see relationship attributes alongside other non-relationship record reference attributes in the API. The attribute type is still marked as `record-reference`, but there is an additional property, `relationship`, that you can use to distinguish these.

If the attribute is also a relationship attribute, the `relationship` property will be an object containing an `id` property. In the example below, our company's `team` attribute has a relationship with the person's `company` attribute:

<CodeGroup>
  ```json Example "team" attribute on a company
  {
    "id": { ... },
    "title": "Team",
    "api_slug": "team",
    "type": "record-reference",
    "relationship": {
       "id": {
         "workspace_id": "14beef7a-99f7-4534-a87e-70b564330a4c",
         "object_id": "4e71c40b-7d35-463c-afcb-e339cfd6dbd1",   // Person object
         "attribute_id": "41252299-f8c7-4b5e-99c9-4ff8321d2f96" // "Company" attribute on Person object
       }
    },
    ...
  }
  ```
</CodeGroup>

If the record reference attribute is not a relationship attribute, the `relationship` property will be set to `null`.

In the web application, when setting up a relationship, the user specifies whether the relationship is many-to-many, many-to-one, one-to-many or one-to-one. It is possible to discern this relationship by looking at the `is_multiselect` property on each attribute: if `true`, this attribute is a "many", if `false` it is a "one".

Unfortunately, at present it is not possible to create relationship attributes using the API; they can only be created in the web application and then used in the API.

### Configuration

Record references are usually constrained to referencing a specific object. For example, you can't specify a deal for the company `team` attribute. This is accomplished with the configuration property `allowed_object_ids` which is an array of object IDs (slugs are supported when writing this property):

<CodeGroup>
  ```http Create "owner" attribute which only supports People
  POST /v2/objects/:object/attributes HTTP/1.1
  Authorization: Bearer <<oauth2>>
  Content-Type: application/json

  {
  "title": "Owner",
  "api_slug": "owner",
  "type": "record-reference",
  "config": {
  "record_reference": {
  "allowed_objects": ["person"]
  }
  }
  }

  ```
</CodeGroup>

In responses from the API, this appears as `allowed_object_ids`, like so:

<CodeGroup>
  ```json Attribute definition response for "team" attribute
  {
    "id": { ... },
    "title": "Team",
    "api_slug": "team",
    "type": "record-reference",
    "config": {
      "record_reference": {
        "allowed_object_ids": [
          "4e71c40b-7d35-463c-afcb-e339cfd6dbd1"
        ]
      }
    },
    ...
  }
  ```
</CodeGroup>

### Reading values

Record reference values have two properties, `target_object` (the `api_slug` representing what kind of object it is) and `target_record_id` (the ID of the Record).

<CodeGroup>
  ```json A reference to person@company.com
  {
    "active_from": "2023-04-03T15:21:06.447000000Z",
    "active_until": null,
    "created_by_actor": {...},
    "attribute_type": "record-reference",
    "target_object": "people",
    "target_record_id": "891dcbfc-9141-415d-9b2a-2238a6cc012d"
  }
  ```
</CodeGroup>

### Writing values

There are multiple ways to write a record reference. Since it's such a common operation, Attio provides special write functionality if the record reference only allows a single object and that object is one of our standard objects:

* If the allowed object is a company, you can use the `domains` attribute.
* If the allowed object is a person, you can use the `email_addresses` attribute.
* If the allowed object is a user, you can use the `user_id` attribute.
* If the allowed object is a workspace, you can use the `workspace_id` attribute.

<CodeGroup>
  ```json Referencing a company
  {
    "associated_company": [
      {
        "domains": [{"domain": "company.com"}],
        "target_object": "companies"
      }
    ]
  }
  ```

  ```json Referencing a person
  {
    "team": [
      {
        "email_addresses": [{"email_address": "[email protected]"}],
        "target_object": "people"
      }
    ]
  }
  ```

  ```json Referencing a user
  {
    "user": [
      {
        "user_id": [{"value": "my-user-id"}],
        "target_object": "users"
      }
    ]
  }
  ```

  ```json Referencing a workspace
  {
    "workspace": [
      {
        "workspace_id": [{"value": "my-workspace-id"}],
        "target_object": "workspaces"
      }
    ]
  }
  ```
</CodeGroup>

Furthermore, we allow writing to these attributes using string values.

* If the allowed object is a company, string values will be interpreted as a domain.
* If the allowed object is a person, string values will be interpreted as email addresses.
* If the allowed object is a user, string values will be interpreted as `user_id` text values.
* If the allowed object is a workspace, string values will be interpreted as `workspace_id` text values.

<CodeGroup>
  ```json Domain
  {
    "associated_company": "company.com"
  }
  ```

  ```json Domains
  {
    "associated_company": ["company.com", "company.net"]
  }
  ```

  ```json Email
  {
    "team": ["[email protected]"]
  }
  ```

  ```json Email
  {
    "team": ["[email protected]", "[email protected]"]
  }
  ```

  ```json User
  {
    "user": "my-user-id"
  }
  ```

  ```json Users
  {
    "user": ["my-user-id", "another-user-id"]
  }
  ```

  ```json Workspace
  {
    "workspace": "my-workspace-id"
  }
  ```

  ```json Workspaces
  {
    "workspace": ["my-workspace-id", "another-workspace-id"]
  }
  ```
</CodeGroup>

If the attribute is multiselect ("many"), you can also pass these as a series of values like so:

It's also possible to write record references using record IDs.

<CodeGroup>
  ```json Using record IDs
  {
    "associated_company": [
      {
        "target_record_id": "99a03ff3-0435-47da-95cc-76b2caeb4dab",
        "target_object": "companies"
      }
    ]
  }
  ```
</CodeGroup>

Note that the write will fail if the target record does not exist, i.e. you can't create the target record automatically. For example, if you tried to assert a person and referenced a company that did not exist, the request would fail. This means that you need to do your writes in reverse-order, e.g. starting with the company that the person is linked to, then creating the person.

### Filtering

Record reference values can be filtered by `target_object` and `target_record_id` using exact equality matches.

<CodeGroup>
  ```json Find people with a given company
  {
    "filter": {
      "company": {
        "target_object": "companies",
        "target_record_id": "99a03ff3-0435-47da-95cc-76b2caeb4dab"
      }
    }
  }
  ```

  ```json Find workspaces with a given user
  {
    "filter": {
      "users": {
        "target_object": "97052eb9-e65e-443f-a297-f2d9a4a7f795",
        "target_record_id": "5e3fb280-007b-495a-a530-9354bde01de1"
      }
    }
  }
  ```
</CodeGroup>

As well as exact equality matches, record reference values also support the `$in` operator.

<CodeGroup>
  ```json Find people where their company's record_id is one of several possible values
  {
    "filter": {
      "company": {
        "target_object": "companies",
        "target_record_id": {
          "$in": [
            "3aeb39cd-fed8-524e-94b8-1300549354ac",
            "8c5cd602-1297-45d2-a99c-14ae091cbac3"
          ]
        }
      }
    }
  }
  ```
</CodeGroup>

Record references are special, because they are also filterable using "paths", also known as "drill-downs". You can filter records based on attributes of the target records. `paths` is an array containing tuples of `(object type, attribute slug or ID)`, while `constraints` are applied to the attribute identified by the final path element.

For example, we could construct a filter like "find me Companies which have an employee named John":

<CodeGroup>
  ```json Companies with an employee named John
  {
    "filter": {
      "path": [
        ["companies", "team"],
        ["people", "name"]
      ],
      "constraints": {
        "first_name": { "$eq": "John" }
      }
    }
  }
  ```
</CodeGroup>

Here, we're using the `team` attribute on a Company, which is a multi-select record reference to the person record. We then look across at those related `people`, and their `name` attribute values. Finally, since `name` is a [(personal) name](/docs/attribute-types/attribute-types-personal-name) attribute, we can query against the `first_name` property.

Paths can be more complex, and even somewhat recursive. For example, if you had a `manager` attribute on the Person object, and it pointed to another Person, you could find people by who their manager's manager's manager was:

<CodeGroup>
  ```json People by their manager's manager's manager
  {
    "filter": {
      "path": [
        ["people", "manager"],
        ["people", "manager"],
      ],
      "constraints": {
        "target_object": "people",
        "target_record_id": "managers-manager-id"
      }
    }
  }
  ```
</CodeGroup>


# Select
Source: https://docs.attio.com/docs/attribute-types/attribute-types-select

An option from a predefined list

Select attributes are a constrained input type, where the user must pick from a predefined list.

Company has several select attributes (they are mostly [enriched attributes](https://attio.com/help/reference/data-and-syncing/enriched-data)): `categories`, `estimated_arr_usd` and `employee_range`. `strongest_connection_strength` is also available on both person and company.

Attio provides a [separate API for managing the select options available](/rest-api/endpoint-reference/attributes/list-select-options).

Select attributes may be either single-select or multi-select. In the API, these two variants are represented using the same underlying type, select. However, in web and mobile clients, users will see these attributes as two separate types: select and multi-select.

Please note that select attributes cannot be configured to be unique.

### Reading values

Select attribute values have an `option` property, which is an object describing which select option was used:

<CodeGroup>
  ```json Example: 3 out of 5 stars
  {
    "active_from": "2023-04-03T15:21:06.447000000Z",
    "active_until": null,
    "created_by_actor": {...},
    "attribute_type": "select",
    "option": {
      "id": {
        "workspace_id": "4f9a01be-3792-4ab9-926f-ca7f9005700c",
        "object_id": "5f1feef5-fe73-4c0e-9d97-5b0a96a7d32b",
        "attribute_id": "a4977b52-d367-4e28-a671-b5c4fa401fc5",
        "option_id": "14938464-cae9-4e50-8856-0fb584844f24"
      },
      "title": "Aerospace & Defense",
      "is_archived": false
    }
  }
  ```
</CodeGroup>

### Writing values

You can find a list of available options using the [list select options](/rest-api/endpoint-reference/attributes/list-select-options) API.

To write select values, pass the title of the select option as a string. If it's a multi-value select attribute, you'll need to pass an array.

You can also pass an object with an `option` property, which references either the `option_id` or the `title` of the select option.

If you attempt to write a value where the ID or title cannot be found, you will receive an error rather than create a new select option.

<CodeGroup>
  ```json Using string
  {
    "categories": ["3D Printing"]
  }
  ```

  ```json Multiple values
  {
    "categories": ["3D Printing", "Architecture"]
  }
  ```

  ```json Using object (title)
  {
    "categories": [
      {
        "option": "3D Printing"
      }
    ]
  }
  ```

  ```json Using object (option_id)
  {
    "categories": [
      {
        "option": "14938464-cae9-4e50-8856-0fb584844f24"
      }
    ]
  }
  ```
</CodeGroup>

### Filtering

Select attributes can be filtered by equality, using either the implicit syntax or the explicit one:

<CodeGroup>
  ```json Finding companies in the "Aerospace & Defense" category
  {
    "filter": {
      "categories": "Aerospace & Defense"
    }
  }
  ```

  ```json ... with an option ID instead
  {
    "filter": {
      "categories": {
        "option": {
          "$eq": "Aerospace & Defense"
        }
      }
    }
  }
  ```
</CodeGroup>

It's also possible to use `$or` to find records which match one of several categories:

<CodeGroup>
  ```json Find Companies in one of many categories
  {
    "filter": {
      "$or": [
        {"categories": "Aerospace & Defense"},
        {"categories": "Biotechnology"}
      ]
    }
  }
  ```
</CodeGroup>

Select attributes can also be filtered based on when they were modified, using the `active_from` property. This allows automations based on when the attribute was changed. This filter supports the `$lt`, `$lte`, `$gt`, `$gte` operators:

<CodeGroup>
  ```json Finding companies where the category was changed this week
  {
    "filter": {
      "categories": {
        "active_from": {
          "$gte": "2023-11-20"
        }
      }
    }
  }
  ```

  ```json ... where the category was not changed this year
  {
    "filter": {
      "categories": {
        "active_from": {
          "$lt": "2023-01-01"
        }
      }
    }
  }
  ```
</CodeGroup>


# Status
Source: https://docs.attio.com/docs/attribute-types/attribute-types-status

Similar to select attributes, originally designed for use in Lists

Just like [select](/docs/attribute-types/attribute-types-select) attributes, status attributes are a constrained input type, where the user must pick from a predefined list. They are used in the Attio UI to define the different columns on a kanban board, but they can also be used with objects directly.

There's only one predefined status attribute, available on the deal object as `stage`.

The possible values of a status attribute are known as "statuses", and there are [separate APIs for managing them](/rest-api/endpoint-reference/attributes/list-statuses).

All status attributes are single-select.

### Reading values

Status values have a `status` property, which is an object describing which status was used:

<CodeGroup>
  ```json Example: 3 out of 5 stars
  {
    "active_from": "2023-04-03T15:21:06.447000000Z",
    "active_until": null,
    "created_by_actor": {...},
    "attribute_type": "select",
    "status": {
      "id": {
        "workspace_id": "4f9a01be-3792-4ab9-926f-ca7f9005700c",
        "object_id": "5f1feef5-fe73-4c0e-9d97-5b0a96a7d32b",
        "attribute_id": "a4977b52-d367-4e28-a671-b5c4fa401fc5",
        "status_id": "11f07f01-c10f-4e05-a522-33e050bc52ee"
      },
      "title": "In Progress",
      "is_archived": false,
      "target_time_in_status": null,
      "celebration_enabled": false
    }
  }
  ```
</CodeGroup>

### Writing values

You can find a list of available statuses using the [list statuses](/rest-api/endpoint-reference/attributes/list-statuses) API.

To write status values, pass the title of the status as a string.

You can also pass an object with a `status` property which references either the `status_id` or the `title` of the status.

If you attempt to write a value where the ID or title cannot be found, you will receive an error rather than create a new status.

<CodeGroup>
  ```json Using string
  {
    "stage": "Lead"
  }
  ```

  ```json Using object (title)
  {
    "stage": [
      {
        "status": "Lead"
      }
    ]
  }
  ```

  ```json Using object (status_id)
  {
    "stage": [
      {
        "status": "11f07f01-c10f-4e05-a522-33e050bc52ee"
      }
    ]
  }
  ```
</CodeGroup>

### Filtering

Status attributes can be filtered by equality, using either the implicit syntax or the explicit one, with either the title or status ID:

<CodeGroup>
  ```json Finding deals in the "In Progress" stage
  {
    "filter": {
      "stage": "In Progress"
    }
  }
  ```

  ```json ... with a status ID instead
  {
    "filter": {
      "stage": {
        "status": {
          "$eq": "11f07f01-c10f-4e05-a522-33e050bc52ee"
        }
      }
    }
  }
  ```
</CodeGroup>

You can also filter for multiple possible matching values using the `$or` syntax:

<CodeGroup>
  ```json Finding deals in either "In Progress" or "Lead" stage
  {
    "filter": {
      "$or": [
        {"stage": "In Progress"},
        {"stage": "Lead"}
      ]
    }
  }
  ```
</CodeGroup>

Status attributes can also be filtered based on when they were modified, using the `active_from` property. This allows automations based on when the attribute was changed. This filter supports the `$lt`, `$lte`, `$gt`, `$gte` operators:

<CodeGroup>
  ```json Finding deals where the stage was changed this week
  {
    "filter": {
      "stage": {
        "active_from": {
          "$gte": "2023-11-20"
        }
      }
    }
  }
  ```

  ```json ... where the stage was not changed this year
  {
    "filter": {
      "stage": {
        "active_from": {
          "$lt": "2023-01-01"
        }
      }
    }
  }
  ```
</CodeGroup>


# Text
Source: https://docs.attio.com/docs/attribute-types/attribute-types-text

Human-readable, unconstrained text inputs

Text attributes are the most common type of attribute, and usually represent unstructured or human-readable data. They have a max size of 10mb.

Examples of text attributes include the `description`, `facebook` or `instagram` attributes on company and person, or the `workspace_id` and `user_id` attributes on workspace/user. Please note that on person, the `name` attribute is a [(Personal) name](/docs/attribute-types/attribute-types-personal-name) attribute, but on company it's a text attribute.

Text attributes are always single-select.

### Reading values

Text attribute values have a single `value` property:

<CodeGroup>
  ```json Example: 14 Twitter followers
  {
    "active_from": "2023-04-03T15:21:06.447000000Z",
    "active_until": null,
    "created_by_actor": {...},
    "attribute_type": "text",
    "value": "A long time ago in a galaxy far, far away..."
  }
  ```
</CodeGroup>

### Writing values

To write text attribute values, simply pass the string that you would like to set.

You may also pass an object with a single `value` property.

<CodeGroup>
  ```json Using string
  {
    "description": "Headquartered in New York City, Waystar Royco was founded by Logan Roy and operates in 50 countries across 4 continents"
  }
  ```

  ```json Using object
  {
    "description": [
      {
        "value": "Headquartered in New York City, Waystar Royco was founded by Logan Roy and operates in 50 countries across 4 continents"
      }
    ]
  }
  ```
</CodeGroup>

### Filtering

Text can be filtered by the operators `$eq`, `$in`, `$contains`, `$starts_with` and `$ends_with`. The implicit syntax does an exact equality (`$eq`) check:

<CodeGroup>
  ```json Finding companies with an exact description
  {
    "filter": {
      "description": "An exact match"
    }
  }
  ```

  ```json ... which starts with a prefix
  {
    "filter": {
      "description": {
        "value": {
          "$starts_with": "Headquartered in New York City"
        }
      }
    }
  }
  ```

  ```json ... which contains a keyword
  {
    "filter": {
      "description": {
        "value": {
          "$contains": "New York City"
        }
      }
    }
  }
  ```

  ```json ...where record_id is one of supplied values
  {
    "filter": {
      "record_id": {
        "$in": ["000e8881-37cc-41d2-bc22-39fe35e76e6b", "592dc9d8-548b-4148-813f-1259055ca83c"]
      }
    }
  }
  ```
</CodeGroup>


# Timestamp
Source: https://docs.attio.com/docs/attribute-types/attribute-types-timestamp

A calendar date including time information, stored in UTC

Timestamp attributes represent a single, universal moment in time using the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Time information is stored with nanosecond precision, and UTC is the assumed timezone if one is not provided. Timestamp values will always be returned in UTC.

Every Attio object has a `created_at` timestamp attribute, but users can also create their own custom timestamp attributes.

All timestamp attributes are single-select.

### Reading values

Timestamp attributes have a single property, `value` (string).

<CodeGroup>
  ```json Example: 24th November, 2023
  {
    "active_from": "2023-04-03T15:21:06.447000000Z",
    "active_until": null,
    "created_by_actor": {...},
    "attribute_type": "date",
    "value": "2023-11-24T15:17:48.000000000Z"
  }
  ```
</CodeGroup>

### Writing values

Input values will be coerced into the full format. UTC is assumed if not specified. For example, the following input values would all be coerced to `"2023-01-02T13:00:00.000000000Z"`:

* `"2023"`
* `"2023-01"`
* `"2023-01-02"`
* `"2023-01-02T13:00"`
* `"2023-01-02T13:00:00"`
* `"2023-01-02T13:00:00.000000000"`
* `"2023-01-02T15:00:00.000000000+02:00`

To write timestamp attribute values, you should specify the `value` property:

You may also pass an object with a single property, `value`.

<CodeGroup>
  ```Text Using string
  {
    "my_timestamp_attribute": "2019-01-17T15:17:48.000000000Z"
  }
  ```

  ```json Using object
  {
    "my_timestamp_attribute": [
      {
        "value": "2019-01-17T15:17:48.000000000Z"
      }
    ]
  }
  ```
</CodeGroup>

### Filtering

Timestamp attribute values can be filtered by their value. Unlike when writing timestamp values, both date and time components must be specified.

You can filter for an exact timestamp using the implicit syntax, or use the `$eq`,`$gt`,`$gte`,`$lt`,`$lte` operators with the explicit syntax.

<CodeGroup>
  ```json Companies created on 2023-11-24 at 15:34:07.111222333Z
  {
    "filter": {
      "created_at": "2023-11-24T15:34:07.111222333Z"
    }
  }
  ```

  ```json ... after the year 2000
  {
    "filter": {
      "created_at": {
        "value": {
          "$gte": "2000-01-01T00:00:00Z"
        }
      }
    }
  }
  ```
</CodeGroup>

Since timestamps are stored with nanosecond precision, it is often undesirable to look for an exact timestamp if you're trying to filter records with a lower precision, e.g. in a given hour or day. Here, you should use two operators to set the upper and lower bounds of the query, remembering to use the inclusive `$gte` for the earlier bound and the exclusive `$lt` for the upper bound:

<CodeGroup>
  ```json Companies created between 8am and 9am
  {
    "filter": {
      "created_at": {
        "$gte": "2023-11-24T08:00:00Z",
        "$lt":  "2023-11-24T09:00:00Z"
      }
    }
  }
  ```

  ```json ... on 24th November
  {
    "filter": {
      "created_at": {
        "$gte": "2023-11-24T00:00:00Z",
        "$lt": "2023-11-25T00:00:00Z"
      }
    }
  }
  ```
</CodeGroup>


# Default values
Source: https://docs.attio.com/docs/default-values



Attribute definitions on objects and lists support default values which are used to pre-populate values on records and entries.

There are two kinds of default value: static and dynamic.

## Static defaults

Static values are raw values that are used directly without transformation. For example, you might want to always fill the “Deal Status” property on new entries in your “Sales” list to the value “Lead”.

Static values are supported on all attribute types. The `template` property on default values must match the type of the attribute. These types are documented in our endpoint reference docs.

## Dynamic defaults

Dynamic values are used to generate values on the fly, depending on context. For example, you might want to fill in an “Owner” property to the current user, or set a due date to one week in the future.

Dynamic values take the form of a string. The currently supported list of dynamic value templates, broken down by attribute type, is as follows:

* `actor-reference` attributes, with the default value `current-user`
* `timestamp` or `date` attributes, with an [ISO 8601 Duration](https://tc39.es/proposal-temporal/docs/duration.html) e.g. `“P1M”` for one month in the future

Other attribute types do not currently support dynamic default values.


# Objects and lists
Source: https://docs.attio.com/docs/objects-and-lists



At the core of Attio is our powerful and flexible data model, which allows you to define custom objects and lists with a wide array of attribute types.

Objects can be used to model your domain entities, while lists can be used to aggregate them together and model business processes. However, both objects and lists can have their own attributes. For example, you might be using the deal object to keep track of the various deals you have in progress, but you could also create a list of deals with some additional attributes only relevant to a deal in that list.

## Objects

Objects are the data types used to store facts about your customer. By themselves, they contain little information other than a name, but records and attributes are scoped to a single object. Attio comes with two objects enabled by default, people and companies, and three optional objects: deal, user and workspace.

In relational database terms, objects are roughly tables. In object-orientated terms, they are analogous to classes. Note that an instance of an object is called a record (see below).

For more information about Attio objects, please [see our help center guide](https://attio.com/help/reference/workspace/objects).

### Records

Records are an instantiation of an object, e.g. a specific person or a specific company. In relational database terms, a record is roughly a row in a table. In object-orientated terms, they are analogous to an object (an instantiated class).

### Attributes

Attributes sit on objects and lists and describe what data we can store. Some attributes, such as the name on a person, are system defined. Others, you define yourself, either in Attio’s UI or over the API. Attributes are one of many types such as text, number, select, or currency. In relational database terms, an attribute is roughly a column in a table.

## Lists & entries

Lists are composed of multiple rows, known as "entries", each of which corresponds to a single record. Entries are created by adding a record to a list. Lists can be used to model a particular process. For example, you might have a "Sales" list that contains the companies that you have relationships with.


# Overview
Source: https://docs.attio.com/docs/overview

Start building Attio Apps

Attio is a revolutionary CRM platform which is highly customisable, incredibly powerful and
data-driven. In these guides, you can find everything you need to build powerful integrations,
automations and data pipelines on top of Attio.

Our docs cover guides, examples, references and code to help you build apps and share them with
Attio's customers or for your own workspace.

The Attio Developer Platform consists of two parts:

<CardGroup cols={2}>
  <Card title="App SDK" icon="react" iconType="solid" href="/sdk/guides/creating-an-app">
    This allows developers to embed Typescript React applications within the Attio interface and run
    server functions with access to our REST API.
  </Card>

  <Card title="REST API" icon="server" iconType="light" href="/rest-api/overview">
    This allows developers to build apps that read and write information to and from Attio
    workspaces. You can also subscribe to events in realtime using webhooks.
  </Card>
</CardGroup>

You can use both the App SDK and REST API in your app to build rich experiences.


# Slugs and IDs
Source: https://docs.attio.com/docs/slugs-and-ids



Attio uses [UUIDs](https://en.wikipedia.org/wiki/Universally_unique_identifier) (universally unique identifiers) to identify most of the objects in our system. We can also identify many API objects by their slug property. Slugs have the advantage that they are human-readable. For standard objects and attributes, slugs are also consistent across workspaces.

## IDs and Uniqueness

Entities returned from Attio’s API contain an `id` property which is composed of one or more sub-IDs. The sub-IDs are each a UUID that identifies either the entity or one of its parents.

<CodeGroup>
  ```json Example ID from a record response
  {  
    "data": {  
      "id": {  
        "workspace_id": "5821c091-cf04-4aab-a72a-f1646dbd6841",  
        "object_id": "7c430b6d-fa5b-48c6-bfa7-9520c088c7bc",  
        "record_id": "d2c2f990-3af0-4be5-808a-5605549e787f"  
      },  
      // ...  
    }  
  }
  ```
</CodeGroup>

Uniqueness of an ID is only guaranteed when the ID is taken as a whole, using all sub-IDs. For example, it is unsafe to assume in the example above that the record is the only record with `record_id=”d2c2f990-3af0-4be5-808a-5605549e787f”`.

The safe assumption is that the record is the only record with `record_id=”d2c2f990-3af0-4be5-808a-5605549e787f”` *and* `object_id=”7c430b6d-fa5b-48c6-bfa7-9520c088c7bc"` *and* `workspace_id="5821c091-cf04-4aab-a72a-f1646dbd6841"`.

In practice, such collisions will be rare, but they are important to bear in mind. This is especially true if you are building large integrations which operate on the data of many workspaces.

If you are only operating on data from your own workspace, you can essentially disregard the `workspace_id` key.

## Slugs

For ergonomics and readability, Attio’s API utilises slugs across a variety of entities such as list, objects and attributes. Path parameters, query parameters, request bodies and responses will utilise a unique slug instead of an ID where appropriate.

For example, a request to the [create record endpoint](/rest-api/endpoint-reference/records/create-a-record) accepts values keyed by either the attribute slug or attribute ID and returns values keyed by slug.

```json Request
// Slug form
{
  "data": {
    "values": {
      "email_addresses": [
        {
          "email_address": "[email protected]"
        }
      ]
    }
    // other values...
  }
}

// ID form
{
  "data": {
    "values": {
      "8a8ad54f-9314-4bdb-b867-e62d02a7d333": [
        {
          "email_address": "[email protected]"
        }
      ]
    }
    // other values...
  }
}
```

```json Response
{
  "data": {
    "values": {
      "email_addresses": [
        {
          "active_from": "2023-06-01T15:49:08.524000000Z",
          "active_until": null,
          "created_by_actor": {
            "type": "api-token",
            "id": "d475d597-2900-4c93-841c-9f83154f21dc"
          },
          "original_email_address": "[email protected]",
          "email_address": "[email protected]",
          "email_domain": "bell-labs.com",
          "email_root_domain": "bell-labs.com",
          "email_local_specifier": "r.hamming",
          "attribute_type": "email-address"
        }
      ]
      // other values...
    }
    // other properties on data...
  }
}
```

Slugs are set explicitly over the API, or created automatically when entities are created through the UI. Slugs are not updated when entities are renamed through the UI, so they can be reliably used once seen. They are always unique across entities. For example, there cannot be two attributes with the same slug on the same list.

Slugs of system attributes and objects are consistent across time and across workspaces. Non-system slugs are mutable, so care should be taken when modifying them in case they break any integrations relying upon them. If you would like to provide resilience against such changes, please use IDs when looking up objects instead.

Slugs can be found on the following entities:

* Object (`api_slug`)
* Attribute (`api_slug`)
* List (`api_slug`)
* Status (`title`)
* Select Option (`title`)

***


# Overview
Source: https://docs.attio.com/docs/standard-objects/standard-objects

Companies and people are available in all workspaces

Every Attio workspace starts with a company and person object, and admins can optionally enable the deal, user and workspace standard objects if it meets their needs.

These 5 objects come with a pre-defined set of attributes. As a developer, you can rely on being able to read and write from/to these predefined (or "system") attributes. Admins can also add custom attributes to any of these objects, or create new custom objects with custom attributes on those.

Developers can interact with both standard and custom objects in the same ways, using e.g. the [assert a Record](/rest-api/endpoint-reference/records/assert-a-record) API, but the following pages go into more detail about exactly which attributes you might find and how to read/write them for these.

## Attributes on every object

| Attribute                                     | Type            | Writable? | Notes                                                                                                   |
| --------------------------------------------- | --------------- | --------- | ------------------------------------------------------------------------------------------------------- |
| `created_at`                                  | Timestamp       | No        | When the record was created, defaults to current timestamp (see [Default values](/docs/default-values)) |
| `created_by` (which actor created the record) | Actor reference | No        | Which actor created the record, defaults to current user in web application, or the integration in API  |
| `record_id`                                   | Text (UUID)     | No        | The unique identifier for the record, available as an attribute value to allow easy querying            |


# Companies
Source: https://docs.attio.com/docs/standard-objects/standard-objects-companies

An object to represent businesses: customers, partners, peers...

```yaml Company configuration
api_slug: companies
singular_noun: Company
plural_noun: Companies
```

The company object is available in every Attio workspace. Companies represent businesses, such as customers, partners, suppliers, etc.

When creating a person, a related company record will automatically be generated or matched based on the domain of the person's email address, but they can also be created manually via the web application or the API.

Company records are enriched, which means that Attio will automatically populate additional attributes, and those enriched values cannot be overridden by API users. Additionally, some enriched attributes may be hidden from the API depending on the workspace billing plan.

## Writable attributes

The following attributes can always be read and written using the API:

| Attribute             | Slug                    | Type                                                                       | Traits                                                                                                                                       |
| --------------------- | ----------------------- | -------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------- |
| Domains               | `domains`               | [Domain](/docs/attribute-types/attribute-types-domain)                     | Unique, multiselect                                                                                                                          |
| Name                  | `name`                  | [Text](/docs/attribute-types/attribute-types-text)                         |                                                                                                                                              |
| Description           | `description`           | [Text](/docs/attribute-types/attribute-types-text)                         |                                                                                                                                              |
| Team                  | `team`                  | [Record reference](/docs/attribute-types/attribute-types-record-reference) | Relationship, inverse of `Person -> company`, multiselect                                                                                    |
| Categories            | `categories`            | [Select](/docs/attribute-types/attribute-types-select)                     | Multiselect                                                                                                                                  |
| Primary location      | `primary_location`      | [Location](/docs/attribute-types/attribute-types-location)                 |                                                                                                                                              |
| AngelList             | `angellist`             | [Text](/docs/attribute-types/attribute-types-text)                         |                                                                                                                                              |
| Facebook              | `facebook`              | [Text](/docs/attribute-types/attribute-types-text)                         |                                                                                                                                              |
| Instagram             | `instagram`             | [Text](/docs/attribute-types/attribute-types-text)                         |                                                                                                                                              |
| LinkedIn              | `linkedin`              | [Text](/docs/attribute-types/attribute-types-text)                         |                                                                                                                                              |
| Twitter               | `twitter`               | [Text](/docs/attribute-types/attribute-types-text)                         |                                                                                                                                              |
| Associated deals      | `associated_deals`      | [Record reference](/docs/attribute-types/attribute-types-record-reference) | Relationship, inverse of `Deal -> associated_companies` (only visible if [Deals](/docs/standard-objects/standard-objects-deals) activated    |
| Associated workspaces | `associated_workspaces` | [Record reference](/docs/attribute-types/attribute-types-record-reference) | Relationship, inverse of `Workspace -> company` (only visible if [Workspaces](/docs/standard-objects/standard-objects-workspaces) activated) |

It's important to note that while standard attributes like `domains` have unique properties by default, you cannot create new custom attributes with a unique constraint for Company objects.


# Deals
Source: https://docs.attio.com/docs/standard-objects/standard-objects-deals

An object to represent deals involving people & companies

```yaml Deal configuration
api_slug: deals
singular_noun: Deal
plural_noun: Deal
```

The Deal object is available in every Attio workspace, but disabled by default. It can only be activated by a workspace admin, in the [objects settings](https://app.attio.com/_/settings/data/objects) page.

## Writeable attributes

| Attribute          | Slug                 | Type                                                                       | Traits                                                                                                                       |
| ------------------ | -------------------- | -------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- |
| Name               | `name`               | [Text](/docs/attribute-types/attribute-types-text)                         | Required                                                                                                                     |
| Deal stage         | `stage`              | [Status](/docs/attribute-types/attribute-types-status)                     | Required - by default one of `"Lead"`, `"In Progress"`, `"Won 🎉"`, `"Lost"` (workspaces can configure these status options) |
| Deal owner         | `owner`              | [Actor reference](/docs/attribute-types/attribute-types-actor-reference)   | Required                                                                                                                     |
| Deal value         | `value`              | [Currency](/docs/attribute-types/attribute-types-currency)                 | Defaults to USD, can be changed                                                                                              |
| Associated people  | `associated_people`  | [Record reference](/docs/attribute-types/attribute-types-record-reference) | Relationship, inverse of `Person -> associated_deals`                                                                        |
| Associated company | `associated_company` | [Record reference](/docs/attribute-types/attribute-types-record-reference) | Relationship, inverse of `Company -> associated_deals`                                                                       |

Note that deals do not have a unique attribute by default. This means that they cannot be automatically asserted without adding an additional unique attribute.


# People
Source: https://docs.attio.com/docs/standard-objects/standard-objects-people

An object to represent human beings

```yaml People configuration
api_slug: people
singular_noun: Person
plural_noun: People
```

The person object is available in every Attio workspace. When creating a person, a related company record will automatically be generated or matched based on the domain of the person's email address, but they can also be created manually via the web application or the API.

Person records are enriched, which means that Attio will automatically populate additional attributes, and those values cannot be overridden by API users. Additionally, some enriched attributes may be hidden from the API depending on the workspace billing plan.

## Writeable attributes

| Attribute        | Slug               | Type                                                                       | Traits                                                                                                                                    |
| ---------------- | ------------------ | -------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- |
| Email addresses  | `email_addresses`  | [Email address](/docs/attribute-types/attribute-types-email-address)       | Unique, multiselect                                                                                                                       |
| Name             | `name`             | [(Personal) name](/docs/attribute-types/attribute-types-personal-name)     |                                                                                                                                           |
| Company          | `company`          | [Record reference](/docs/attribute-types/attribute-types-record-reference) | Relationship, inverse of `Company -> team`                                                                                                |
| Description      | `description`      | [Text](/docs/attribute-types/attribute-types-text)                         |                                                                                                                                           |
| Job title        | `job_title`        | [Text](/docs/attribute-types/attribute-types-text)                         |                                                                                                                                           |
| Phone numbers    | `phone_numbers`    | [Phone number](/docs/attribute-types/attribute-types-phone-number)         | Multiselect                                                                                                                               |
| Primary location | `primary_location` | [Location](/docs/attribute-types/attribute-types-location)                 |                                                                                                                                           |
| AngelList        | `angellist`        | [Text](/docs/attribute-types/attribute-types-text)                         |                                                                                                                                           |
| Facebook         | `facebook`         | [Text](/docs/attribute-types/attribute-types-text)                         |                                                                                                                                           |
| Instagram        | `instagram`        | [Text](/docs/attribute-types/attribute-types-text)                         |                                                                                                                                           |
| LinkedIn         | `linkedin`         | [Text](/docs/attribute-types/attribute-types-text)                         |                                                                                                                                           |
| Twitter          | `twitter`          | [Text](/docs/attribute-types/attribute-types-text)                         |                                                                                                                                           |
| Associated deals | `associated_deals` | [Record reference](/docs/attribute-types/attribute-types-record-reference) | Relationship, inverse of `Deal -> associated_people` (only available if [Deals](/docs/standard-objects/standard-objects-deals) activated) |
| Associated users | `associated_users` | [Record reference](/docs/attribute-types/attribute-types-record-reference) | Relationship, inverse of `User -> person` (only available if [Users](/docs/standard-objects/standard-objects-users) activated)            |


# Users
Source: https://docs.attio.com/docs/standard-objects/standard-objects-users

An object to represent users of your product

```yaml User configuration
api_slug: users
singular_noun: User
plural_noun: Users
```

The User object is available in every Attio workspace, but disabled by default. It can only be activated by a workspace admin, in the [Objects settings](https://app.attio.com/_/settings/data/objects) page.

Users represent a user of your product. They are related to a [Person](/docs/standard-objects/standard-objects-people), have an email address, and an ID attribute that is defined by your system. Users are grouped together in Workspaces.

## Writeable attributes

| Attribute             | Slug                    | Type                                                                       | Traits                                                              |
| --------------------- | ----------------------- | -------------------------------------------------------------------------- | ------------------------------------------------------------------- |
| Person                | `person`                | [Record reference](/docs/attribute-types/attribute-types-record-reference) | Relationship, inverse of `Person -> associated_users`               |
| Primary email address | `primary_email_address` | [Text](/docs/attribute-types/attribute-types-text)                         | Required, unique - this is usually their login email in your system |
| ID                    | `user_id`               | [Text](/docs/attribute-types/attribute-types-text)                         | Required, unique - this is usually their ID in your system          |
| Workspaces            | `workspace`             | [Record reference](/docs/attribute-types/attribute-types-record-reference) | Relationship, inverse of `Workspace -> users`                       |

Users can be asserted by either their `primary_email_address` or `user_id` unique attributes, or you can add your own.


# Workspaces
Source: https://docs.attio.com/docs/standard-objects/standard-objects-workspaces

An object to group users of your product

```yaml Workspace configuration
api_slug: workspaces
singular_noun: Workspace
plural_noun: Workspaces
```

The Workspace object is available in every Attio workspace, but disabled by default. It can only be activated by a workspace admin, in the [objects settings](https://app.attio.com/_/settings/data/objects) page.

Workspaces represent a grouping of users, or an account, in your product. Workspaces can belong to a [company](/docs/standard-objects/standard-objects-companies) and have multiple [users](/docs/standard-objects/standard-objects-users).

## Writeable attributes

| Attribute  | Slug           | Type                                                                       | Traits                                                                             |
| ---------- | -------------- | -------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- |
| ID         | `workspace_id` | [Text](/docs/attribute-types/attribute-types-text)                         | Unique, required                                                                   |
| Name       | `name`         | [Text](/docs/attribute-types/attribute-types-text)                         |                                                                                    |
| Users      | `users`        | [Record reference](/docs/attribute-types/attribute-types-record-reference) | Relationship, inverse of `User -> workspaces`, multiselect                         |
| Company    | `company`      | [Record reference](/docs/attribute-types/attribute-types-record-reference) | Relationship, inverse of `Company -> associated_workspaces`                        |
| Avatar URL | `avatar_url`   | [Text](/docs/attribute-types/attribute-types-text)                         | Similar to [Company](/docs/standard-objects/standard-objects-companies) `logo_url` |

Workspaces have a single unique attribute, `workspace_id`, which can be used for assertions, or you can add your own.


# Users and workspaces
Source: https://docs.attio.com/docs/users-and-workspaces



*Not to be confused with our standard objects [users](/docs/standard-objects/standard-objects-users) and [workspaces](/docs/standard-objects/standard-objects-workspaces)*

A **user** is a login account with Attio. For example, a person who has signed up to Attio with the email `person@company.com`.

A **workspace** is a company account with objects, records, lists and such. Every user has at least one workspace created when signing up for the first time. Some users will have multiple workspaces when they are members of large orgsharanisations with multiple workspaces, or for testing and development purposes.

Since users can join multiple workspaces, we use the **workspace member** concept to represent a single user in a single workspace (this also encapsulates their permissions, such as whether they are an admin).

All access to the Attio API is scoped to a single workspace, so you will never interact with users directly. Instead, user-level data such as email addresses are accessed through [workspace member APIs](/rest-api/endpoint-reference/workspace-members/list-workspace-members).


# Create a select option
Source: https://docs.attio.com/rest-api/endpoint-reference/attributes/create-a-select-option

https://api.attio.com/openapi/api post /v2/{target}/{identifier}/attributes/{attribute}/options
Adds a select option to a select attribute on an object or a list.

Required scopes: `object_configuration:read-write`.



# Create a status
Source: https://docs.attio.com/rest-api/endpoint-reference/attributes/create-a-status

https://api.attio.com/openapi/api post /v2/{target}/{identifier}/attributes/{attribute}/statuses
Add a new status to a status attribute on either an object or a list.

Required scopes: `object_configuration:read-write`.



# Create an attribute
Source: https://docs.attio.com/rest-api/endpoint-reference/attributes/create-an-attribute

https://api.attio.com/openapi/api post /v2/{target}/{identifier}/attributes
Creates a new attribute on either an object or a list.

To create an attribute on an object, you must also have the `object_configuration:read-write` scope.

To create an attribute on a list, you must also have the `list_configuration:read-write` scope.



# Get an attribute
Source: https://docs.attio.com/rest-api/endpoint-reference/attributes/get-an-attribute

https://api.attio.com/openapi/api get /v2/{target}/{identifier}/attributes/{attribute}
Gets information about a single attribute on either an object or a list.

Required scopes: `object_configuration:read`.



# List attributes
Source: https://docs.attio.com/rest-api/endpoint-reference/attributes/list-attributes

https://api.attio.com/openapi/api get /v2/{target}/{identifier}/attributes
Lists all attributes defined on a specific object or list. Attributes are returned in the order that they are sorted by in the UI.

Required scopes: `object_configuration:read`.



# List select options
Source: https://docs.attio.com/rest-api/endpoint-reference/attributes/list-select-options

https://api.attio.com/openapi/api get /v2/{target}/{identifier}/attributes/{attribute}/options
Lists all select options for a particular attribute on either an object or a list.

Required scopes: `object_configuration:read`.



# List statuses
Source: https://docs.attio.com/rest-api/endpoint-reference/attributes/list-statuses

https://api.attio.com/openapi/api get /v2/{target}/{identifier}/attributes/{attribute}/statuses
Lists all statuses for a particular status attribute on either an object or a list.

Required scopes: `object_configuration:read`.



# Update a select option
Source: https://docs.attio.com/rest-api/endpoint-reference/attributes/update-a-select-option

https://api.attio.com/openapi/api patch /v2/{target}/{identifier}/attributes/{attribute}/options/{option}
Updates a select option on an attribute on either an object or a list.

Required scopes: `object_configuration:read-write`.



# Update a status
Source: https://docs.attio.com/rest-api/endpoint-reference/attributes/update-a-status

https://api.attio.com/openapi/api patch /v2/{target}/{identifier}/attributes/{attribute}/statuses/{status}
Update a status on an status attribute on either an object or a list.

Required scopes: `object_configuration:read-write`.



# Update an attribute
Source: https://docs.attio.com/rest-api/endpoint-reference/attributes/update-an-attribute

https://api.attio.com/openapi/api patch /v2/{target}/{identifier}/attributes/{attribute}
Updates a single attribute on a given object or list.

Required scopes: `object_configuration:read-write`.



# Create call recording
Source: https://docs.attio.com/rest-api/endpoint-reference/call-recordings/create-call-recording

https://api.attio.com/openapi/api post /v2/meetings/{meeting_id}/call_recordings
Create a call recording for a meeting. This endpoint is rate limited to 1 request per second.

This endpoint is in beta. We will aim to avoid breaking changes, but small updates may be made as we roll out to more users.

Required scopes: `meeting:read`, `call_recording:read-write`.



# Delete call recording
Source: https://docs.attio.com/rest-api/endpoint-reference/call-recordings/delete-call-recording

https://api.attio.com/openapi/api delete /v2/meetings/{meeting_id}/call_recordings/{call_recording_id}
Deletes the specified call recording. This will remove the call recording and all associated data.

This endpoint is in beta. We will aim to avoid breaking changes, but small updates may be made as we roll out to more users.

Required scopes: `meeting:read`, `call_recording:read-write`.



# Get call recording
Source: https://docs.attio.com/rest-api/endpoint-reference/call-recordings/get-call-recording

https://api.attio.com/openapi/api get /v2/meetings/{meeting_id}/call_recordings/{call_recording_id}
Get a single call recording by ID.

This endpoint is in beta. We will aim to avoid breaking changes, but small updates may be made as we roll out to more users.

Required scopes: `meeting:read`, `call_recording:read`.



# List call recordings
Source: https://docs.attio.com/rest-api/endpoint-reference/call-recordings/list-call-recordings

https://api.attio.com/openapi/api get /v2/meetings/{meeting_id}/call_recordings
List all call recordings for a meeting.

This endpoint is in beta. We will aim to avoid breaking changes, but small updates may be made as we roll out to more users.

Required scopes: `meeting:read`, `call_recording:read`.



# Create a comment
Source: https://docs.attio.com/rest-api/endpoint-reference/comments/create-a-comment

https://api.attio.com/openapi/api post /v2/comments
Creates a new comment related to an existing thread, record or entry.

To create comments on records, you will need the `object_configuration:read` and `record_permission:read` scopes.

To create comments on list entries, you will need the `list_configuration:read` and `list_entry:read` scopes.

Required scopes: `comment:read-write`.



# Delete a comment
Source: https://docs.attio.com/rest-api/endpoint-reference/comments/delete-a-comment

https://api.attio.com/openapi/api delete /v2/comments/{comment_id}
Deletes a comment by ID. If deleting a comment at the head of a thread, all messages in the thread are also deleted.

Required scopes: `comment:read-write`.



# Get a comment
Source: https://docs.attio.com/rest-api/endpoint-reference/comments/get-a-comment

https://api.attio.com/openapi/api get /v2/comments/{comment_id}
Get a single comment by ID.

To view comments on records, you will need the `object_configuration:read` and `record_permission:read` scopes.

To view comments on list entries, you will need the `list_configuration:read` and `list_entry:read` scopes.

Required scopes: `comment:read`.



# Assert a company record
Source: https://docs.attio.com/rest-api/endpoint-reference/companies/assert-a-company-record

https://api.attio.com/openapi/standard-objects put /v2/objects/companies/records
Use this endpoint to create or update company records, using a unique attribute to search for existing companies (for example, the `domains` attribute). If a company is found with the same value for the matching attribute, that company will be updated. If no company with the same value for the matching attribute is found, a new company will be created instead. If you would like to avoid matching, please use the Create company endpoint.


If the matching attribute is a multiselect attribute, new values will be added and existing values will not be deleted. For any other multiselect attribute, all values will be either created or deleted as necessary to match the list of supplied values.

Required scopes: `record_permission:read-write`, `object_configuration:read`.



# Create a company record
Source: https://docs.attio.com/rest-api/endpoint-reference/companies/create-a-company-record

https://api.attio.com/openapi/standard-objects post /v2/objects/companies/records
Creates a new company record. This endpoint will throw on conflicts of unique attributes, like `domains`. If you would prefer to update company records on conflicts, please use the Assert company record endpoint instead. Please note, the `logo_url` attribute cannot currently be set via the API.

Required scopes: `record_permission:read-write`, `object_configuration:read`.



# Delete a company record
Source: https://docs.attio.com/rest-api/endpoint-reference/companies/delete-a-company-record

https://api.attio.com/openapi/standard-objects delete /v2/objects/companies/records/{record_id}
Deletes a single company record by ID.

Required scopes: `object_configuration:read`, `record_permission:read-write`.



# Get a company record
Source: https://docs.attio.com/rest-api/endpoint-reference/companies/get-a-company-record

https://api.attio.com/openapi/standard-objects get /v2/objects/companies/records/{record_id}
Gets a single company record by its `record_id`.

Required scopes: `record_permission:read`, `object_configuration:read`.



# List company record attribute values
Source: https://docs.attio.com/rest-api/endpoint-reference/companies/list-company-record-attribute-values

https://api.attio.com/openapi/standard-objects get /v2/objects/companies/records/{record_id}/attributes/{attribute}/values
Gets all values for a given attribute on a company record. Historic values can be queried using the `show_historic` query param. Historic values cannot be queried on COMINT (Communication Intelligence) or enriched attributes and the endpoint will return a 400 error if this is attempted. Historic values are sorted from oldest to newest (by `active_from`). Some attributes are subject to billing status and will return an empty array of values if theworkspace being queried does not have the required billing flag enabled.

Required scopes: `record_permission:read`, `object_configuration:read`.



# List company record entries
Source: https://docs.attio.com/rest-api/endpoint-reference/companies/list-company-record-entries

https://api.attio.com/openapi/standard-objects get /v2/objects/companies/records/{record_id}/entries
List all entries, across all lists, for which this company record is the parent.

Required scopes: `record_permission:read`, `object_configuration:read`, `list_entry:read`.



# List company records
Source: https://docs.attio.com/rest-api/endpoint-reference/companies/list-company-records

https://api.attio.com/openapi/standard-objects post /v2/objects/companies/records/query
Lists company records, with the option to filter and sort results.

Required scopes: `record_permission:read`, `object_configuration:read`.



# Update a company record
Source: https://docs.attio.com/rest-api/endpoint-reference/companies/update-a-company-record

https://api.attio.com/openapi/standard-objects patch /v2/objects/companies/records/{record_id}
Use this endpoint to update company records by `record_id`. If the update payload includes multiselect attributes, the values supplied will be created and prepended to the list of values that already exist (if any). Use the [Assert company endpoint](/rest-api/endpoint-reference/standard-objects/companies/assert-a-company-record) to overwrite or remove multiselect attribute values. Please note, the `logo_url` attribute cannot currently be updated via the API.

Required scopes: `record_permission:read-write`, `object_configuration:read`.



# Assert a deal record
Source: https://docs.attio.com/rest-api/endpoint-reference/deals/assert-a-deal-record

https://api.attio.com/openapi/standard-objects put /v2/objects/deals/records
Use this endpoint to create or update deal records, using a unique attribute to search for existing deals. By default, deals do not have a unique attribute, so you should add your own attribute with a unique constraint to use this API. If a deal is found with the same value for the matching attribute, that deal will be updated, otherwise a new deal will be created instead. If the matching attribute is a multiselect attribute, new values will be added and existing values will not be deleted. For any other multiselect attribute, all values will be either created or deleted as necessary to match the list of supplied values.

Required scopes: `record_permission:read-write`, `object_configuration:read`.



# Create a deal record
Source: https://docs.attio.com/rest-api/endpoint-reference/deals/create-a-deal-record

https://api.attio.com/openapi/standard-objects post /v2/objects/deals/records
Creates a new deal record. This endpoint will throw on conflicts of unique attributes, if defined. If you would prefer to update deal records on conflicts, please use the Assert deal record endpoint instead.

Required scopes: `record_permission:read-write`, `object_configuration:read`.



# Delete a deal record
Source: https://docs.attio.com/rest-api/endpoint-reference/deals/delete-a-deal-record

https://api.attio.com/openapi/standard-objects delete /v2/objects/deals/records/{record_id}
Deletes a single deal record by ID.

Required scopes: `object_configuration:read`, `record_permission:read-write`.



# Get a deal record
Source: https://docs.attio.com/rest-api/endpoint-reference/deals/get-a-deal-record

https://api.attio.com/openapi/standard-objects get /v2/objects/deals/records/{record_id}
Gets a single deal record by its `record_id`.

Required scopes: `record_permission:read`, `object_configuration:read`.



# List deal record attribute values
Source: https://docs.attio.com/rest-api/endpoint-reference/deals/list-deal-record-attribute-values

https://api.attio.com/openapi/standard-objects get /v2/objects/deals/records/{record_id}/attributes/{attribute}/values
Gets all values for a given attribute on a deal record. Historic values can be queried using the `show_historic` query param. Historic values are sorted from oldest to newest (by `active_from`).

Required scopes: `record_permission:read`, `object_configuration:read`.



# List deal record entries
Source: https://docs.attio.com/rest-api/endpoint-reference/deals/list-deal-record-entries

https://api.attio.com/openapi/standard-objects get /v2/objects/deals/records/{record_id}/entries
List all entries, across all lists, for which this deal record is the parent.

Required scopes: `record_permission:read`, `object_configuration:read`, `list_entry:read`.



# List deal records
Source: https://docs.attio.com/rest-api/endpoint-reference/deals/list-deal-records

https://api.attio.com/openapi/standard-objects post /v2/objects/deals/records/query
Lists deal records, with the option to filter and sort results.

Required scopes: `record_permission:read`, `object_configuration:read`.



# Update a deal record
Source: https://docs.attio.com/rest-api/endpoint-reference/deals/update-a-deal-record

https://api.attio.com/openapi/standard-objects patch /v2/objects/deals/records/{record_id}
Use this endpoint to update deal records by `record_id`. If the update payload includes multiselect attributes, the values supplied will be created and prepended to the list of values that already exist (if any). Use the [Assert deal endpoint](/rest-api/endpoint-reference/standard-objects/deals/assert-a-deal-record) to overwrite or remove multiselect attribute values.

Required scopes: `record_permission:read-write`, `object_configuration:read`.



# Assert a list entry by parent
Source: https://docs.attio.com/rest-api/endpoint-reference/entries/assert-a-list-entry-by-parent

https://api.attio.com/openapi/api put /v2/lists/{list}/entries
Use this endpoint to create or update a list entry for a given parent record. If an entry with the specified parent record is found, that entry will be updated. If no such entry is found, a new entry will be created instead. If there are multiple entries with the same parent record, this endpoint with return the "MULTIPLE_MATCH_RESULTS" error. When writing to multi-select attributes, all values will be either created or deleted as necessary to match the list of values supplied in the request body.

Required scopes: `list_entry:read-write`, `list_configuration:read`.



# Create an entry (add record to list)
Source: https://docs.attio.com/rest-api/endpoint-reference/entries/create-an-entry-add-record-to-list

https://api.attio.com/openapi/api post /v2/lists/{list}/entries
Adds a record to a list as a new list entry. This endpoint will throw on conflicts of unique attributes. Multiple list entries are allowed for the same parent record

Required scopes: `list_entry:read-write`, `list_configuration:read`.



# Delete a list entry
Source: https://docs.attio.com/rest-api/endpoint-reference/entries/delete-a-list-entry

https://api.attio.com/openapi/api delete /v2/lists/{list}/entries/{entry_id}
Deletes a single list entry by its `entry_id`.

Required scopes: `list_entry:read-write`, `list_configuration:read`.



# Get a list entry
Source: https://docs.attio.com/rest-api/endpoint-reference/entries/get-a-list-entry

https://api.attio.com/openapi/api get /v2/lists/{list}/entries/{entry_id}
Gets a single list entry by its `entry_id`.

Required scopes: `list_entry:read`, `list_configuration:read`.



# List attribute values for a list entry
Source: https://docs.attio.com/rest-api/endpoint-reference/entries/list-attribute-values-for-a-list-entry

https://api.attio.com/openapi/api get /v2/lists/{list}/entries/{entry_id}/attributes/{attribute}/values
Gets all values for a given attribute on a list entry. This endpoint has the ability to return all historic values using the `show_historic` query param. Historic values are sorted from oldest to newest (by `active_from`).

Required scopes: `list_entry:read`, `list_configuration:read`.



# List entries
Source: https://docs.attio.com/rest-api/endpoint-reference/entries/list-entries

https://api.attio.com/openapi/api post /v2/lists/{list}/entries/query
Lists entries in a given list, with the option to filter and sort results.

Required scopes: `list_entry:read`, `list_configuration:read`.



# Update a list entry (append multiselect values)
Source: https://docs.attio.com/rest-api/endpoint-reference/entries/update-a-list-entry-append-multiselect-values

https://api.attio.com/openapi/api patch /v2/lists/{list}/entries/{entry_id}
Use this endpoint to update list entries by `entry_id`. If the update payload includes multiselect attributes, the values supplied will be created and prepended to the list of values that already exist (if any). Use the `PUT` endpoint to overwrite or remove multiselect attribute values.

Required scopes: `list_entry:read-write`, `list_configuration:read`.



# Update a list entry (overwrite multiselect values)
Source: https://docs.attio.com/rest-api/endpoint-reference/entries/update-a-list-entry-overwrite-multiselect-values

https://api.attio.com/openapi/api put /v2/lists/{list}/entries/{entry_id}
Use this endpoint to update list entries by `entry_id`. If the update payload includes multiselect attributes, the values supplied will overwrite/remove the list of values that already exist (if any). Use the `PATCH` endpoint to add multiselect attribute values without removing those value that already exist.

Required scopes: `list_entry:read-write`, `list_configuration:read`.



# Create a list
Source: https://docs.attio.com/rest-api/endpoint-reference/lists/create-a-list

https://api.attio.com/openapi/api post /v2/lists
Creates a new list.

Once you have your list, add attributes to it using the [Create attribute](/rest-api/endpoint-reference/attributes/create-an-attribute) API, and add records to it using the [Add records to list](/rest-api/endpoint-reference/entries/create-an-entry-add-record-to-list) API. 

New lists must specify which records can be added with the `parent_object` parameter which accepts either an object slug or an object ID. Permissions for the list are controlled with the `workspace_access` and `workspace_member_access` parameters.

Please note that new lists must have either `workspace_access` set to `"full-access"` or one or more element of `workspace_member_access` with a `"full-access"` level. It is also possible to receive a `403` billing error if your workspace is not on a plan that supports either advanced workspace or workspace member-level access for lists.

Required scopes: `list_configuration:read-write`.



# Get a list
Source: https://docs.attio.com/rest-api/endpoint-reference/lists/get-a-list

https://api.attio.com/openapi/api get /v2/lists/{list}
Gets a single list in your workspace that your access token has access to.

Required scopes: `list_configuration:read`.



# List all lists
Source: https://docs.attio.com/rest-api/endpoint-reference/lists/list-all-lists

https://api.attio.com/openapi/api get /v2/lists
List all lists that your access token has access to. lists are returned in the order that they are sorted in the sidebar.

Required scopes: `list_configuration:read`.



# Update a list
Source: https://docs.attio.com/rest-api/endpoint-reference/lists/update-a-list

https://api.attio.com/openapi/api patch /v2/lists/{list}
Updates an existing list. Permissions for the list are controlled with the `workspace_access` and `workspace_member_access` parameters. Please note that lists must have either `workspace_access` set to `"full-access"` or one or more element of `workspace_member_access` with a `"full-access"` level. It is also possible to receive a `403` billing error if your workspace is not on a plan that supports either advanced workspace or workspace member level access for lists. Changing the parent object of a list is not possible through the API as it can have unintended side-effects that should be considered carefully. If you wish to carry out a parent object change you should do so through the UI.

Required scopes: `list_configuration:read-write`.



# Get a meeting
Source: https://docs.attio.com/rest-api/endpoint-reference/meetings/get-a-meeting

https://api.attio.com/openapi/api get /v2/meetings/{meeting_id}
Get a single meeting by ID.

This endpoint is in beta. We will aim to avoid breaking changes, but small updates may be made as we roll out to more users.

Required scopes: `meeting:read`, `record_permission:read`.



# List meetings
Source: https://docs.attio.com/rest-api/endpoint-reference/meetings/list-meetings

https://api.attio.com/openapi/api get /v2/meetings
Lists all meetings in the workspace using a deterministic sort order.

This endpoint is in beta. We will aim to avoid breaking changes, but small updates may be made as we roll out to more users.

Required scopes: `meeting:read`, `record_permission:read`.



# Identify
Source: https://docs.attio.com/rest-api/endpoint-reference/meta/identify

https://api.attio.com/openapi/api get /v2/self
Identify the current access token, the workspace it is linked to, and any permissions it has.



# Create a note
Source: https://docs.attio.com/rest-api/endpoint-reference/notes/create-a-note

https://api.attio.com/openapi/api post /v2/notes
Creates a new note for a given record.

Required scopes: `note:read-write`, `object_configuration:read`, `record_permission:read`.



# Delete a note
Source: https://docs.attio.com/rest-api/endpoint-reference/notes/delete-a-note

https://api.attio.com/openapi/api delete /v2/notes/{note_id}
Delete a single note by ID.

Required scopes: `note:read-write`.



# Get a note
Source: https://docs.attio.com/rest-api/endpoint-reference/notes/get-a-note

https://api.attio.com/openapi/api get /v2/notes/{note_id}
Get a single note by ID.

Required scopes: `note:read`, `object_configuration:read`, `record_permission:read`.



# List notes
Source: https://docs.attio.com/rest-api/endpoint-reference/notes/list-notes

https://api.attio.com/openapi/api get /v2/notes
List notes for all records or for a specific record.

Required scopes: `note:read`, `object_configuration:read`, `record_permission:read`.



# Create an object
Source: https://docs.attio.com/rest-api/endpoint-reference/objects/create-an-object

https://api.attio.com/openapi/api post /v2/objects
Creates a new custom object in your workspace.

Required scopes: `object_configuration:read-write`.



# Get an object
Source: https://docs.attio.com/rest-api/endpoint-reference/objects/get-an-object

https://api.attio.com/openapi/api get /v2/objects/{object}
Gets a single object by its `object_id` or slug.

Required scopes: `object_configuration:read`.



# List objects
Source: https://docs.attio.com/rest-api/endpoint-reference/objects/list-objects

https://api.attio.com/openapi/api get /v2/objects
Lists all system-defined and user-defined objects in your workspace.

Required scopes: `object_configuration:read`.



# Update an object
Source: https://docs.attio.com/rest-api/endpoint-reference/objects/update-an-object

https://api.attio.com/openapi/api patch /v2/objects/{object}
Updates a single object. The object to be updated is identified by its `object_id`.

Required scopes: `object_configuration:read-write`.



# OpenAPI
Source: https://docs.attio.com/rest-api/endpoint-reference/openapi

Access the OpenAPI specification for the Attio REST API

Attio exposes a public OpenAPI specification for the Attio REST API. The specification is available
[here](https://api.attio.com/openapi/api).


# Assert a person Record
Source: https://docs.attio.com/rest-api/endpoint-reference/people/assert-a-person-record

https://api.attio.com/openapi/standard-objects put /v2/objects/people/records
Use this endpoint to create or update person records, using a unique attribute to search for existing People (for example the `email_addresses` attribute). If a person is found with the same value for the matching attribute, that person will be updated. If no person with the same value for the matching attribute is found, a new person will be created instead. If you would like to avoid matching, please use the Create person endpoint.


If the matching attribute is a multiselect attribute, new values will be added and existing values will not be deleted. For any other multiselect attribute, all values will be either created or deleted as necessary to match the list of supplied values.

Required scopes: `record_permission:read-write`, `object_configuration:read`.



# Create a person Record
Source: https://docs.attio.com/rest-api/endpoint-reference/people/create-a-person-record

https://api.attio.com/openapi/standard-objects post /v2/objects/people/records
Creates a new person Record. This endpoint will throw on conflicts of unique attributes, like `email_addresses`. If you would prefer to update person records on conflicts, please use the Assert person record endpoint instead. Please note, the `avatar_url` attribute cannot currently be set via the API.

Required scopes: `record_permission:read-write`, `object_configuration:read`.



# Delete a person Record
Source: https://docs.attio.com/rest-api/endpoint-reference/people/delete-a-person-record

https://api.attio.com/openapi/standard-objects delete /v2/objects/people/records/{record_id}
Deletes a single person record by ID.

Required scopes: `object_configuration:read`, `record_permission:read-write`.



# Get a person Record
Source: https://docs.attio.com/rest-api/endpoint-reference/people/get-a-person-record

https://api.attio.com/openapi/standard-objects get /v2/objects/people/records/{record_id}
Gets a single person record by its `record_id`.

Required scopes: `record_permission:read`, `object_configuration:read`.



# List person record attribute values
Source: https://docs.attio.com/rest-api/endpoint-reference/people/list-person-record-attribute-values

https://api.attio.com/openapi/standard-objects get /v2/objects/people/records/{record_id}/attributes/{attribute}/values
Gets all values for a given attribute on a person record. Historic values can be queried using the `show_historic` query param. Historic values cannot be queried on COMINT (Communication Intelligence) or enriched attributes and the endpoint will return a 400 error if this is attempted. Historic values are sorted from oldest to newest (by `active_from`). Some attributes are subject to billing status and will return an empty array of values if theworkspace being queried does not have the required billing flag enabled.

Required scopes: `record_permission:read`, `object_configuration:read`.



# List person record entries
Source: https://docs.attio.com/rest-api/endpoint-reference/people/list-person-record-entries

https://api.attio.com/openapi/standard-objects get /v2/objects/people/records/{record_id}/entries
List all entries, across all lists, for which this person record is the parent.

Required scopes: `record_permission:read`, `object_configuration:read`, `list_entry:read`.



# List person records 
Source: https://docs.attio.com/rest-api/endpoint-reference/people/list-person-records

https://api.attio.com/openapi/standard-objects post /v2/objects/people/records/query
Lists person records, with the option to filter and sort results.

Required scopes: `record_permission:read`, `object_configuration:read`.



# Update a person Record
Source: https://docs.attio.com/rest-api/endpoint-reference/people/update-a-person-record

https://api.attio.com/openapi/standard-objects patch /v2/objects/people/records/{record_id}
Use this endpoint to update person records by `record_id`. If the update payload includes multiselect attributes, the values supplied will be created and prepended to the list of values that already exist (if any). Use the [Assert person endpoint](/reference/put_v2-objects-people-records) to overwrite or remove multiselect attribute values. Please note, the `avatar_url` attribute cannot currently be updated via the API.

Required scopes: `record_permission:read-write`, `object_configuration:read`.



# Assert a record
Source: https://docs.attio.com/rest-api/endpoint-reference/records/assert-a-record

https://api.attio.com/openapi/api put /v2/objects/{object}/records
Use this endpoint to create or update people, companies and other records. A matching attribute is used to search for existing records. If a record is found with the same value for the matching attribute, that record will be updated. If no record with the same value for the matching attribute is found, a new record will be created instead. If you would like to avoid matching, please use the [Create record endpoint](/rest-api/endpoint-reference/records/create-a-record).

If the matching attribute is a multiselect attribute, new values will be added and existing values will not be deleted. For any other multiselect attribute, all values will be either created or deleted as necessary to match the list of supplied values.

Required scopes: `record_permission:read-write`, `object_configuration:read`.



# Create a record
Source: https://docs.attio.com/rest-api/endpoint-reference/records/create-a-record

https://api.attio.com/openapi/api post /v2/objects/{object}/records
Creates a new person, company or other record. This endpoint will throw on conflicts of unique attributes. If you would prefer to update records on conflicts, please use the [Assert record endpoint](/rest-api/endpoint-reference/records/assert-a-record) instead.

Required scopes: `record_permission:read-write`, `object_configuration:read`.



# Delete a record
Source: https://docs.attio.com/rest-api/endpoint-reference/records/delete-a-record

https://api.attio.com/openapi/api delete /v2/objects/{object}/records/{record_id}
Deletes a single record (e.g. a company or person) by ID.

Required scopes: `object_configuration:read`, `record_permission:read-write`.



# Get a record
Source: https://docs.attio.com/rest-api/endpoint-reference/records/get-a-record

https://api.attio.com/openapi/api get /v2/objects/{object}/records/{record_id}
Gets a single person, company or other record by its `record_id`.

Required scopes: `record_permission:read`, `object_configuration:read`.



# List record attribute values
Source: https://docs.attio.com/rest-api/endpoint-reference/records/list-record-attribute-values

https://api.attio.com/openapi/api get /v2/objects/{object}/records/{record_id}/attributes/{attribute}/values
Gets all values for a given attribute on a record. Historic values can be queried using the `show_historic` query param. Historic values cannot be queried on COMINT (Communication Intelligence) or enriched attributes and the endpoint will return a 400 error if this is attempted. Historic values are sorted from oldest to newest (by `active_from`). Some attributes are subject to billing status and will return an empty array of values if theworkspace being queried does not have the required billing flag enabled.

Required scopes: `record_permission:read`, `object_configuration:read`.



# List record entries
Source: https://docs.attio.com/rest-api/endpoint-reference/records/list-record-entries

https://api.attio.com/openapi/api get /v2/objects/{object}/records/{record_id}/entries
List all entries, across all lists, for which this record is the parent.

Required scopes: `record_permission:read`, `object_configuration:read`, `list_entry:read`.



# List records
Source: https://docs.attio.com/rest-api/endpoint-reference/records/list-records

https://api.attio.com/openapi/api post /v2/objects/{object}/records/query
Lists people, company or other records, with the option to filter and sort results.

Required scopes: `record_permission:read`, `object_configuration:read`.



# Update a record (append multiselect values)
Source: https://docs.attio.com/rest-api/endpoint-reference/records/update-a-record-append-multiselect-values

https://api.attio.com/openapi/api patch /v2/objects/{object}/records/{record_id}
Use this endpoint to update people, companies, and other records by `record_id`. If the update payload includes multiselect attributes, the values supplied will be created and prepended to the list of values that already exist (if any). Use the `PUT` endpoint to overwrite or remove multiselect attribute values.

Required scopes: `record_permission:read-write`, `object_configuration:read`.



# Update a record (overwrite multiselect values)
Source: https://docs.attio.com/rest-api/endpoint-reference/records/update-a-record-overwrite-multiselect-values

https://api.attio.com/openapi/api put /v2/objects/{object}/records/{record_id}
Use this endpoint to update people, companies, and other records by `record_id`. If the update payload includes multiselect attributes, the values supplied will overwrite/remove the list of values that already exist (if any). Use the `PATCH` endpoint to append multiselect values without removing those that already exist.

Required scopes: `record_permission:read-write`, `object_configuration:read`.



# Create a task
Source: https://docs.attio.com/rest-api/endpoint-reference/tasks/create-a-task

https://api.attio.com/openapi/api post /v2/tasks
Creates a new task.

At present, tasks can only be created from plaintext without record reference formatting.

Required scopes: `task:read-write`, `object_configuration:read`, `record_permission:read`, `user_management:read`.



# Delete a task
Source: https://docs.attio.com/rest-api/endpoint-reference/tasks/delete-a-task

https://api.attio.com/openapi/api delete /v2/tasks/{task_id}
Delete a task by ID.

Required scopes: `task:read-write`.



# Get a task
Source: https://docs.attio.com/rest-api/endpoint-reference/tasks/get-a-task

https://api.attio.com/openapi/api get /v2/tasks/{task_id}
Get a single task by ID.

Required scopes: `task:read`, `object_configuration:read`, `record_permission:read`, `user_management:read`.



# List tasks
Source: https://docs.attio.com/rest-api/endpoint-reference/tasks/list-tasks

https://api.attio.com/openapi/api get /v2/tasks
List all tasks. Results are sorted by creation date, from oldest to newest.

Required scopes: `task:read`, `object_configuration:read`, `record_permission:read`, `user_management:read`.



# Update a task
Source: https://docs.attio.com/rest-api/endpoint-reference/tasks/update-a-task

https://api.attio.com/openapi/api patch /v2/tasks/{task_id}
Updates an existing task by `task_id`. At present, only the `deadline_at`, `is_completed`, `linked_records`, and `assignees` fields can be updated.

Required scopes: `task:read-write`, `object_configuration:read`, `record_permission:read`, `user_management:read`.



# Get a thread
Source: https://docs.attio.com/rest-api/endpoint-reference/threads/get-a-thread

https://api.attio.com/openapi/api get /v2/threads/{thread_id}
Get all comments in a thread.

To view threads on records, you will need the `object_configuration:read` and `record_permission:read` scopes.

To view threads on list entries, you will need the `list_configuration:read` and `list_entry:read` scopes.

Required scopes: `comment:read`.



# List threads
Source: https://docs.attio.com/rest-api/endpoint-reference/threads/list-threads

https://api.attio.com/openapi/api get /v2/threads
List threads of comments on a record or list entry.

To view threads on records, you will need the `object_configuration:read` and `record_permission:read` scopes.

To view threads on list entries, you will need the `list_configuration:read` and `list_entry:read` scopes.

Required scopes: `comment:read`.



# Create transcript
Source: https://docs.attio.com/rest-api/endpoint-reference/transcripts/create-transcript

https://api.attio.com/openapi/api post /v2/meetings/{meeting_id}/call_recordings/{call_recording_id}/transcript
Creates a transcript for the specified call recording. Each call recording can have only one associated transcript. Once created, transcripts are immutable and cannot be modified. To update a transcript, you must first delete the existing one and then create a new transcript.

This endpoint is in beta. We will aim to avoid breaking changes, but small updates may be made as we roll out to more users.

Required scopes: `meeting:read`, `call_recording:read-write`.



# Delete call recording transcript
Source: https://docs.attio.com/rest-api/endpoint-reference/transcripts/delete-call-recording-transcript

https://api.attio.com/openapi/api delete /v2/meetings/{meeting_id}/call_recordings/{call_recording_id}/transcript
Deletes the transcript for the specified call recording.

This endpoint is in beta. We will aim to avoid breaking changes, but small updates may be made as we roll out to more users.

Required scopes: `meeting:read`, `call_recording:read-write`.



# Get call transcript
Source: https://docs.attio.com/rest-api/endpoint-reference/transcripts/get-call-transcript

https://api.attio.com/openapi/api get /v2/meetings/{meeting_id}/call_recordings/{call_recording_id}/transcript
Get the transcript for a call recording.

This endpoint is in beta. We will aim to avoid breaking changes, but small updates may be made as we roll out to more users.

Required scopes: `meeting:read`, `call_recording:read`.



# Assert a user record
Source: https://docs.attio.com/rest-api/endpoint-reference/users/assert-a-user-record

https://api.attio.com/openapi/standard-objects put /v2/objects/users/records
Use this endpoint to create or update user records, using a unique attribute to search for existing users (for example the `primary_email_address` attribute). If a user is found with the same value for the matching attribute, that user will be updated, otherwise a new user will be created instead. If the matching attribute is a multiselect attribute, new values will be added and existing values will not be deleted. For any other multiselect attribute, all values will be either created or deleted as necessary to match the list of supplied values.

Required scopes: `record_permission:read-write`, `object_configuration:read`.



# Create a user record
Source: https://docs.attio.com/rest-api/endpoint-reference/users/create-a-user-record

https://api.attio.com/openapi/standard-objects post /v2/objects/users/records
Creates a new user record. This endpoint will throw on conflicts of unique attributes, like `primary_email_address`. If you would prefer to update user records on conflicts, please use the Assert user record endpoint instead. Please note, the `avatar_url` attribute cannot currently be set via the API.

Required scopes: `record_permission:read-write`, `object_configuration:read`.



# Delete a user record
Source: https://docs.attio.com/rest-api/endpoint-reference/users/delete-a-user-record

https://api.attio.com/openapi/standard-objects delete /v2/objects/users/records/{record_id}
Deletes a single user record by ID.

Required scopes: `object_configuration:read`, `record_permission:read-write`.



# Get a user record
Source: https://docs.attio.com/rest-api/endpoint-reference/users/get-a-user-record

https://api.attio.com/openapi/standard-objects get /v2/objects/users/records/{record_id}
Gets a single user record by its `record_id`.

Required scopes: `record_permission:read`, `object_configuration:read`.



# List user record attribute values
Source: https://docs.attio.com/rest-api/endpoint-reference/users/list-user-record-attribute-values

https://api.attio.com/openapi/standard-objects get /v2/objects/users/records/{record_id}/attributes/{attribute}/values
Gets all values for a given attribute on a user record. Historic values can be queried using the `show_historic` query param. Historic values are sorted from oldest to newest (by `active_from`).

Required scopes: `record_permission:read`, `object_configuration:read`.



# List user record entries
Source: https://docs.attio.com/rest-api/endpoint-reference/users/list-user-record-entries

https://api.attio.com/openapi/standard-objects get /v2/objects/users/records/{record_id}/entries
List all entries, across all lists, for which this user record is the parent.

Required scopes: `record_permission:read`, `object_configuration:read`, `list_entry:read`.



# List user records
Source: https://docs.attio.com/rest-api/endpoint-reference/users/list-user-records

https://api.attio.com/openapi/standard-objects post /v2/objects/users/records/query
Lists user records, with the option to filter and sort results.

Required scopes: `record_permission:read`, `object_configuration:read`.



# Update a user Record
Source: https://docs.attio.com/rest-api/endpoint-reference/users/update-a-user-record

https://api.attio.com/openapi/standard-objects patch /v2/objects/users/records/{record_id}
Use this endpoint to update user records by `record_id`. If the update payload includes multiselect attributes, the values supplied will be created and prepended to the list of values that already exist (if any). Use the [Assert user endpoint](/reference/put_v2-objects-users-records) to overwrite or remove multiselect attribute values. Please note, the `avatar_url` attribute cannot currently be updated via the API.

Required scopes: `record_permission:read-write`, `object_configuration:read`.



# Create a webhook
Source: https://docs.attio.com/rest-api/endpoint-reference/webhooks/create-a-webhook

https://api.attio.com/openapi/api post /v2/webhooks
Create a webhook and associated subscriptions.

Required scopes: `webhook:read-write`.



# Delete a webhook
Source: https://docs.attio.com/rest-api/endpoint-reference/webhooks/delete-a-webhook

https://api.attio.com/openapi/api delete /v2/webhooks/{webhook_id}
Delete a webhook by ID.

Required scopes: `webhook:read-write`.



# Get a webhook
Source: https://docs.attio.com/rest-api/endpoint-reference/webhooks/get-a-webhook

https://api.attio.com/openapi/api get /v2/webhooks/{webhook_id}
Get a single webhook.

Required scopes: `webhook:read`.



# List webhooks
Source: https://docs.attio.com/rest-api/endpoint-reference/webhooks/list-webhooks

https://api.attio.com/openapi/api get /v2/webhooks
Get all of the webhooks in your workspace.

Required scopes: `webhook:read`.



# Update a webhook
Source: https://docs.attio.com/rest-api/endpoint-reference/webhooks/update-a-webhook

https://api.attio.com/openapi/api patch /v2/webhooks/{webhook_id}
Update a webhook and associated subscriptions.

Required scopes: `webhook:read-write`.



# Get a workspace member
Source: https://docs.attio.com/rest-api/endpoint-reference/workspace-members/get-a-workspace-member

https://api.attio.com/openapi/api get /v2/workspace_members/{workspace_member_id}
Gets a single workspace member by ID.

Required scopes: `user_management:read`.



# List workspace members
Source: https://docs.attio.com/rest-api/endpoint-reference/workspace-members/list-workspace-members

https://api.attio.com/openapi/api get /v2/workspace_members
Lists all workspace members in the workspace.

Required scopes: `user_management:read`.



# Assert a workspace record
Source: https://docs.attio.com/rest-api/endpoint-reference/workspaces/assert-a-workspace-record

https://api.attio.com/openapi/standard-objects put /v2/objects/workspaces/records
Use this endpoint to create or update workspace records, using a unique attribute to search for existing workspaces (for example the `workspace_id` attribute). If a workspace is found with the same value for the matching attribute, that workspace will be updated, otherwise a new workspace will be created instead. If the matching attribute is a multiselect attribute, new values will be added and existing values will not be deleted. For any other multiselect attribute, all values will be either created or deleted as necessary to match the list of supplied values.

Required scopes: `record_permission:read-write`, `object_configuration:read`.



# Create a workspace record
Source: https://docs.attio.com/rest-api/endpoint-reference/workspaces/create-a-workspace-record

https://api.attio.com/openapi/standard-objects post /v2/objects/workspaces/records
Creates a new workspace record. This endpoint will throw on conflicts of unique attributes, like `workspace_id`. If you would prefer to update workspace records on conflicts, please use the Assert workspace record endpoint instead.

Required scopes: `record_permission:read-write`, `object_configuration:read`.



# Delete a workspace record
Source: https://docs.attio.com/rest-api/endpoint-reference/workspaces/delete-a-workspace-record

https://api.attio.com/openapi/standard-objects delete /v2/objects/workspaces/records/{record_id}
Deletes a single workspace record by ID.

Required scopes: `object_configuration:read`, `record_permission:read-write`.



# Get a workspace record
Source: https://docs.attio.com/rest-api/endpoint-reference/workspaces/get-a-workspace-record

https://api.attio.com/openapi/standard-objects get /v2/objects/workspaces/records/{record_id}
Gets a single workspace record by its `record_id`.

Required scopes: `record_permission:read`, `object_configuration:read`.



# List workspace record attribute values
Source: https://docs.attio.com/rest-api/endpoint-reference/workspaces/list-workspace-record-attribute-values

https://api.attio.com/openapi/standard-objects get /v2/objects/workspaces/records/{record_id}/attributes/{attribute}/values
Gets all values for a given attribute on a workspace record. Historic values can be queried using the `show_historic` query param. Historic values are sorted from oldest to newest (by `active_from`).

Required scopes: `record_permission:read`, `object_configuration:read`.



# List workspace record entries
Source: https://docs.attio.com/rest-api/endpoint-reference/workspaces/list-workspace-record-entries

https://api.attio.com/openapi/standard-objects get /v2/objects/workspaces/records/{record_id}/entries
List all entries, across all lists, for which this workspace record is the parent.

Required scopes: `record_permission:read`, `object_configuration:read`, `list_entry:read`.



# List workspace records
Source: https://docs.attio.com/rest-api/endpoint-reference/workspaces/list-workspace-records

https://api.attio.com/openapi/standard-objects post /v2/objects/workspaces/records/query
Lists workspace records, with the option to filter and sort results.

Required scopes: `record_permission:read`, `object_configuration:read`.



# Update a workspace Record
Source: https://docs.attio.com/rest-api/endpoint-reference/workspaces/update-a-workspace-record

https://api.attio.com/openapi/standard-objects patch /v2/objects/workspaces/records/{record_id}
Use this endpoint to update workspace records by `record_id`. If the update payload includes multiselect attributes, the values supplied will be created and prepended to the list of values that already exist (if any). Use the [Assert workspace endpoint](/rest-api/endpoint-reference/standard-objects/workspaces/assert-a-workspace-record) to overwrite or remove multiselect attribute values.

Required scopes: `record_permission:read-write`, `object_configuration:read`.



# How to authenticate requests
Source: https://docs.attio.com/rest-api/how-to/authentication

How to generate access tokens and make requests

In order to make requests to the Attio REST API, you need to generate an access token.

There are two ways to generate an access token:

1. By implementing an OAuth 2.0 flow
2. By generating an API key for your workspace

You should prefer the OAuth 2.0 flow if building an app for multiple workspaces. If you are building
an app for a single workspace, you can manually generate an API key to make requests on behalf of
that workspace only.

## Generating access tokens

### OAuth 2.0

Attio implements the standard [OAuth 2.0 specification](https://datatracker.ietf.org/doc/html/rfc6749).
You can find the reference for our OAuth authorize, token exchange and introspect endpoints
[here](/rest-api/endpoint-reference/oauth-20/authorize-endpoint).

If you would prefer a tutorial on how to implement an OAuth 2.0 flow into an existing app, you can
find one [here](/rest-api/tutorials/connect-an-app-through-oauth).

### API key

If you only need a token for a single workspace, you can generate an API key in the developer
settings page of your apps. You can find docs on to do this [here](https://attio.com/help/apps/other-apps/generating-an-api-key).

## Using tokens

Both OAuth access tokens and single-workspace access token are used in the same way. Pass the value
of the token in the `Authorization` header of your requests like so.

```
Authorization: Bearer <access_token>
```

<Info>
  We also support [HTTP Basic
  Authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization#basic_authentication),
  where the username is the token and the password is left blank. However, we recommend using Bearer
  authentication where possible.
</Info>

### Scopes

Both OAuth access tokens and single-workspace access tokens use scopes to control the resources that
the token has access to and the actions that can be performed on those resources.

The possible scopes for OAuth and single-workspace access tokens are the same.

The reference documentation for each endpoint includes a "Required scopes" section that lists the
scopes needed to call that endpoint.

When using an OAuth access token, the scopes are specified by configuring the scope settings for
your app in the developer dashboard.

When using a single-workspace access token, the scopes are specified in the settings UI when
generating the token. Scopes for single-workspace access tokens can also be modified on existing
tokens.


# How to apply filters and sorts
Source: https://docs.attio.com/rest-api/how-to/filtering-and-sorting

Searching for just the records you need

Some of our endpoints allow specifying `filter` or `sorts` objects as part of the request. These properties can help reduce the size of the result set or get them back in a more appropriate order.

## Filtering

Attio supports two distinct formats for filtering. There is the verbose format, which supports a wider variety of operators and conditions, and a shorthand format, which is useful for quick equality checks.

### Shorthand filters

Shorthand filters generally look like this:

```json People called "John Smith" with the email "john@smith.com"
POST /v2/objects/companies/records/query
Content-Type: application/json

{
  "filter": {
    "name": "John Smith",
    "email_addresses": "john@smith.com"
  }
}
```

### Verbose filters

Verbose filters allow joining multiple different conditions together, or querying for different properties of the attribute value. All shorthand syntaxes can be expressed in the verbose syntax. For example, the above filter can also be written as:

```json
POST /v2/objects/companies/records/query
Content-Type: application/json

{
  "filter": {
    "$and": [
      {
        "name": {
          "full_name": {
            "$eq": "John Smith"
          }
        }
      },
      {
        "email_addresses": {
          "email_address": {
            "$eq": "john@smith.com"
          }
        }
      }
    ]
  }
}
```

Note that we're using a logical operator (`$and`) to combine these two conditions, and that we're querying specific properties on the attributes (`full_name` and `normalized_email_address`).

Each attribute type has specific properties available, and so the set of possible filters varies by attribute type, but every attribute type is filterable in some way. We have examples of filtering by each attribute type in our [attribute types documentation](/docs/attribute-types).

Next, let's walk through some more advanced filtering, starting with the comparison operators.

## Comparison operators

There are nine comparison operators in total.

`$eq` is by far the most common, this operator checks for equality. It is supported by every attribute type. If you're using shorthand syntax, this is usually the implied operator, but it can also be specified explicitly:

```json Deals with an exact name
{
  "name": {
    "$eq": "Contract with Apple"
  }
}
```

`$not_empty` is also available on some attribute types, this operator allows filtering results based on whether there is any value defined at all, for example:

```json Companies which have at least one domain
{
  "domains": {
    "$not_empty": true
  }
}
```

`$in`can be used to check if the record or entry has a value that is part of a set.

```json Records where record_id is one of many values
{
  "filter": {
    "record_id": {
      "$in": ["000e8881-37cc-41d2-bc22-39fe35e76e6b", "592dc9d8-548b-4148-813f-1259055ca83c"]
    }
  }
}
```

There are also operators for string properties and numeric/date properties:

### String comparisons

For string-like properties or attributes, there are three further operators. `$contains` can be used for matching parts of a string, case-insensitively:

```json Companies in New York
{
  "primary_location": {
    "locality": {
      "$contains": "new york"
    }
  }
}
```

```json Companies with "LTD" in the name
{
  "name": {
    "$contains": "LTD"
  }
}
```

`$starts_with` and `$ends_with` can match on the beginning or the end of the string, respectively:

```json People with phone numbers starting +44
{
  "phone_numbers": {
    "$starts_with": "+44"
  }
}
```

```json People with a job title "X engineer"
{
  "job_title": {
    "$ends_with": "of things"
  }
}
```

Note that these can be combined on the same property or attribute to achieve a logical AND:

```json Phone number starts with +44 and ends with 798
{
  "phone_numbers": {
    "$starts_with": "+44",
    "$ends_with": "798"
  }
}
```

### Numeric or date comparisons

There are four operators for comparing sortable properties like numbers or dates:

1. **Less than** (`$lt`), finds records where the value is strictly less than (exclusive) the given value
2. **Less than or equal** (`$lte`), finds records where the value is either less than or the same as the given value
3. **Greater than or equal** (`$gte`), finds records where the value is either greater than or the same as the given value
4. **Greater than** (`$gt`), finds records where the value is strictly more than (exclusive) the given value

```json People with 1000 or more Twitter followers
{
  "twitter_follower_count": {
    "$gte": 1000
  }
}
```

```json People with between 100 and 200 followers
{
  "twitter_follower_count": {
    "$gte": 100,
    "$lt": 200
  }
}
```

You can also combine multiple comparators to find values between two points:

```json Companies founded in 2019
{
  "foundation_date": {
    "$gte": "2019-01-01",
    "$lte": "2019-12-31"
  }
}
```

## Logical operators

You can combine multiple conditions using the `$and`, `$or` and `$not` operators.

### `$and` operator

`$and` specifies that all conditions must match. If using the shorthand syntax with multiple attributes, this operator is implied. Note that you can also use the shorthand syntax for individual conditions—see the following example.

```json Deals assigned to Lauren in the "In Progress" state
{
  "$and": [
    {"stage": "In Progress"},
    {
      "owner": {
        "referenced_actor_type": "workspace-member",
        "referenced_actor_id": "[laurens-id]"
      }
    }
  ]
}
```

### `$or` operator

`$or` specifies that at least one of the conditions must match. It is not an exclusive-or, if all conditions match it will still pass.

```json List entries on a kanban board in either the "One" or "Two" stage
{
  "$or": [{"stage": "One"}, {"stage": "Two"}]
}
```

### `$not` operator

Attio doesn't offer negative operators, for example there is no inverse of `$eq` like `$neq`. Instead, filters should be wrapped using the `$not` operator, which matches all documents which don't meet the condition.

```json People not called John
{
  "$not": {
    "name": {
      "first_name": "John"
    }
  }
}
```

```json Deals not in the "In Progress" state
{
  "$not": {
    "stage": "In Progress"
  }
}
```

### Combining logical operators

It's possible to combine logical operators to build up trees of filters. For example, you could express multiple `$and` conditions, where some of them are a `$not`:

```json Companies with Apple in their name that aren't using an apple domain
{
  "$and": [
    {"name": {"$contains": "Apple"}},
    {
      "$not": {
        "domains": {
          "root_domain": "apple.com"
        }
      }
    }
  ]
}
```

Or you could query for "deals that are owned by Alice or Bob that are worth more than \$500:

```json Deals owned by Alice/Bob worth more than $500
{
  "$and": [
    {
      "$or": [
        {
          "owner": {
            "referenced_actor_type": "workspace-member",
            "referenced_actor_id": "[alices-id]"
          }
        },
        {
          "owner": {
            "referenced_actor_type": "workspace-member",
            "referenced_actor_id": "[bobs-id]"
          }
        }
      ]
    },
    {
      "value": {
        "$gt": 500
      }
    }
  ]
}
```

## Paths and parents

For [record reference attributes](/docs/attribute-types/attribute-types-record-reference), it's possible to use special `path` filtering by drilling down into the target objects. This filtering method is also supported on list entries.

For example, let's assume we have a list of people we want to hire, called "Candidates" (the `api_slug` is `candidates`). We could then write a query to find entries where the person has an `@apple.com` email address:

```json List entries filtered by their parent record email
{
  "path": [
    ["candidates", "parent_record"],
    ["people", "email_addresses"]
  ],
  "constraints": {
    "email_domain": "apple.com"
  }
}
```

Note that we're using a special attribute called `parent_record` that we can use for filtering any list entry. We can even use these drill-down queries to express a more complicated query, like "entries where the candidate works at the same company as Steve Jobs":

```json Candidates who have worked with Steve Jobs
{
  "path": [
    ["candidates", "parent_record"],
    ["people", "company"],
    ["company", "team"]
  ],
  "constraints": {
    "target_object": "people",
    "target_record_id": "[steve-jobs-record-id]"
  }
}
```

## Sorting

Sorting allows us to get our results back in a particular order, based on attribute values. Each sort must specify a `direction`. If the target attribute is composed of multiple properties (like [(Personal) name](/docs/attribute-types/attribute-types-personal-name)), `field` can also be specified.

We can do sorting by `attribute`, which is either a slug or ID. For example, we could sort People by their last name, then their email address:

```json People sorted by last name, then email
{
  "sorts": [
    {"direction": "asc", "attribute": "name", "field": "last_name"},
    {"direction": "desc", "attribute": "email_addresses"}
  ]
}
```

We can also sort using paths, which works similarly to filtering by path. Instead of specifying `attribute`, you specify a `path` property which resolves to the attribute of the related record(s):

```json People sorted by their Company name
{
  "sorts": [
    {
      "direction": "asc",
      "path": [
        ["people", "company"],
        ["companies", "name"]
      ]
    }
  ]
}
```


# How to paginate API results
Source: https://docs.attio.com/rest-api/how-to/pagination

Retrieving particular ranges of data

API endpoints which are expected to return large numbers of results will use pagination to return a limited number of items at a time.

We use two parameters to provide pagination functionality: `limit` and `offset`.

* `limit` controls the maximum number of results that an endpoint can return. The default value for limit is documented on each specific endpoint.
* `offset` controls how many results to skip over in your results. By default, it is always 0.

When querying all results, your initial call should pass an offset of 0. If the number of results you receive is less than the limit you passed (or the default limit if none was passed explicitly), you have reached the end of the result set and can end pagination. Otherwise, make another API call with a new offset, set to the previous `offset` + `limit` to get the next page, and then repeat until you are at the end of the list.

For example, if there were 122 records available, your queries would look something like this:

```http
GET /v2/objects/people/records?limit=50             # Results 1 to 50
GET /v2/objects/people/records?limit=50&offset=50   # Results 51 to 100
GET /v2/objects/people/records?limit=50&offset=100  # Results 101 to 122, less than limit, stop here
```


# How to handle rate limits
Source: https://docs.attio.com/rest-api/how-to/rate-limiting

How to ensure your app handles rate limits gracefully

The Attio API applies rate limits to all API calls to ensure fair usage and maintain the
availability and stability of the platform.

Our rate limit across the whole API is **100 requests per second** for read requests, **25 requests per second** for write requests. We may occasionally reduce the rate limit as part of incident response to protect our other systems, and we may also permanently lower it for specific APIs which handle a lot of data (this will be documented on the endpoint if so).

This means that your software should be prepared to receive this response, and handle it appropriately, even if you don’t currently anticipate making this many requests.

## Rate limit response

If you exceed the limit, you'll get a special HTTP response, like this:

```http HTTP
HTTP/1.1 429 Too Many Requests
Retry-After: Tue, 23 May 2023 14:42:01 GMT
Content-Type: application/json

{
  "status_code": 429,
  "type": "rate_limit_error",
  "code": "rate_limit_exceeded",
  "message": "Rate limit exceeded, please try again later"
}
```

Rate limit responses always have the HTTP status code `429`. They also always include a `Retry-After` header, which is a date at which the limit resets (usually the following second), and they may also include additional debugging information in the JSON body.

### Handling rate limit responses

A rate limited response means that we have not processed the request, so it can be safely retried after the limit has reset. Typically this will be in the next clock second. Most programming languages offer a sleep command or equivalent that allows waiting for the reset time to elapse.

Alternatively, you might want to put the request into a background queue to be processed in a different execution thread later.


# How to configure webhooks
Source: https://docs.attio.com/rest-api/how-to/webhooks

Responding to changes in real-time

Webhooks allow you to subscribe to changes that happen in Attio and then receive real-time HTTP requests to a chosen target URL to notify you of these changes.

This pattern can be useful in a wide range of contexts, but is often implemented by those who want to build real-time data syncs (e.g. an ETL pipeline) or fire automations in a timely manner (e.g. Attio’s own Zapier integration is powered by webhooks).

## Creating webhooks

There are two places you can create webhooks: in our settings pages, and the API.

### Creating using the API

We offer a range of endpoints for creating, updating, deleting and viewing webhooks. You can find these endpoints in the [webhooks API reference](/rest-api/endpoint-reference/webhooks).

Creating webhooks over the API is essential for those building integrations for Attio that will operate for many customers.

The webhook APIs also allow you to utilise our powerful filtering functionality (see “Filtering” section below).

### Creating using settings page

You can create webhooks for an integration in the developer settings page.

Please note that webhooks created with tokens that were created through our OAuth sign up flow will not be shown in the developer settings page.

## Authenticating

When receiving webhooks, you should ensure that the request came from us. We cryptographically sign every webhook request using your webhook secret, and include it as HTTP header called `Attio-Signature` (this is duplicated as `X-Attio-Signature` to support legacy middleware).

The `Attio-Signature` value is calculated using a SHA256 HMAC of the request body using your webhook secret as the secret. The webhook's secret is viewable inside the developer settings page and in the API response when creating the webhook.

To verify that webhooks came from us, you should also construct the signature on your side using the same algorithm, then verify that it matches the one in the request.

We encode the Attio-Signature as a hexadecimal string, and we only sign the request body, which we interpret as a UTF-8 string.

Here's an example in NodeJS for verifying the webhook signature:

```typescript TypeScript
const webhookBody = request.body
const webhookSignature = request.headers["attio-signature"]

// Generate signature ourselves
const webhookSecret = "..."
const hmac = crypto.createHmac("sha256", webhookSecret)
hmac.update(webhookBody)
const expectedSignature = hmac.digest("hex")

// Compare signature
if (!crypto.timingSafeEqual(webhookSignature, expectedSignature)) {
  throw new Error("Invalid signature")
}
```

## HTTPS

Webhooks must target URLs secured with HTTPS. This is because targeting URLs using HTTP reveals the confidential content of webhooks to the public internet. In addition to exposing your data to 'man in the middle' attacks, webhooks delivered via HTTP can be read at any point in the journey to your server, for example, by cloud providers or logging services. Ensuring your target URL is encrypted with HTTPS keeps your data secure.

## Idempotency

Webhooks guarantee at-least-once message delivery. Occasionally, due to network instability, Attio may send duplicate messages. To help deduplicate messages, Attio includes an `Idempotency-Key` header which will be different for each message, but the same between retries and redeliveries.

## Delivery attempts

If you're receiving many duplicate messages, it may mean that you're not acknowledging them properly. Attio will mark a delivery as successful if the response code is within the 200-299 range (for example `200` or `202`).If you answer with any other code, Attio will retry delivery of the message up to 10 times with an exponential back-off, which will happen over approximately 3 days in total; after which, the webhook will be marked as degraded and we'll send you an email.

Attio also enforces a 5 second timeout on requests to your target URL. Failure to respond within 5 seconds will be treated as a delivery failure.

## IP addresses

We recommend using the request signature to validate the request instead of relying on IP allowlisting. This will mean that your integration does not require maintenance if we add new IP addresses.

Attio delivers webhooks from a fixed set of IP addresses. In some environments with restrictive firewalls it might be necessary to allowlist these IPs, and from time to time we might need to add a new IP Address to our list. We'll endeavour to provide you with as much notice as possible before we change these.

```text Attio webhooks egress IP addresses
34.76.181.69
35.189.212.204
35.190.200.137
104.199.25.43
35.205.134.181
34.77.170.251
104.155.38.31
35.240.20.227
35.205.218.25
34.77.63.171
35.195.180.236
104.199.20.44
34.78.73.25
34.77.104.7
35.205.250.54
34.78.179.95
35.189.210.201
34.77.106.144
104.155.115.39
34.78.11.169
35.241.187.180
35.240.124.129
35.241.222.75
35.195.62.68
```

## Delivery rate limiting

To avoid overwhelming your server with a large burst of requests, Attio smoothes out webhook delivery with a rate limiter. Rate limiting is implemented on a per-target URL basis. We restrict delivery per URL to a maximum of 25 requests per second. Please contact support if you would like this number adjusted for your workspace.

## Testing webhooks

The developer settings page provides the ability to deliver test payloads to your webhook's target URL.

When building an integration that uses webhooks, this lets you quickly test that your integration is functioning, without having to modify real data in your workspace.

To send a test payload:

1. Navigate to an integration the developer settings page and select an integration.
2. Open an existing webhook or create a new one inside your integration.
3. Ensure your webhook is subscribed to the events that you want to test.
4. Open the dropdown next to the event you want to send a test payload for and select "Send test event to target URL".
5. We'll make an HTTP request to your target URL.

We populate test payloads with real data from your workspace. For example, when testing the `note.created` event, we'll set the `note_id` property on the payload to correspond to a real note you have created. In cases where this is not possible, for example if you have no notes in your system, we'll fallback to randomly generated fake data.

Please note that filters are not taken into account when generating test data.

## Filtering

To reduce the amount of webhooks you receive and help avoid writing client-side filtering code, it's possible to define rules to further limit the events Attio will send. Filters work by taking the payload of the generated webhook event, and running it against a set of rules that you define.

For example, you might only care about updates to a particular attribute on a particular list, or about new notes on people but not companies.

Our API will validate that the filter syntax you have provided is valid. Filters are currently only editable and viewable over the API.

### Filter syntax

The filter syntax can be broken down into the following components.

#### Logical joins ($and, $or)

* An `$and` filter passes when all operations match the payload.
* An `$or` filter passes when at least one operation matches the payload.

#### Operations

* `field`: Specifies which property of the webhook payload to apply the filter condition on. It supports nested properties using dot notation, such as `"actor.type"` and `"actor.id"`.
* `operator`: The operator property defines the comparison operation to be used in the filter operation. The currently supported operators are: `"equals"` and `"not_equals"`
* `value`: The value property specifies the value to compare against the chosen payload field using the operator.

### Filter examples

**Subscribe to changes on the "Sales" list or the "Hiring" list**

```json JSON
{
  "$or": [
    {
      "field": "id.list_id",
      "operator": "equals",
      "value": "2a33abd4-dae7-49d0-b6ed-b09da0d8f00b" // <-- Sales List ID
    },
    {
      "field": "id.list_id",
      "operator": "equals",
      "value": "9d74e5c9-41eb-4d5c-b70b-d346ef15e13e" // <-- Hiring List ID
    }
  ]
}
```

**Subscribe to changes to the value of the “Status” attribute of the Sales list**

```json JSON
{
  "$and": [
    {
      "field": "id.list_id",
      "operator": "equals",
      "value": "2a33abd4-dae7-49d0-b6ed-b09da0d8f00b" // <-- Sales List ID
    },
    {
      "field": "id.attribute_id",
      "operator": "equals",
      "value": "c65a3828-b5e9-46d9-afe6-c8319ae46412" // <-- Status Attribute ID
    }
  ]
}
```

**Subscribe to changes made by workspace members**

```json JSON
{
  "$and": [
    {
      "field": "actor.type",
      "operator": "equals",
      "value": "workspace-member"
    }
  ]
}
```

**Subscribe to all events**

```json JSON
{"filter": null}
```

## Migrating from V1 webhooks

Webhooks were supported over the V1 API and have now been replaced by updated V2 Webhooks. Using V2 webhooks will allow you to use our new filtering system and receive payloads which are consistent with the rest of the V2 API (e.g. we now refer to “lists” instead of “collections”).

V1 Webhook endpoints and even types will eventually be removed. Therefore, we recommend upgrading to use V2 Webhooks at your soonest convenience.

### Event Types

The following V1 Webhook events should be considered deprecated:

```
entry.created
entry-attribute.updated
entry.deleted
```

These have been replaced by the following V2 event types which fire under exactly the same circumstances.

```
entry.created → list-entry.created
entry-attribute.updated → list-entry.updated
entry.deleted → list-entry.deleted
```

### Payloads

Your code will also need to take into account the changes in the payloads of the above events.

Below are examples of payloads with V1 events and V2.

#### entry.created

```json
// V1
{
  "event_type": "entry.created",
  "collection_id": "69815e80-949c-44c9-92be-242457a4be28",
  "entry_id": "861c1071-54ba-4d3d-b642-f72f7bcc8c7e"
}

// V2
{
  "event_type": "list-entry.created",
  "id": {
    "workspace_id": "928e88d9-de10-4e1c-9aef-36b07cb4260d", // New
    "list_id": "69815e80-949c-44c9-92be-242457a4be28", // Previously, collection_id
    "entry_id": "861c1071-54ba-4d3d-b642-f72f7bcc8c7e", // Previously, entry_id
  },
  "parent_object_id": "7298c9b4-63ac-4b7e-8a74-4468d2e403a9", // New
  "parent_record_id": "6003a6aa-7122-45f1-b840-efe9231dfd06", // New
}
```

#### entry-attribute.updated

```json
// V1
{
  "event_type": "entry-attribute.updated",
  "collection_id": "69815e80-949c-44c9-92be-242457a4be28",
  "entry_id": "861c1071-54ba-4d3d-b642-f72f7bcc8c7e",
  "attribute_id": "18b7bb8c-fc41-4b70-be0b-0dea00b3ca23"
}

// V2
{
  "event_type": "list-entry.updated",
  "id": {
    "workspace_id": "928e88d9-de10-4e1c-9aef-36b07cb4260d", // New
    "list_id": "69815e80-949c-44c9-92be-242457a4be28", // Previously, collection_id
    "entry_id": "861c1071-54ba-4d3d-b642-f72f7bcc8c7e", // Previously, entry_id
    "attribute_id": "18b7bb8c-fc41-4b70-be0b-0dea00b3ca23", // Previously, attribute_id
  },
  "parent_object_id": "7298c9b4-63ac-4b7e-8a74-4468d2e403a9", // New
  "parent_record_id": "6003a6aa-7122-45f1-b840-efe9231dfd06", // New
}
```

#### entry.deleted

```json
// V1
{
  "event_type": "entry.deleted",
  "collection_id": "69815e80-949c-44c9-92be-242457a4be28",
  "entry_id": "861c1071-54ba-4d3d-b642-f72f7bcc8c7e"
}

// V2
{
  "event_type": "list-entry.deleted",
  "id": {
    "workspace_id": "928e88d9-de10-4e1c-9aef-36b07cb4260d", // New
    "list_id": "69815e80-949c-44c9-92be-242457a4be28", // Previously, collection_id
    "entry_id": "861c1071-54ba-4d3d-b642-f72f7bcc8c7e", // Previously, entry_id
  },
  "parent_object_id": "7298c9b4-63ac-4b7e-8a74-4468d2e403a9", // New
  "parent_record_id": "6003a6aa-7122-45f1-b840-efe9231dfd06", // New
}
```

### Step-by-step migration guide

The following guide assumes you are implementing a zero downtime migration. You are, of course, welcome to migrate without such a constraint.

1. **Update your webhook server to handle V1 and V2 Events**. First, update the endpoints that handle the events we send you to deal with both V1 and V2 events.As there will be a brief overlap period where you receive both V1 and V2 events, you may wish to make your handler idempotent.
2. **Add new events**. Create new subscriptions to replace your old ones. For example, if you previously had a subscription on the `"entry.created"` event type, add a new one for the `"list-entry.updated"` event type. V1 subscriptions used a static `"collection_id"` property to limit subscriptions to a particular List (formerly “Collection”). This functionality can be replaced using our new filter functionality.

For example, below is an example of a V1 subscription and its V2 replacement. These two subscriptions will respond to exactly the same changes in the system.

```json
// V1
{
  "event_type": "entry.created",
  "collection_id": "738eefb5-d481-4aed-9735-ce918f279b74"
}

// V2
{
  "event_type": "list-entry.created",
  "filter": {
    "$and": [
      {
        "field": "id.list_id",
        "operator": "equals",
        "value": "d0a22439-5668-468a-b82a-f5988d9826f8"
      }
    ]
  }
}
```

Any automated subscription creation using V1 APIs should be moved over to use V2 APIs. You should also move delete and update endpoints over to the V2 endpoints.

3. **Remove old events**. Your server should now be receiving both V1 and V2 events and responding to each correctly. Now that this is the case, you can go ahead and remove the V1 events using either the developer settings UI or the V1 delete endpoint.
4. **Clean up any V1 handling code**. Now that you are no longer receiving V1 events, you are welcome to clean up any code on your servers that handled the V1 events.


# Overview
Source: https://docs.attio.com/rest-api/overview

Learn about the REST API

Attio provides a public REST API which exchanges JSON over HTTPS. In this section, you will find
guidance about working with the API.

To get up and running, read our guide on [how to authenticate requests](/rest-api/how-to/authentication).

From there, feel free to explore other topics or jump straight to the [reference documentation](/rest-api/endpoint-reference).

* [Building an OAuth flow for your app](/rest-api/tutorials/connect-an-app-through-oauth)
* [Working within our rate limits](/rest-api/how-to/rate-limiting)
* [Setting up and listening to webhooks](/rest-api/how-to/webhooks)
* [Filtering and sorting record and entry API queries](/rest-api/how-to/filtering-and-sorting)
* [Paginating API responses](/rest-api/how-to/pagination)

If you're looking to move beyond just the REST API and understand the Attio developer platform as a
whole, you can find [general documentation for Attio developers here](/docs).


# Connect an app to Attio through OAuth
Source: https://docs.attio.com/rest-api/tutorials/connect-an-app-through-oauth

Learn how to create an OAuth 2.0 app to access Attio's REST API

If you're building an app that needs to make requests to Attio's REST API on behalf of many users,
you should use OAuth 2.0 to authenticate your app.

This tutorial will walk you through the process of modifying an example Node.js app to connect to
Attio through OAuth. We'll start with a boilerplate app and modify it step-by-step to support
generating an OAuth token for each user and then use that token to display a list of tasks they have
in Attio.

<Note>
  If you would prefer to jump straight ahead to reference information for each endpoint in our OAuth
  flow, you can find documentation
  [here](/rest-api/endpoint-reference/oauth-20/authorize-endpoint).
</Note>

<Steps>
  <Step title="Create a new app in the developer dashboard">
    <CreateANewApp />
  </Step>

  <Step title="Configure OAuth">
    Our next job is to enable OAuth 2.0 for the app. Head to the OAuth tab in your app's settings and
    enable OAuth 2.0 via the toggle at the top of the page.

    Next, configure the redirect URIs for your app. For our tutorial, we'll use the following URL:

    ```
    http://localhost:3050/integrations/attio/callback
    ```

    Of course, for a real app, you'd also include a publicly available URL such as
    `https://my-app.com/integrations/attio/callback`.

    Lastly, we need to configure the app's scopes. Heads to the scopes tab to enable these. For our
    demonstration app, we'll set tasks, user management, object configuration and records to "read" so
    we can fetch a list of tasks and which users they are assigned to.
  </Step>

  <Step title="Setup the Node.js project">
    Make a new directory and setup your new Node.js project inside it:

    ```bash
    mkdir my-app
    cd my-app
    npm init -y
    npm install express dotenv sqlite3 bcrypt express-session
    ```

    Create a new file called `server.js` and add the following code:

    ```js
    require("dotenv").config()
    const express = require("express")
    const session = require("express-session")
    const sqlite3 = require("sqlite3").verbose()
    const bcrypt = require("bcrypt")

    const app = express()

    const PORT = 3050

    // NOTE: The following code is heavily simplified for educational purposes and should not be copied
    // for production use without careful consideration of security implications.

    // 1) Setup a database
    // Use ":memory:" for a temporary database in RAM. A real app should use a persistent database.
    const db = new sqlite3.Database(":memory:")

    // Seed a "users" table if it doesn't exist
    db.run(`
      CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE NOT NULL,
        passwordHash TEXT NOT NULL
      )
    `)

    // 2) Middleware

    // Enable parsing of form data
    app.use(express.urlencoded({extended: false}))

    // Setup session middleware
    app.use(
      session({
        secret: "mysecret", // Replace with a strong secret in production
        resave: false,
        saveUninitialized: false,
      })
    )

    // 3) Page routes

    app.get("/", (req, res) => {
      if (req.session.userId) {
        return res.send(`
          <h1>Welcome to Taskr!</h1>
          <p>You are logged in as <strong>${req.session.username}</strong>.</p>
          <p><a href="/logout">Logout</a></p>
        `)
      } else {
        return res.send(`
          <h1>You are not logged in</h1>
          <p><a href="/signup">Sign Up</a></p>
        `)
      }
    })

    app.get("/signup", (req, res) => {
      if (req.session.userId) {
        return res.redirect("/")
      }

      res.send(`
        <h1>Sign Up</h1>
        <form method="POST" action="/signup">
          <label>Username:
            <input type="text" name="username" required>
          </label>
          <br><br>
          <label>Password:
            <input type="password" name="password" required>
          </label>
          <br><br>
          <button type="submit">Sign Up</button>
        </form>
      `)
    })

    // 4) Endpoint routes

    app.post("/signup", async (req, res) => {
      const {username, password} = req.body

      try {
        const passwordHash = await bcrypt.hash(password, 10) // Hash the password for secure storage

        // Create a new user in the database
        db.run(
          `INSERT INTO users (username, passwordHash) VALUES (?, ?)`,
          [username, passwordHash],
          function (err) {
            if (err) {
              // If username is taken, sqlite typically throws a UNIQUE constraint error
              if (err.message.includes("UNIQUE constraint failed")) {
                return res.send(`
                  <h1>Username already taken</h1>
                  <p><a href="/signup">Try another username</a></p>
                `)
              }

              return res.send("An error occurred. Please try again.")
            }

            // If insert succeeds, log the user in
            req.session.userId = this.lastID // ID of the newly created user
            req.session.username = username

            // Show the home page
            return res.redirect("/")
          }
        )
      } catch (error) {
        console.error("Error hashing password:", error)
        res.send("An error occurred. Please try again.")
      }
    })

    app.get("/logout", (req, res) => {
      req.session.destroy(() => {
        res.redirect("/")
      })
    })

    // 4) Start the server
    app.listen(PORT, () => {
      console.log(`App running at http://localhost:${PORT}`)
    })
    ```

    You should now be able to run your app from the command line and visit it in your browser at
    `http://localhost:3050`:

    ```bash
    node server.js
    ```

    Run through the signup flow to ensure everything works as expected.
  </Step>

  <Step title="Add support for OAuth">
    To add support for OAuth, we need to ensure that our Node.js code has access to the OAuth client ID
    and client secret.

    Create a new file called `.env` and add your app's client ID and client secret. You can find these
    in the OAuth tab in your app's settings.

    ```
    ATTIO_CLIENT_ID=your-client-id
    ATTIO_CLIENT_SECRET=your-client-secret
    ```

    When we complete the OAuth flow, we'll need a place to store the OAuth access token for each user.
    Modify the code that creates the `users` table as follows:

    ```js
    db.run(`
      CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE NOT NULL,
        passwordHash TEXT NOT NULL,
        attio_access_token TEXT
      )
    `)
    ```

    In a real app, you should encrypt these values before storing them. Access tokens are highly
    sensitive data and should be stored securely.

    Next, we need to implement the OAuth flow itself. An OAuth flow consists of the following steps:

    1. Redirect to Attio's OAuth authorization page when prompted by the user
    2. Handle the redirect back from Attio
    3. Exchange the authorization code for an access token
    4. Persist the access token
    5. Make API requests using the access token

    ```mermaid
    sequenceDiagram
        participant User
        participant Your App
        participant Attio

        User->>Your App: Click "Connect to Attio"
        Your App->>Attio: Redirect to OAuth authorization page
        Attio->>Your App: Redirect to app with authorization code
        Your App->>Attio: Exchange authorization code for access token securely
        Attio->>Your App: Return access token
        Your App->>Your App: Store access token
        Your App->>Attio: Make API request with access token
    ```

    We'll start by adding a new route to our app that redirects the user to the OAuth authorization
    page.

    ```js
    const crypto = require("crypto")

    app.get("/integrations/attio/connect", (req, res) => {
      if (!req.session.userId) {
        return res.redirect("/signup") // Must be logged in
      }

      // Generate a secure random state parameter and store it in the user's session
      const state = crypto.randomBytes(16).toString("hex")
      req.session.oauthState = state

      const authUrl = `https://app.attio.com/authorize?response_type=code&client_id=${process.env.ATTIO_CLIENT_ID}&redirect_uri=http://localhost:3050/integrations/attio/callback&state=${state}`
      res.redirect(authUrl)
    })
    ```

    A second route will handle the redirect back from Attio.

    ```js
    const ATTIO_TOKEN_URL = "https://app.attio.com/oauth/token"

    app.get("/integrations/attio/callback", async (req, res) => {
      if (!req.session.userId) {
        return res.redirect("/signup")
      }

      const {code, state} = req.query

      // Verify the state parameter
      if (!state || state !== req.session.oauthState) {
        return res.status(403).send("Invalid state parameter. Possible CSRF attack detected.")
      }

      if (!code) {
        return res.status(400).send("Missing authorization code from Attio")
      }

      try {
        // Exchange authorization code for an access token using fetch
        const tokenResponse = await fetch(ATTIO_TOKEN_URL, {
          method: "POST",
          headers: {"Content-Type": "application/x-www-form-urlencoded"},
          body: new URLSearchParams({
            grant_type: "authorization_code",
            code: code,
            redirect_uri: "http://localhost:3050/integrations/attio/callback",
            client_id: process.env.ATTIO_CLIENT_ID,
            client_secret: process.env.ATTIO_CLIENT_SECRET,
          }),
        })

        if (!tokenResponse.ok) {
          console.error("Attio token exchange failed with status:", tokenResponse.status)
          return res.status(500).send("Error exchanging code for token")
        }

        const tokenData = await tokenResponse.json()
        const attioAccessToken = tokenData.access_token

        // Update the user's record with the access token
        db.run(
          `UPDATE users SET attio_access_token = ? WHERE id = ?`,
          [attioAccessToken, req.session.userId],
          (err) => {
            if (err) {
              console.error("Failed to store Attio token in DB:", err)
              return res.status(500).send("Database error storing Attio token")
            }
            // Redirect back to home
            res.redirect("/")
          }
        )
      } catch (err) {
        console.error("Error fetching token from Attio:", err)
        res.status(500).send("Internal error")
      }
    })
    ```

    Last, we need to ensure the user can navigate to the start of this flow. Let's add a button to the
    home page that redirects to the `/integrations/attio/connect` route.

    ```js
    app.get("/", async (req, res) => {
      if (req.session.userId) {
        await db.get("SELECT * FROM users WHERE id = ?", [req.session.userId], async (err, user) => {
          if (err) {
            console.error("Error fetching users:", err)
            return res.status(500).send("Error fetching users")
          }

          const hasAttioConnection = user !== null && user.attio_access_token !== null

          return res.send(`
              <h1>Welcome to Taskr!</h1>
              <p>You are logged in as <strong>${req.session.username}</strong>.</p>
              <p><a href="/logout">Logout</a></p>
              ${
                hasAttioConnection
                  ? `<p>Todo: render tasks</p>`
                  : `<p><a href="/integrations/attio/connect">Connect Attio</a></p>`
              }
            `)
        })
      } else {
        // ...
      }
    })
    ```

    <Warning>
      Please note, the example above stores a raw access token in the database. The access tokens that
      we grant to your app are highly sensitive data and should be stored securely. Please ensure any
      production apps you build encrypt the token before storing it.
    </Warning>
  </Step>

  <Step title="Make a request to the Attio API and render the results">
    Now we have a token, all that remains is to make a request to the Attio API and render the results.

    To make a request to the Attio API, we need to call the right endpoint and pass in our new oauth
    token in the `Authorization` header like so.

    ```js
    app.get("/", async (req, res) => {
      if (req.session.userId) {
        await db.get("SELECT * FROM users WHERE id = ?", [req.session.userId], async (err, user) => {
          if (err) {
            console.error("Error fetching users:", err)
            return res.status(500).send("Error fetching users")
          }

          const hasAttioConnection = user !== null && user.attio_access_token !== null

          if (hasAttioConnection) {
            const fetchResult = await fetch(`https://api.attio.com/v2/tasks?limit=10`, {
              headers: {
                Authorization: `Bearer ${user.attio_access_token}`, // Pass in the token here
              },
            })

            const data = await fetchResult.json()

            const taskItems = data.data.map((task) => {
              return `<li>${task.content_plaintext}</li>`
            })

            const taskList = `<ul>${taskItems.join("")}</ul>`

            return res.send(`
                <h1>Welcome to Taskr!</h1>
                <p>You are logged in as <strong>${req.session.username}</strong>.</p>
                <p><a href="/logout">Logout</a></p>
                ${taskList}
              `)
          }

          return res.send(`
          <h1>Welcome to Taskr!</h1>
          <p>You are logged in as <strong>${req.session.username}</strong>.</p>
          <p><a href="/logout">Logout</a></p>
          <p><a href="/integrations/attio/connect">Connect Attio</a></p>
        `)
        })
      } else {
        return res.send(`
          <h1>You are not logged in</h1>
          <p><a href="/signup">Sign Up</a></p>
        `)
      }
    })
    ```
  </Step>

  <Step title="Test your app">
    All that remains is to spin up your app and test it out!

    Run your app from the command line and visit it in your browser at `http://localhost:3050`.

    ```bash
    node server.js
    ```
  </Step>
</Steps>


# Call recording created
Source: https://docs.attio.com/rest-api/webhook-reference/call-recording-events/call-recordingcreated

https://api.attio.com/openapi/webhooks webhook call-recording.created
This event is fired whenever a call recording is created.



# Comment created
Source: https://docs.attio.com/rest-api/webhook-reference/comment-events/commentcreated

https://api.attio.com/openapi/webhooks webhook comment.created
This event is fired whenever a comment is created.



# Comment deleted
Source: https://docs.attio.com/rest-api/webhook-reference/comment-events/commentdeleted

https://api.attio.com/openapi/webhooks webhook comment.deleted
This event is fired whenever a comment is deleted.



# Comment resolved
Source: https://docs.attio.com/rest-api/webhook-reference/comment-events/commentresolved

https://api.attio.com/openapi/webhooks webhook comment.resolved
This event is fired whenever a comment is resolved.



# Comment unresolved
Source: https://docs.attio.com/rest-api/webhook-reference/comment-events/commentunresolved

https://api.attio.com/openapi/webhooks webhook comment.unresolved
This event is fired whenever a comment is un-resolved.



# List attribute created
Source: https://docs.attio.com/rest-api/webhook-reference/list-attribute-events/list-attributecreated

https://api.attio.com/openapi/webhooks webhook list-attribute.created
This event is fired whenever a list attribute is created (e.g. adding an "Owner" attribute).



# List attribute updated
Source: https://docs.attio.com/rest-api/webhook-reference/list-attribute-events/list-attributeupdated

https://api.attio.com/openapi/webhooks webhook list-attribute.updated
This event is fired whenever a list attribute is updated (e.g. when changing the name of the "Owner" attribute to "Proprietor").



# List entry created
Source: https://docs.attio.com/rest-api/webhook-reference/list-entry-events/list-entrycreated

https://api.attio.com/openapi/webhooks webhook list-entry.created
This event is fired whenever a list entry is created (i.e. when a record is added to a list).



# List entry deleted
Source: https://docs.attio.com/rest-api/webhook-reference/list-entry-events/list-entrydeleted

https://api.attio.com/openapi/webhooks webhook list-entry.deleted
This event is fired whenever a list entry is deleted (i.e. when a record is removed from a list).



# List entry updated
Source: https://docs.attio.com/rest-api/webhook-reference/list-entry-events/list-entryupdated

https://api.attio.com/openapi/webhooks webhook list-entry.updated
This event is fired whenever an existing list entry is updated (i.e. when a list attribute is changed for a specific list entry, e.g. when setting "Owner").



# List created
Source: https://docs.attio.com/rest-api/webhook-reference/list-events/listcreated

https://api.attio.com/openapi/webhooks webhook list.created
This event is fired whenever a list is created.



# List deleted
Source: https://docs.attio.com/rest-api/webhook-reference/list-events/listdeleted

https://api.attio.com/openapi/webhooks webhook list.deleted
This event is fired whenever a list is deleted.



# List updated
Source: https://docs.attio.com/rest-api/webhook-reference/list-events/listupdated

https://api.attio.com/openapi/webhooks webhook list.updated
This event is fired whenever a list is updated (e.g. when changing the name or icon of the list).



# Note content updated
Source: https://docs.attio.com/rest-api/webhook-reference/note-content-events/note-contentupdated

https://api.attio.com/openapi/webhooks webhook note-content.updated
This event is fired whenever the content (body) of a note is updated. The `parent_object_id` refers to the object that the note references (e.g. the person object), and the `parent_record_id` refers to the record that the note references.



# Note created
Source: https://docs.attio.com/rest-api/webhook-reference/note-events/notecreated

https://api.attio.com/openapi/webhooks webhook note.created
This event is fired whenever a note is created. The `parent_object_id` refers to the object that the note references (e.g. the person object), and the `parent_record_id` refers to the record that the note references.



# Note deleted
Source: https://docs.attio.com/rest-api/webhook-reference/note-events/notedeleted

https://api.attio.com/openapi/webhooks webhook note.deleted
This event is fired whenever a note is deleted.



# Note updated
Source: https://docs.attio.com/rest-api/webhook-reference/note-events/noteupdated

https://api.attio.com/openapi/webhooks webhook note.updated
This event is fired whenever the title of a note is modified. Body updates do not currently trigger webhooks.



# Object attribute created
Source: https://docs.attio.com/rest-api/webhook-reference/object-attribute-events/object-attributecreated

https://api.attio.com/openapi/webhooks webhook object-attribute.created
This event is fired whenever an object attribute is created (e.g. when defining a new attribute "Rating" on the company object).



# Object attribute updated
Source: https://docs.attio.com/rest-api/webhook-reference/object-attribute-events/object-attributeupdated

https://api.attio.com/openapi/webhooks webhook object-attribute.updated
This event is fired whenever an object attribute is updated (e.g. when renaming the "Rating" attribute to "Score" on the company object).



# Record created
Source: https://docs.attio.com/rest-api/webhook-reference/record-events/recordcreated

https://api.attio.com/openapi/webhooks webhook record.created
This event is fired whenever a record is created.



# Record deleted
Source: https://docs.attio.com/rest-api/webhook-reference/record-events/recorddeleted

https://api.attio.com/openapi/webhooks webhook record.deleted
This event is fired whenever a record is deleted.



# Record merged
Source: https://docs.attio.com/rest-api/webhook-reference/record-events/recordmerged

https://api.attio.com/openapi/webhooks webhook record.merged
This event is fired whenever two records are merged together. Merging copies properties from the "duplicate" record into the original record, so that the original record has the properties of both, and the duplicate record is deleted.



# Record updated
Source: https://docs.attio.com/rest-api/webhook-reference/record-events/recordupdated

https://api.attio.com/openapi/webhooks webhook record.updated
This event is fired whenever an attribute on a record is updated (e.g. changing the "name" field on a record).



# Task created
Source: https://docs.attio.com/rest-api/webhook-reference/task-events/taskcreated

https://api.attio.com/openapi/webhooks webhook task.created
This event is fired whenever a task is created.



# Task deleted
Source: https://docs.attio.com/rest-api/webhook-reference/task-events/taskdeleted

https://api.attio.com/openapi/webhooks webhook task.deleted
This event is fired whenever a task is deleted.



# Task updated
Source: https://docs.attio.com/rest-api/webhook-reference/task-events/taskupdated

https://api.attio.com/openapi/webhooks webhook task.updated
This event is fired whenever a task is updated (e.g. the assignees or deadline are changed).



# Workspace member created
Source: https://docs.attio.com/rest-api/webhook-reference/workspace-member-events/workspace-membercreated

https://api.attio.com/openapi/webhooks webhook workspace-member.created
This event is fired whenever a workspace member is added to the workspace.



# <Avatar />
Source: https://docs.attio.com/sdk/components/avatar

An avatar component for displaying profile pictures or organization logos.

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/avatar-light.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=9f2681a426df5eaecd0b3a2818f1f688" width="1440" height="880" data-path="images/avatar-light.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/avatar-light.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=0b560bdb2784c3742a0624998b2f0e58 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/avatar-light.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=cf0456c6011793dd134bcb9e18bad5cf 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/avatar-light.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=f9b20e78ad7ed166c2d58178a28a020a 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/avatar-light.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=b7b7840b3fc52edceb0f37f801351dbd 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/avatar-light.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=266813c4ebc66bcf03139833c847a524 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/avatar-light.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=33fa25f3c97125d3c5f8133ee5dacb02 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/avatar-dark.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=a3a4f091d43e0d36890ffe39211b0886" width="1440" height="880" data-path="images/avatar-dark.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/avatar-dark.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=889ef596d604ef485554dc1fbca895df 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/avatar-dark.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=4d7d4c6d81880ca0c15945223f1ae6a2 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/avatar-dark.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=d9128440862a47907bea31e491a0afc4 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/avatar-dark.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=903db75ecc97028009f6571bf5070676 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/avatar-dark.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=4b3ced9c89cf681a61093aff4237bd3f 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/avatar-dark.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=1782ea06db616f0a318268c2208cad54 2500w" data-optimize="true" data-opv="2" />

```js
import {Avatar} from "attio/client"
```

## Example

```jsx
<Avatar
  name="John Doe"
  src="https://example.com/profile.jpg"
  shape="round"
  variant="bold"
  size="medium"
/>
```

## Props

<ParamField path="name" type="string" required>
  The name of the person or organization represented by the avatar. This is used for accessibility
  and may also be used as a fallback display when no image is provided.
</ParamField>

<ParamField path="src" type="string | null | undefined">
  The source URL of the avatar image. If not provided or if the image fails to load, the avatar will
  typically display initials or a fallback representation based on the name.
</ParamField>

<ParamField path="shape" type="'round' | 'box'">
  The shape of the avatar.

  Defaults to `'round'`.
</ParamField>

<ParamField path="variant" type="'subtle' | 'bold'">
  The visual variant of the avatar, affecting its styling and prominence.

  Defaults to `'bold'`.
</ParamField>

<ParamField path="size" type="'small' | 'medium' | 'large'">
  The size of the avatar.

  * `'small'` - `16px`
  * `'medium'` - `24px`
  * `'large'` - `32px`

  Defaults to `'medium'`.
</ParamField>


# <Badge />
Source: https://docs.attio.com/sdk/components/badge

A colored badge of information.

export const ExperimentalWarning = ({api}) => <Note>
      The <code>{api}</code> API is experimental and may change in the future. It has been
      marked as <code>@deprecated</code> to remind the developer that it is
      experimental. <strong>It is <em>not</em> "deprecated", just experimental.</strong> Please
      don't use it in production versions of your app. We do not guarantee backward compatibility,
      or that the API will remain stable.
    </Note>;

{/* <img className="dark:hidden" width="720" height="440" noZoom src="/images/badge.png" />
  <img className="hidden dark:block" width="720" height="440" noZoom src="/images/badge-dark.png" /> */}

<ExperimentalWarning api="Badge" />

```js
import {Experimental_Badge} from "attio/client"
```

## Example

```tsx TypeScript
import {Experimental_DescriptionList, Experimental_Badge} from "attio/client"

export function InformationDialog() {
  return (
    <Experimental_DescriptionList label="Cryptids of Cornwall">
      <Experimental_DescriptionList.Item label="Categories" icon="Tag">
        <Experimental_Badge color="blue">Folklore</Experimental_Badge>
        <Experimental_Badge color="amber">Cornwall</Experimental_Badge>
        <Experimental_Badge color="lavender">Paranormal</Experimental_Badge>
      </Experimental_DescriptionList.Item>
    </Experimental_DescriptionList>
  )
}
```

## Props

<ParamField path="children" type="React.ReactNode" required>
  The text in the badge.

  Only text is allowed.
</ParamField>

<ParamField path="color" type="'amber' | 'blue' | 'cyan' | 'green' | 'grey' | 'lavender' | 'lime' | 'orange' | 'pink' | 'purple' | 'red' | 'yellow'" required>
  The color variant for the badge
</ParamField>


# <Banner />
Source: https://docs.attio.com/sdk/components/banner

A component displaying important information to the user.

export const ExperimentalWarning = ({api}) => <Note>
      The <code>{api}</code> API is experimental and may change in the future. It has been
      marked as <code>@deprecated</code> to remind the developer that it is
      experimental. <strong>It is <em>not</em> "deprecated", just experimental.</strong> Please
      don't use it in production versions of your app. We do not guarantee backward compatibility,
      or that the API will remain stable.
    </Note>;

{/* <img className="dark:hidden" width="720" height="440" noZoom src="/images/banner.png" />
  <img className="hidden dark:block" width="720" height="440" noZoom src="/images/banner-dark.png" /> */}

<ExperimentalWarning api="Banner" />

```js
import {Experimental_DescriptionList} from "attio/client"
```

```tsx TypeScript
import React from "react";
import { Experimental_Banner } from "attio/client";

export function HelloWorldDialog() {
	return (
      <>
          <Experimental_Banner
              variant="neutral"
              actions={[
                  {label: "Secondary action", variant: "secondary", onTrigger: () => {}},
                  {label: "Primary action", variant: "primary", onTrigger: () => {}},
              ]}
          >
              Some important information with two actions
          </Experimental_Banner>
      </>
  );
}

```

## Props

<ParamField path="children" type="string" required>
  The text of the banner.

  Only text is allowed.
</ParamField>

<ParamField path="variant" type="'neutral' | 'warning' | 'error'" required>
  The variant of the banner.
</ParamField>

<ParamField path="actions" type="Array<{ label: string, variant: 'primary' | 'secondary', onTrigger: () => Promise<void> | void }>">
  Optional actions to include.
</ParamField>


# <Button />
Source: https://docs.attio.com/sdk/components/button

A button component.

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/button.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=69d5467fd63a40631b69710d519aac4b" width="1440" height="880" data-path="images/button.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/button.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=86d518415e469608dfc2f72aabb9fc05 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/button.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=000eb3ad90f851e91a776c45ed556bf9 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/button.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=0911a09f1e8da962af11139c7f34ab10 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/button.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=b3378d64c858de13d14524746c662ba8 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/button.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=83b578a6d24078c4c2ce0b47d02f160c 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/button.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=3864f70686d741281a01fd766818432f 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/button-dark.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=56a87bc561469ef27e7b30c2d2f16bc2" width="1440" height="880" data-path="images/button-dark.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/button-dark.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=379ec9231549262956e73e811c8c2020 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/button-dark.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=e6723869557ddbe69b202d92d6b3e409 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/button-dark.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=58162a49acd7be83ab56c60f4d93cbd9 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/button-dark.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=a1bf4fe3ba1cf73846b26eb18392690c 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/button-dark.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=53fd78b5b19f3eb881f50dc439426c3b 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/button-dark.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=1acb96d58e40173906e846bc2d3f5cd0 2500w" data-optimize="true" data-opv="2" />

```js
import {Button} from "attio/client"
```

Any buttons placed inside a dialog will be rendered at the bottom of the dialog.

## Example

```jsx
<Button
  label="Remove"
  variant="destructive"
  keyboardHint="x"
  onClick={() => {
    // code here
  }}
/>
```

## Props

<ParamField path="label" type="string" required>
  The text of the button.
</ParamField>

<ParamField path="onClick" type="() => void" required>
  A function that will be called if the user clicks the button.
</ParamField>

<ParamField path="variant" type="&#x22;secondary&#x22; | &#x22;destructive&#x22;">
  The style of the button.

  Defaults to `"secondary"`.

  <Tip>The only way to have a "primary" button is to use a [submit button](./submit-button).</Tip>
</ParamField>

<ParamField path="disabled" type="boolean">
  Whether or not the button is disabled.

  Defaults to `false`.
</ParamField>

<ParamField path="keyboardHint" type="KeyboardKey">
  An optional [keyboard shortcut](./keyboard-key) that will fire the button.
</ParamField>


# <Checkbox />
Source: https://docs.attio.com/sdk/components/checkbox

A checkbox input field.

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/checkbox.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=6feb8f3962dabe5758782abd4ce998f8" width="1440" height="880" data-path="images/checkbox.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/checkbox.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=c503b097fc1892557cfd6bb8956fea7f 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/checkbox.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=48b7885f371ddbb1541099fb3a7c05f9 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/checkbox.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=1c9ae6384773fdfb73a3278eafbd9283 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/checkbox.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=8323a368dd1de2e350b5f1ab5f08fe8e 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/checkbox.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=d7d04d3772fe571f422a8292272304c1 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/checkbox.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=2be170898f59f0223b8ebb32e4df4471 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/checkbox-dark.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=8d40db233fcaa8b133de9178d60f4544" width="1440" height="880" data-path="images/checkbox-dark.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/checkbox-dark.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=a2ea8ee3f1bb5e69b9aae8fe39de7ebe 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/checkbox-dark.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=d7c2f0415a277f4757edde1ae126a4af 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/checkbox-dark.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=275e87e36396b001be499b23aa468129 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/checkbox-dark.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=85a301ef09f3d2dcb134691501e91f65 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/checkbox-dark.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=34d0c6f5f363a11b5edaf3ad7bf694f4 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/checkbox-dark.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=04cbf83361b2e8551cd00268bccb5777 2500w" data-optimize="true" data-opv="2" />

<Note>This component is returned by [`useForm()`](../hooks/use-form).</Note>

## Example

```tsx approval-dialog.tsx
import React from "react";
import { Forms, useForm, showToast } from "attio/client";

export function ApprovalDialog() {
	const { Form, SubmitButton, Checkbox } = useForm(
		{
			approved: Forms.boolean(),
		},
		{
			approved: false,
		},
	);
	return (
		<Form
			onSubmit={async (values) => {
				await showToast({
					title: "Form submitted",
					variant: "success",
					text: values.approved ? "Approved" : "Not approved",
				});
			}}
		>
			{/* Some information here */}
			<Checkbox label="Approved" name="approved" />
			<SubmitButton label="Submit" />
		</Form>
	);
}
```

## Props

<ParamField path="label" type="string" required>
  The label of the input field.
</ParamField>

<ParamField path="name" type="string" required>
  The path to the `boolean` value of the input field in your [form schema](../form-schema).

  e.g. `"is_active"`, `"shipping.is_express"`
</ParamField>

<ParamField path="disabled" type="boolean">
  Whether or not the field should be disabled.

  Defaults to `false` (not disabled).
</ParamField>


# <Column />
Source: https://docs.attio.com/sdk/components/column

A component for laying out children vertically.

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/column.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=73d9b3efef0440d90f1658997593a024" width="1440" height="880" data-path="images/column.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/column.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=86f9a202a43233ba040fd9135054a0de 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/column.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=5becb35a00d65e24c465b19b9d357068 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/column.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=58cc3254d1f4d488f5a6163688d75d19 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/column.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=46c5a4b163342f03a65ca8cefd244c77 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/column.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=a2c35446025b956a941a85c14cec78c2 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/column.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=574c1c3f6fc4794382c5c59660234b9d 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/column-dark.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=3d09252efe6170cd7a97b6fd9ccdd858" width="1440" height="880" data-path="images/column-dark.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/column-dark.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=f14cd4524a23c27e8b63a42b112cc58d 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/column-dark.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=252e135b91621d71cec4365bd2268396 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/column-dark.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=6435313565006ff0309ee63738ce9947 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/column-dark.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=1f2c9c18860aa3edafb4f3759b50d615 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/column-dark.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=6b4aa8ae6c2b1dd79b3d0e55d3008774 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/column-dark.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=63bc2307a93608cc592e1c84e37ea0e9 2500w" data-optimize="true" data-opv="2" />

```js
import {Column} from "attio/client"
```

It can be thought of as a

```jsx
<div style={{ display: "flex", flexDirection: "column" }} />`
```

To lay out components horizontally, use [`<Row />`](./row).

## Props

<ParamField path="children" type="React.ReactNode" required>
  The child components to be displayed vertically.
</ParamField>

<ParamField path="align" type="&#x22;top&#x22; | &#x22;middle&#x22; | &#x22;bottom&#x22;">
  How to optionally align the content of the text block.

  Defaults to `"top"`.
</ParamField>


# <Combobox />
Source: https://docs.attio.com/sdk/components/combobox

A combobox input.

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/combobox.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=e8dcb9daef9a704fad1edac8da115c1c" width="1440" height="880" data-path="images/combobox.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/combobox.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=31cefe9ae27cd4a61a1d3f1e4097bd15 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/combobox.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=d2331be1d383e758a5d5ae1576dc609a 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/combobox.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=e0b518604143b54f05618f9c45d3453f 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/combobox.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=5ac4e68a86c4237b3ea121b14db0eddf 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/combobox.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=c7c0260919d2557dbb750dd86f058a62 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/combobox.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=cb30977c5ad60bc6e7c765ee29725136 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/combobox-dark.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=a135401eb740d225b62a5bc18e1c9f90" width="1440" height="880" data-path="images/combobox-dark.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/combobox-dark.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=860a57da6acf87e47b573d79171e3d86 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/combobox-dark.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=16a59df1ab564f8a9789f5eff4e673af 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/combobox-dark.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=effe020f0cde788404a6e326f1fbaf8e 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/combobox-dark.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=9e1e87dda5f987e150c34bcbaf92ae20 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/combobox-dark.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=5f1155d8426487b0de1618fe1223430e 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/combobox-dark.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=75416a0bd9014110750b2310cc56454a 2500w" data-optimize="true" data-opv="2" />

<Note>This component is returned by [`useForm()`](../hooks/use-form).</Note>

Options can be provided either synchronously (static or already loaded) or asynchronously (based on a search).

## Example: Pre-defined options

```tsx pick-color-dialog.tsx
import React from "react";
import {
	Forms,
	useForm,
	showToast,
	ComboboxOption,
	TextBlock,
} from "attio/client";

const colorOptions = [
	{ label: "Red", value: "#ff0000" },
	{ label: "Green", value: "#00ff00" },
	{ label: "Blue", value: "#0000ff" },
] satisfies ComboboxOption[];

export function PickColorDialog() {
	const { Form, SubmitButton, Combobox } = useForm(
		{
			color: Forms.string(),
		},
		{
			color: "",
		},
	);
	return (
		<Form
			onSubmit={async (values) => {
				await showToast({
					title: "Form submitted",
					variant: "success",
					text: `You picked ${values.color}`,
				});
			}}
		>
			<TextBlock>Pick a color</TextBlock>
			<Combobox label="Color" name="color" options={colorOptions} />
			<SubmitButton label="Submit" />
		</Form>
	);
}
```

## Example: Asynchronously loaded options

```ts github-user-schema.ts
import { z } from "zod";

export const githubUserSchema = z.object({
	id: z.number(),
	login: z.string(),
});

export type GithubUser = z.infer<typeof githubUserSchema>;
```

Because we cannot `fetch()` from the client, we need to define server functions
to talk to the third party API.

```ts get-github-user.server.ts
import { GithubUser, githubUserSchema } from "./github-user-schema";

export default async function getGithubUser(id: string):Promise<GithubUser | undefined> {
	const user = await fetch(`https://api.github.com/users/${id}`);
	const userData = await user.json();
	const parsed = githubUserSchema.safeParse(userData);
	if (!parsed.success) {
		return undefined;
	}
	return parsed.data
}
```

```ts search-github-users.server.ts
import { GithubUser, githubUserSchema } from "./github-user-schema";

export default async function searchGithubUsers(search: string):Promise<GithubUser[]> {
	const users = await fetch(`https://api.github.com/search/users?q=${search}`);
	const usersData = await users.json();
	const parsed = githubUserSchema.array().safeParse(usersData.items);
	if (!parsed.success) {
		return [];
	}
	return parsed.data;
}
```

Now we can create our async combobox options provider.

```ts github-options-provider.ts
import { ComboboxOptionsProvider } from "attio/client";
import getGithubUser from "./get-github-user.server";
import searchGithubUsers from "./search-github-users.server";

export const githubUserOptionsProvider = {
	getOption: async (value: string) => {
		const user = await getGithubUser(value);
		return user ? { label: user.login } : undefined;
	},

	search: async (search: string) => {
		const users = await searchGithubUsers(search);
		return users.map((user) => ({
			value: user.id.toString(),
			label: user.login,
		}));
	},
} satisfies ComboboxOptionsProvider;
```

And then we give that options provider to the `<Combobox />`.

```tsx pick-github-user-dialog.tsx
import React from "react";
import { Forms, useForm, showToast, TextBlock } from "attio/client";
import { githubUserOptionsProvider } from "./github-users-options-provider";

export function PickGithubUserDialog() {
	const { Form, SubmitButton, Combobox } = useForm(
		{
			assignTo: Forms.string(),
		},
		{
			assignTo: "",
		},
	);
	return (
		<Form
			onSubmit={async (values) => {
				await showToast({
					title: "Form submitted",
					variant: "success",
					text: `You picked user id #${values.assignTo}`,
				});
			}}
		>
			<TextBlock>Pick a Github user:</TextBlock>
			<Combobox
				label="Assign to"
				name="assignTo"
				options={githubUserOptionsProvider}
			/>
			<SubmitButton label="Submit" />
		</Form>
	);
}
```

## Props

<ParamField path="label" type="string" required>
  The label of the combobox field.
</ParamField>

<ParamField path="name" type="string" required>
  The path to the `string` value of the input field in your [form schema](../form-schema).

  e.g. `"status"`, `"shipping.address.state"`
</ParamField>

<ParamField path="options" type="Array<ComboboxOption> | ComboboxOptionsProvider" required>
  Either an array of [ComboboxOption](#comboboxoption)s, or a
  [ComboboxOptionsProvider](#comboboxoptionsprovider) to load them.
</ParamField>

<ParamField path="placeholder" type="string">
  An optional placeholder text for your input.
</ParamField>

<ParamField path="disabled" type="boolean">
  Whether or not the field should be disabled.
</ParamField>

# ComboboxOption

An object containing:

<ParamField path="value" type="string" required>
  The value that will be saved into your form data when this option is selected.
</ParamField>

<ParamField path="label" type="string" required>
  The label the user will see for this option
</ParamField>

<ParamField path="description" type="string">
  An optional description the user will see for this option
</ParamField>

<ParamField path="avatarUrl" type="string">
  An optional avatar to display for this option
</ParamField>

<ParamField path="icon" type="AttioIcon">
  An optional icon to display for this option, an [`AttioIcon`](../entry-points/icons).
</ParamField>

<ParamField path="color" type="string">
  An optional CSS color for the option. It will be displayed in a little circle next to the label.
</ParamField>

## Combobox Option Decorations

The priority of decorations goes:

1. Avatar
2. Color
3. Icon

e.g. If there is an avatar, it will be shown; else if there is a color, it will be shown, etc.

# CategorizedComboboxOption

An object that extends `ComboboxOption` and also includes:

<ParamField path="categoryLabel" type="string">
  A category label to display this option under
</ParamField>

# ComboboxOptionProvider

An object containing:

<ParamField path="getOption" type="(value: string) => Promise<Omit<ComboboxOption, &#x22;value&#x22;>>">
  An async function that, given an option value, fetches the rest of the
  [`ComboboxOption`](#comboboxoption).
</ParamField>

<ParamField path="search" type="(query: string) => Promise<ComboboxOption[] | CategorizedComboboxOption[]>">
  An async function that, given a search query, fetches an array of “matching” [`ComboboxOption`](#comboboxoption)s.

  What “matching” means is up to the developer.
</ParamField>


# <DescriptionList />
Source: https://docs.attio.com/sdk/components/description-list

A component displaying label-value information.

export const ExperimentalWarning = ({api}) => <Note>
      The <code>{api}</code> API is experimental and may change in the future. It has been
      marked as <code>@deprecated</code> to remind the developer that it is
      experimental. <strong>It is <em>not</em> "deprecated", just experimental.</strong> Please
      don't use it in production versions of your app. We do not guarantee backward compatibility,
      or that the API will remain stable.
    </Note>;

{/* <img className="dark:hidden" width="720" height="440" noZoom src="/images/description-list.png" />
  <img className="hidden dark:block" width="720" height="440" noZoom src="/images/description-list-dark.png" /> */}

<ExperimentalWarning api="DescriptionList" />

```js
import {Experimental_DescriptionList} from "attio/client"
```

It can be thought of as analogous to the [`<dl>`, `<dt>`, and `<dd>` HTML tags](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/dl).

## Example

```tsx TypeScript
import {Experimental_DescriptionList, Experimental_Badge} from "attio/client"

export function InformationDialog() {
  return (
    <Experimental_DescriptionList label="Cryptids of Cornwall">
      <Experimental_DescriptionList.Item label="Beast of Bodmin" icon="Eye">
        A large feline inhabiting Bodmin Moor.
      </Experimental_DescriptionList.Item>
      <Experimental_DescriptionList.Item label="Morgawr" icon="GlobeHemisphereEast">
        A sea serpent.
      </Experimental_DescriptionList.Item>
      <Experimental_DescriptionList.Item label="Owlman" icon="Moon">
        A giant owl-like creature.
      </Experimental_DescriptionList.Item>
      <Experimental_DescriptionList.Item label="Categories" icon="Tag">
        <Experimental_Badge color="blue">Folklore</Experimental_Badge>
        <Experimental_Badge color="amber">Cornwall</Experimental_Badge>
        <Experimental_Badge color="lavender">Paranormal</Experimental_Badge>
      </Experimental_DescriptionList.Item>
    </Experimental_DescriptionList>
  )
}
```

## Props

<ParamField path="label" type="string">
  An optional label to display above the description list describing what is listed.
</ParamField>

<ParamField path="children" type="React.ReactNode" required>
  The `<Experimental_DescriptionList.Item />`s with the information to display.

  <Tip>
    An `<Experimental_DescriptionList />` component can *only* have `<Experimental_DescriptionList.Item />`s as children.
  </Tip>
</ParamField>

# `<Experimental_DescriptionList.Item />`

An item with information.

## Props

<ParamField path="label" type="string" required>
  The label of the information.
</ParamField>

<ParamField path="icon" type="Icon">
  An optional [Attio Icon](../entry-points/icons).
</ParamField>

<ParamField path="children" type="React.ReactNode" required>
  The information corresponding to the label.

  <Tip>
    An `<Experimental_DescriptionList.Item />` can contain *either* text (including [`<Link />`](./link)s), *or*
    [`<Experimental_Badge />`](./badge)s, but never both.
  </Tip>
</ParamField>


# <Divider />
Source: https://docs.attio.com/sdk/components/divider

A component for drawing a horizontal dividing line between UI elements.

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/divider.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=c688a79c953299b9bc4554e56017f004" width="1440" height="880" data-path="images/divider.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/divider.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=2b346fb712ef2b2a0da0eb723a201349 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/divider.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=f8ebc263835d5dce0bfa64cc21bc2070 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/divider.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=95251d33b0d9d6127da7f0dda1711591 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/divider.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=cdc6a096591bf9b948393cb001c29f01 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/divider.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=7f789e1738a4bf126e16713ed1cc600e 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/divider.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=1ccc3f57e6f8b083556e29e698abf00d 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/divider-dark.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=fa1f25beaa16f50948f4d3f391ad0817" width="1440" height="880" data-path="images/divider-dark.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/divider-dark.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=007bc2c8ec8f3608992a584387fc1078 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/divider-dark.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=d3141bc40df0c998f01ef963b5f6da59 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/divider-dark.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=973fcc3a6ee40f80d64d77cba437961b 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/divider-dark.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=057e488672d046a4c940b9ddfcc4fe2a 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/divider-dark.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=7a4e7a4224441442f9ec3cb8decef852 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/divider-dark.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=25c336430249252c660ea3d688c12f89 2500w" data-optimize="true" data-opv="2" />

## Example

```tsx form-with-divider.tsx
import React from "react";
import { Forms, useForm, showToast, Divider } from "attio/client";

export function FormWithDividerDialog() {
	const { Form, SubmitButton, TextInput } = useForm(
		{
			firstName: Forms.string(),
			lastName: Forms.string(),
		},
		{
			firstName: "",
			lastName: "",
		},
	);
	return (
		<Form
			onSubmit={async (values) => {
				await showToast({
					title: "Form submitted",
					variant: "success",
					text: JSON.stringify(values),
				});
			}}
		>
			<TextInput label="First name" name="firstName" />
			<Divider />
			<TextInput label="Last name" name="lastName" />
			<SubmitButton label="Submit" />
		</Form>
	);
}
```

It can be thought of as an `<hr />` in HTML.

## Props

None


# <Experimental_DateTimeInput />
Source: https://docs.attio.com/sdk/components/experimental-date-time-input

A date and time input field for selecting both date and time.

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/lDsJMHM3aZOlF-XN/images/date-time-input.png?fit=max&auto=format&n=lDsJMHM3aZOlF-XN&q=85&s=110e09b90d4f7aad18fb13c2c300d7eb" width="1440" height="880" data-path="images/date-time-input.png" srcset="https://mintcdn.com/attio/lDsJMHM3aZOlF-XN/images/date-time-input.png?w=280&fit=max&auto=format&n=lDsJMHM3aZOlF-XN&q=85&s=436bd24f3a296fa5be0be3fb1c26945f 280w, https://mintcdn.com/attio/lDsJMHM3aZOlF-XN/images/date-time-input.png?w=560&fit=max&auto=format&n=lDsJMHM3aZOlF-XN&q=85&s=574b017db7f4a4f2bce479eb8177b60f 560w, https://mintcdn.com/attio/lDsJMHM3aZOlF-XN/images/date-time-input.png?w=840&fit=max&auto=format&n=lDsJMHM3aZOlF-XN&q=85&s=d108e504d6448db6c3dfe915c731ba19 840w, https://mintcdn.com/attio/lDsJMHM3aZOlF-XN/images/date-time-input.png?w=1100&fit=max&auto=format&n=lDsJMHM3aZOlF-XN&q=85&s=3303d6133f6fcf9b4c931575de6662a6 1100w, https://mintcdn.com/attio/lDsJMHM3aZOlF-XN/images/date-time-input.png?w=1650&fit=max&auto=format&n=lDsJMHM3aZOlF-XN&q=85&s=21955fd6498001c7bdd39e97d926d0fb 1650w, https://mintcdn.com/attio/lDsJMHM3aZOlF-XN/images/date-time-input.png?w=2500&fit=max&auto=format&n=lDsJMHM3aZOlF-XN&q=85&s=ef9ca2464ca1e54dfd9f343ff7534b05 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/lDsJMHM3aZOlF-XN/images/date-time-input-dark.png?fit=max&auto=format&n=lDsJMHM3aZOlF-XN&q=85&s=c607c374126eb81f69d42cec3ca79b6f" width="1440" height="880" data-path="images/date-time-input-dark.png" srcset="https://mintcdn.com/attio/lDsJMHM3aZOlF-XN/images/date-time-input-dark.png?w=280&fit=max&auto=format&n=lDsJMHM3aZOlF-XN&q=85&s=1f02e1380f2bc59d759335887baf2fbb 280w, https://mintcdn.com/attio/lDsJMHM3aZOlF-XN/images/date-time-input-dark.png?w=560&fit=max&auto=format&n=lDsJMHM3aZOlF-XN&q=85&s=4eee2b38065f0ef66e2c5794d3929fc8 560w, https://mintcdn.com/attio/lDsJMHM3aZOlF-XN/images/date-time-input-dark.png?w=840&fit=max&auto=format&n=lDsJMHM3aZOlF-XN&q=85&s=7fd7d24aed8ac862e2a0590510d6d4d1 840w, https://mintcdn.com/attio/lDsJMHM3aZOlF-XN/images/date-time-input-dark.png?w=1100&fit=max&auto=format&n=lDsJMHM3aZOlF-XN&q=85&s=0656f0679074ee83115fc59ae4e27285 1100w, https://mintcdn.com/attio/lDsJMHM3aZOlF-XN/images/date-time-input-dark.png?w=1650&fit=max&auto=format&n=lDsJMHM3aZOlF-XN&q=85&s=fb096c057b85d913f30745e4fa3040eb 1650w, https://mintcdn.com/attio/lDsJMHM3aZOlF-XN/images/date-time-input-dark.png?w=2500&fit=max&auto=format&n=lDsJMHM3aZOlF-XN&q=85&s=da043a02fcc537bc7f244d2ba1f1c90b 2500w" data-optimize="true" data-opv="2" />

<Note>This component is returned by [`useForm()`](../hooks/use-form).</Note>

## Example

```tsx meeting-form.tsx
import React from "react"
import {Forms, useForm, showToast} from "attio/client"

export function MeetingForm() {
  const {Form, SubmitButton, Experimental_DateTimeInput} = useForm(
    {
      meetingTime: Forms.dateTime(),
    },
    {}
  )
  return (
    <Form
      onSubmit={async (values) => {
        await showToast({
          title: "Form submitted",
          variant: "success",
          text: `Meeting scheduled for ${values.meetingTime?.toLocaleString()}`,
        })
      }}
    >
      <Experimental_DateTimeInput label="Meeting Time" name="meetingTime" />
      <SubmitButton label="Submit" />
    </Form>
  )
}
```

## Props

<ParamField path="label" type="string" required>
  The label of the date and time input field.
</ParamField>

<ParamField path="name" type="string" required>
  The path to the `dateTime` value of the input field in your [form schema](../form-schema).

  e.g. `"meeting_time"`, `"user.last_login"`
</ParamField>

<ParamField path="disabled" type="boolean">
  Whether or not the field should be disabled.

  Defaults to `false` (not disabled).
</ParamField>


# <Experimental_PlainDateInput />
Source: https://docs.attio.com/sdk/components/experimental-plain-date-input

A date input field for selecting ISO 8601 dates (YYYY-MM-DD).

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/_ybVRO-J1QkLIThy/images/plain-date-input.png?fit=max&auto=format&n=_ybVRO-J1QkLIThy&q=85&s=6ea58393a46ced4ca7db3cf488cae26c" width="1440" height="880" data-path="images/plain-date-input.png" srcset="https://mintcdn.com/attio/_ybVRO-J1QkLIThy/images/plain-date-input.png?w=280&fit=max&auto=format&n=_ybVRO-J1QkLIThy&q=85&s=f2d165960833588c7be271301f352b50 280w, https://mintcdn.com/attio/_ybVRO-J1QkLIThy/images/plain-date-input.png?w=560&fit=max&auto=format&n=_ybVRO-J1QkLIThy&q=85&s=4f27de3a32640aae286c42dd3efc8634 560w, https://mintcdn.com/attio/_ybVRO-J1QkLIThy/images/plain-date-input.png?w=840&fit=max&auto=format&n=_ybVRO-J1QkLIThy&q=85&s=8d88b6f6fd08d9b503e7ce2ed0e21b5b 840w, https://mintcdn.com/attio/_ybVRO-J1QkLIThy/images/plain-date-input.png?w=1100&fit=max&auto=format&n=_ybVRO-J1QkLIThy&q=85&s=42fab8930c9073dc4796b5720ed289b2 1100w, https://mintcdn.com/attio/_ybVRO-J1QkLIThy/images/plain-date-input.png?w=1650&fit=max&auto=format&n=_ybVRO-J1QkLIThy&q=85&s=2da36980eaa68ade4e39b0ed5780e25f 1650w, https://mintcdn.com/attio/_ybVRO-J1QkLIThy/images/plain-date-input.png?w=2500&fit=max&auto=format&n=_ybVRO-J1QkLIThy&q=85&s=765c653c61d31087c82da7a110b9b239 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/_ybVRO-J1QkLIThy/images/plain-date-input-dark.png?fit=max&auto=format&n=_ybVRO-J1QkLIThy&q=85&s=d97f20cd8119c8376cfd5c296a75922d" width="1440" height="880" data-path="images/plain-date-input-dark.png" srcset="https://mintcdn.com/attio/_ybVRO-J1QkLIThy/images/plain-date-input-dark.png?w=280&fit=max&auto=format&n=_ybVRO-J1QkLIThy&q=85&s=0651d3e5a3f920ee9d275ac4f18ae9a2 280w, https://mintcdn.com/attio/_ybVRO-J1QkLIThy/images/plain-date-input-dark.png?w=560&fit=max&auto=format&n=_ybVRO-J1QkLIThy&q=85&s=3a5f1493b087b7d6886938d9cc988b15 560w, https://mintcdn.com/attio/_ybVRO-J1QkLIThy/images/plain-date-input-dark.png?w=840&fit=max&auto=format&n=_ybVRO-J1QkLIThy&q=85&s=1e4bbaf76733a44ab7dff99ee0d97a1b 840w, https://mintcdn.com/attio/_ybVRO-J1QkLIThy/images/plain-date-input-dark.png?w=1100&fit=max&auto=format&n=_ybVRO-J1QkLIThy&q=85&s=c76989bd4968675f989d6d52dcc28bf8 1100w, https://mintcdn.com/attio/_ybVRO-J1QkLIThy/images/plain-date-input-dark.png?w=1650&fit=max&auto=format&n=_ybVRO-J1QkLIThy&q=85&s=1d3733bdf3c473ac2c9a5e8a3254e246 1650w, https://mintcdn.com/attio/_ybVRO-J1QkLIThy/images/plain-date-input-dark.png?w=2500&fit=max&auto=format&n=_ybVRO-J1QkLIThy&q=85&s=9404f115d66a0d089e4ada52e106164b 2500w" data-optimize="true" data-opv="2" />

<Note>This component is returned by [`useForm()`](../hooks/use-form).</Note>

## Example

```tsx event-form.tsx
import React from "react"
import {Forms, useForm, showToast} from "attio/client"

export function EventForm() {
  const {Form, SubmitButton, Experimental_PlainDateInput} = useForm(
    {
      eventDate: Forms.plainDate(),
    },
    {}
  )
  return (
    <Form
      onSubmit={async (values) => {
        await showToast({
          title: "Form submitted",
          variant: "success",
          text: `Event scheduled for ${values.eventDate}`,
        })
      }}
    >
      <Experimental_PlainDateInput label="Event Date" name="eventDate" />
      <SubmitButton label="Submit" />
    </Form>
  )
}
```

## Props

<ParamField path="label" type="string" required>
  The label of the plain date input field.
</ParamField>

<ParamField path="name" type="string" required>
  The path to the `plainDate` value of the input field in your [form schema](../form-schema).

  The value will be in ISO 8601 format (YYYY-MM-DD).

  e.g. `"event_date"`, `"user.birth_date"`
</ParamField>

<ParamField path="disabled" type="boolean">
  Whether or not the field should be disabled.

  Defaults to `false` (not disabled).
</ParamField>


# <Form />
Source: https://docs.attio.com/sdk/components/form

A component that wraps your form inputs and provides an `onSubmit` handler.

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/form.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=3962fbf8ea86242a271fc592ae65bf15" width="1440" height="880" data-path="images/form.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/form.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=dabb096fb0a87ded7dded711810f18ec 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/form.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=4e1daeb11a53752b975056b255a21f24 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/form.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=e319363c563ea911075ab32806700e2c 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/form.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=7f0565899d6ab386093ecebad9d9ce2d 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/form.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=b6f2580807cf5484f437533a6b1c4463 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/form.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=e4925be64c56c93481d85d4b6d6cd022 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/form-dark.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=d0f9a10ca04ecf88c8cf1b32ae76faec" width="1440" height="880" data-path="images/form-dark.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/form-dark.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=ee461f9020e7189f498f653f8226d3b8 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/form-dark.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=b50bf06edfa2b6390fa89e5da7a2cdfd 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/form-dark.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=1e40efc929ab28446f40cb1d198e524f 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/form-dark.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=53fa41dc7c904a782b3758b55e3e3a70 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/form-dark.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=8477ef215480dfe40cdd7ca83fa0b276 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/form-dark.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=72c95c316e69732d60786bc984678881 2500w" data-optimize="true" data-opv="2" />

<Note>This component is returned by [`useForm()`](../hooks/use-form).</Note>

<Warning>
  You are required to render one – ***and only one*** – of these to make your form work.

  All inputs must be inside of the `<Form />`.
</Warning>

## Example

```tsx form-dialog.tsx
import React from "react";
import { Forms, useForm, showToast } from "attio/client";

export function FormDialog() {
	const { Form, SubmitButton, TextInput } = useForm(
		{
			firstName: Forms.string(),
			lastName: Forms.string(),
		},
		{
			firstName: "",
			lastName: "",
		},
	);
	return (
		<Form
			onSubmit={async (values) => {
				await showToast({
					title: "Form submitted",
					variant: "success",
					text: JSON.stringify(values),
				});
			}}
		>
			<TextInput label="First name" name="firstName" />
			<TextInput label="Last name" name="lastName" />
			<SubmitButton label="Submit" />
		</Form>
	);
}
```

## Props

<ParamField path="onSubmit" type="(values) => void | Promise<void>" required>
  What to do with the form values on submit. Typically you will call a server function.

  In TypeScript, the values will be strongly typed to match your [form schema](/sdk/form-schema).
</ParamField>

<ParamField path="children" type="React.ReactNode" required>
  The contents of your form, usually layout and input components.
</ParamField>

<Info>
  A form must contain one – ***and only one*** – [`<SubmitButton />`](./submit-button) as a direct child.
</Info>


# <Link />
Source: https://docs.attio.com/sdk/components/link

A hyperlink to an external website.

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/link.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=0784cb7116e9fb6d3c5e282e593cf997" width="1440" height="880" data-path="images/link.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/link.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=7cd73022dd48bfd105e19d45e81ef47b 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/link.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=92c6a9bdf56da529071396146e4608e2 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/link.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=d3e6c6d6c4b5ec99ecd166c80289176f 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/link.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=a2f3b0ffce13082ac4d04d5a7780f81a 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/link.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=f460ac4fb69920cf975043e0c933570b 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/link.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=a5aceee4ac65554154be88202eb2633b 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/link-dark.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=a813ec62b2e191da87cbb271902484f9" width="1440" height="880" data-path="images/link-dark.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/link-dark.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=9593c0e46d4d29d2db1444987722c04e 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/link-dark.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=d5658d61fea15affc8a012914880d93f 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/link-dark.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=582c2c3bb368b33bc4fb541a128000e5 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/link-dark.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=110ad2184227941ccfc0747b45db91b0 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/link-dark.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=393dbfb976d0dee375e371ce3a2e6689 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/link-dark.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=711e96ef96e97dcdcb8ece2206ba1d86 2500w" data-optimize="true" data-opv="2" />

The user will be prompted if they are sure they want to open the link.

```js
import {Link} from "attio/client"
```

It can be thought of as an

```jsx
<a href="https://yourwebsite.com" target="_blank" />`
```

## Example

```tsx link-dialog.tsx
import React from "react";
import { TextBlock, Link } from "attio/client";

export function LinkDialog() {
	return (
    <TextBlock>
      Check out <Link href="https://attio.com">Attio</Link>.
    </TextBlock>
	);
}
```

## Props

<ParamField path="href" type="string" required>
  The url to link to.
</ParamField>

<ParamField path="children" type="React.ReactNode" required>
  The text to hyperlink.
</ParamField>


# <NumberInput />
Source: https://docs.attio.com/sdk/components/number-input

A numeric input field.

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/number-input.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=437bc8b4354fb4ef231e76fade07b6f4" width="1440" height="880" data-path="images/number-input.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/number-input.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=9a2ea7118c77be30460feedeaf074a41 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/number-input.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=91c253db3bd5337294f634813d8ad1f3 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/number-input.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=5e50a7abde834c84c16967994bf1d616 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/number-input.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=d573b70fb98f56f5ab5f6c91bcec386e 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/number-input.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=fbd2bcbd8de59edbfea86f4203f9fb6c 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/number-input.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=b943d1e615504d948ca01df5049213bd 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/number-input-dark.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=b4579f19ceac9dddd20c8924f4534652" width="1440" height="880" data-path="images/number-input-dark.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/number-input-dark.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=291848140e7cdb866a4c507bf25c450c 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/number-input-dark.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=7a3a050362b6f0afc66ef3f9e1da03ee 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/number-input-dark.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=5ca1c48b2358255c3d2be97b7051e4f5 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/number-input-dark.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=33d11eb45f7ef54d2bbdd218b89f775b 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/number-input-dark.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=9c590d9188c8238c527bf52b9f3c143c 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/number-input-dark.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=f8da753380cf4c347a649daa903daa95 2500w" data-optimize="true" data-opv="2" />

<Note>This component is returned by [`useForm()`](../hooks/use-form).</Note>

## Example

```tsx form-number-input-dialog.tsx
import React from "react";
import { Forms, useForm, showToast } from "attio/client";

export function NameDialog() {
	const { Form, SubmitButton, NumberInput } = useForm(
		{
			oneNumber: Forms.number(),
			anotherNumber: Forms.number(),
		},
		{},
	);
	return (
		<Form
			onSubmit={async (values) => {
				await showToast({
					title: "Form submitted",
					variant: "success",
					text: JSON.stringify(values),
				});
			}}
		>
			<NumberInput label="One number" name="oneNumber" />
			<NumberInput label="Another number" name="anotherNumber" />
			<SubmitButton label="Submit" />
		</Form>
	);
}
```

## Props

<ParamField path="label" type="string" required>
  The label of the input field.
</ParamField>

<ParamField path="name" type="string" required>
  The path to the `number` value of the input field in your [form schema](../form-schema).

  e.g. `"age"`, `"shipping.cost"`
</ParamField>

<ParamField path="placeholder" type="string">
  An optional placeholder text for your input.
</ParamField>

<ParamField path="disabled" type="boolean">
  Whether or not the field should be disabled.

  Defaults to `false` (not disabled).
</ParamField>


# <Row />
Source: https://docs.attio.com/sdk/components/row

A component for laying out children horizontally.

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/row.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=0a11b6bb04bd8e3157685d1b06ec8b93" width="1440" height="880" data-path="images/row.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/row.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=b8114f2d040a9fd034420d621fdf4849 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/row.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=40827f4ed34c6ca9890f613d35bafee7 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/row.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=e48c23baf25ada1762a85f0e2e6241c1 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/row.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=06bc5c96d8a896b2c529c01517425836 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/row.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=058c467266eff77baef6677ca11ccc93 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/row.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=cc842b6dc1a0a03c67a84ff9feea10c5 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/row-dark.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=a0630dd0b3ca8f84a7e51a845f23a2cc" width="1440" height="880" data-path="images/row-dark.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/row-dark.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=1f6c28ea31fbae2a86af937cd55d5b0a 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/row-dark.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=9d8be66adf45dcc253370cb1334d1d59 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/row-dark.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=58f9abee739a27f28c4d0ab91c1f6089 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/row-dark.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=83404d62837db16b53c3de658f4ec90b 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/row-dark.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=c787dd66f870182fd4bceed4aa939f3b 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/row-dark.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=1b5ac805dd96e95d2e3f80f7f18a733b 2500w" data-optimize="true" data-opv="2" />

```js
import {Row} from "attio/client"
```

It can be thought of as a

```jsx
<div style={{ display: "flex", flexDirection: "row" }} />`
```

To lay out components vertically, use [`<Column />`](./column).

On the web, it can fit up to three children horizontally, and on mobile, all children will be presented vertically.

## Props

<ParamField path="children" type="React.ReactNode" required>
  The child components to be displayed horizontally.
</ParamField>

<ParamField path="align" type="&#x22;left&#x22; | &#x22;center&#x22; | &#x22;right&#x22; | &#x22;space-between&#x22; | &#x22;space-evenly&#x22; | &#x22;space-around&#x22;">
  How to optionally align the content of the text block.

  Defaults to `"left"`.
</ParamField>

<ParamField path="onTrigger" type="() => void | Promise<void>">
  A function to call when the row is triggered.
</ParamField>


# <Section />
Source: https://docs.attio.com/sdk/components/section

A section of UI with a title. It can be thought of like a `<div/>` in DOM.

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/section.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=cca73f07d5fd6693203894630a35e143" width="1440" height="880" data-path="images/section.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/section.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=b33d21b8f9c4bcbdfe6a061542854ee1 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/section.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=e2449f55ea44ea6665c19d0d9bc9c249 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/section.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=f69b8a1a8b72201cc3988f14d5bec859 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/section.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=93d3dfc39f5ebe0f2c8df1f4576adaf9 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/section.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=f551b028be40eaafcc06b90e60db8942 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/section.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=3089ef4f03a4191f0d608514125576fb 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/section-dark.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=0f9702bf6b5a55bc8f506c4bf68f414b" width="1440" height="880" data-path="images/section-dark.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/section-dark.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=22d19dc1f392d3719fde47fcc837d69b 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/section-dark.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=7a2f2d44b697a422d8bb9aaee9de9ab4 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/section-dark.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=893382597d80a70ced382320e71e7df5 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/section-dark.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=2a9b56af6c72246ac2dfd3fbb0a66e99 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/section-dark.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=a56eaf63498dde4234b09e110e2481f2 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/section-dark.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=9b93c1ef0ef74dd394260d930430e900 2500w" data-optimize="true" data-opv="2" />

```js
import {Section} from "attio/client"
```

## Example

```tsx form-with-sections.tsx
import React from "react";
import { Forms, useForm, showToast, Section } from "attio/client";

export function FormWithSectionsDialog() {
	const { Form, SubmitButton, TextInput } = useForm(
		{
			firstName: Forms.string(),
			lastName: Forms.string(),
			street: Forms.string(),
			city: Forms.string(),
		},
		{
			firstName: "",
			lastName: "",
			street: "",
			city: "",
		},
	);
	return (
		<Form
			onSubmit={async (values) => {
				await showToast({
					title: "Form submitted",
					variant: "success",
					text: JSON.stringify(values),
				});
			}}
		>
			<Section title="Personal information">
				<TextInput label="First name" name="firstName" />
				<TextInput label="Last name" name="lastName" />
			</Section>
			<Section title="Address">
				<TextInput label="Street" name="street" />
				<TextInput label="City" name="city" />
			</Section>
			<SubmitButton label="Submit" />
		</Form>
	);
}
```

## Props

<ParamField path="title" type="string" required>
  The title of the section. It will be displayed in a stronger font than the content of the section.
</ParamField>

<ParamField path="children" type="React.ReactNode" required>
  The text (or components) content of the section.
</ParamField>


# <StatusBadge />
Source: https://docs.attio.com/sdk/components/status-badge

A component for displaying a status badge with a color.

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/status-badge.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=bfaf8b81105e6c32a84ef9ed4f0e96c7" width="1440" height="880" data-path="images/status-badge.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/status-badge.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=5a9cb1a19ae3a3d7ca9a5e1b910f1233 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/status-badge.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=a4bbb8503593de1592a60a60e3cc4dc0 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/status-badge.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=56cb50e0b1bf01d4c3fb14794052c031 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/status-badge.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=6d909bafb0498feb81237ca91fd8695b 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/status-badge.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=ead94178edb6cdf2072eb1e00c642526 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/status-badge.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=8e06a4e3dea9c85042523de5e77c0498 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/status-badge-dark.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=94a22d45699e783525a2fc124cd47766" width="1440" height="880" data-path="images/status-badge-dark.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/status-badge-dark.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=2698131e710469ea281423955935dccf 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/status-badge-dark.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=c287cfec4a22317ae9a21ae241f29c74 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/status-badge-dark.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=14d4bbea95b33b14089114f8a0fd9538 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/status-badge-dark.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=24dec7cb094adc97fd05c60abb7da454 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/status-badge-dark.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=d63b8535f6a2c0992fcb62e9806cc3cb 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/status-badge-dark.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=185cf07a32b9d5f92e841f8ddf2ef1af 2500w" data-optimize="true" data-opv="2" />

`StatusBadge` is a component that displays a status text with an indicator in any hex color or one of the predefined color names.

## Example

```tsx
import {StatusBadge} from "attio/client"

export function Example({isActive}: {isActive: boolean}) {
  const color = isActive ? "green" : "#FF0000"
  const label = isActive ? "Active" : "Inactive"

  return <StatusBadge color={color}>{label}</StatusBadge>
}
```

## Props

<ParamField path="color" type="StatusIndicatorColor" required>
  The color of the status badge. Can be any hex color (e.g., `"#00D17E"`) or one of the predefined
  colors: `"blue"`, `"violet"`, `"pink"`, `"red"`, `"orange"`, `"yellow"`, `"green"`, `"cyan"`, or
  `"grey"`.
</ParamField>

<ParamField path="children" type="React.ReactNode" required>
  The text to display in the status badge as a label.
</ParamField>


# <SubmitButton />
Source: https://docs.attio.com/sdk/components/submit-button

A submit button for the form.

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/submit-button.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=4c88cb3740b20995c03947244df22851" width="1440" height="880" data-path="images/submit-button.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/submit-button.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=bd86d87b8d2d620f4609fca333e4b30b 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/submit-button.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=871a3b788aa9d56f3cfdf4260a1a5ad8 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/submit-button.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=4e9874e608c8e4fc6d1895b522253eb8 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/submit-button.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=bb78cd58b34b6b071598b41d30888ef1 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/submit-button.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=aad0ec9cd7945f347013779b37d75d6b 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/submit-button.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=7c9dff32b09b04abaca6e89edc7e7559 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/submit-button-dark.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=f0887039a4ca8b537e62b3096b6221ed" width="1440" height="880" data-path="images/submit-button-dark.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/submit-button-dark.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=05b694f72d7bc7bad9b2a9bc6c90d397 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/submit-button-dark.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=35f5747e42361d5b87f0308f3d524cd2 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/submit-button-dark.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=df764fcc41b059966ed7bd787249dc42 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/submit-button-dark.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=9480fdb681d60ef5f03d8877e0f83317 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/submit-button-dark.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=adef4518a3a757131ce611208d997122 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/submit-button-dark.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=02bd2781c5660500588d587c3006826d 2500w" data-optimize="true" data-opv="2" />

<Note>This component is returned by [`useForm()`](../hooks/use-form).</Note>

<Info>
  When rendered in a [dialog](/sdk/dialogs/show-dialog), the submit button will not be shown where
  you have placed it, but will be plucked out of the dialog contents and placed at the bottom of the
  dialog.
</Info>

<Tip>
  One – ***and only one*** – `<SubmitButton />` is required as a direct child of [`<Form />`](./form).
</Tip>

## Example

```tsx form-dialog.tsx
import React from "react";
import { Forms, useForm, showToast } from "attio/client";

export function FormTextInputDialog() {
	const { Form, SubmitButton, TextInput } = useForm(
		{
			name: Forms.string(),
		},
		{
			name: "",
		},
	);
	return (
		<Form
			onSubmit={async (values) => {
				await showToast({
					title: "Form submitted",
					variant: "success",
					text: JSON.stringify(values),
				});
			}}
		>
			<TextInput label="Name" name="name" />
			<SubmitButton label="Submit" />
		</Form>
	);
}
```

## Props

<ParamField path="label" type="string" required>
  The label of the submit button.
</ParamField>

<ParamField path="disabled" type="boolean">
  Whether or not the submit button should be disabled.

  <Note>
    It will automatically be disabled while the form is being submitted.

    You do not need to manage that state!
  </Note>
</ParamField>


# <TextBlock />
Source: https://docs.attio.com/sdk/components/text-block

A block of text whose content can be aligned.

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-block.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=797ba4be527759d025d5fba2ab2e22db" width="1440" height="880" data-path="images/text-block.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-block.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=24105d2f1b678654bad241ed4a3c82a5 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-block.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=55f4ccb38d7fd014ac9a0dc46db07495 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-block.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=4567902b067c913e6f44b7995ad29536 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-block.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=b356eaeeb243bd3576acd4952f881380 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-block.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=2dd89f869c460b1f8f351b2b6d2728d2 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-block.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=ceaf9940b6d2be13b8a392a18bd99430 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-block-dark.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=d7376d9c3b6a940f93965e7b041122f1" width="1440" height="880" data-path="images/text-block-dark.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-block-dark.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=18b56d09ccd712baf40d1e3a7e845f66 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-block-dark.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=2c9800e93fcefff0d86bdc25deab33a2 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-block-dark.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=b9f9c56e775192eed61e132fc1395385 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-block-dark.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=fa34315265fb8d96b312e04ee8cf0ad4 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-block-dark.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=ec48d240163af83d19700824f588d6aa 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-block-dark.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=4aa58ce0ea2e65bf8da55e864b97004b 2500w" data-optimize="true" data-opv="2" />

```js
import {TextBlock} from "attio/client"
```

It can be thought of as a

```jsx
<div style={{ display: "flex", flexDirection: "row" }} />`
```

## Example

```tsx form-with-textblock-dialog.tsx
import React from "react";
import { Forms, useForm, showToast, TextBlock } from "attio/client";

export function FormWithTextBlockDialog() {
	const { Form, SubmitButton, TextInput } = useForm(
		{
			firstName: Forms.string(),
			lastName: Forms.string(),
		},
		{
			firstName: "",
			lastName: "",
		},
	);
	return (
		<Form
			onSubmit={async (values) => {
				await showToast({
					title: "Form submitted",
					variant: "success",
					text: JSON.stringify(values),
				});
			}}
		>
			<TextBlock>
				Some additional information to understand the fields below
			</TextBlock>
			<TextInput label="First name" name="firstName" />
			<TextInput label="Last name" name="lastName" />
			<SubmitButton label="Submit" />
		</Form>
	);
}
```

## Props

<ParamField path="children" type="React.ReactNode" required>
  The text content of text block, usually text, but can be other components.
</ParamField>

<ParamField path="align" type="&#x22;left&#x22; | &#x22;center&#x22; | &#x22;right&#x22;">
  How to optionally align the content of the text block.

  Defaults to `"center"`.
</ParamField>


# <TextInput />
Source: https://docs.attio.com/sdk/components/text-input

A string input field.

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-input.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=d9ddcff4dfc0cd124c18fa2aa1e418bf" width="1440" height="880" data-path="images/text-input.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-input.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=55311ef239ae2c6d0b182056f7dce403 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-input.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=d16a0640117766604517b37aa43b733c 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-input.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=6b3ce7df26dc34e4403b48a2185ea8b2 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-input.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=bbe2c3f4445a58fd756b402e07b092be 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-input.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=e7edaa3853f8b61890bcb76740a50797 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-input.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=de02a622a3d753f1acab6faa5277b2fb 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-input-dark.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=578881e9e0b69e1cbb06aaa7622e1c2b" width="1440" height="880" data-path="images/text-input-dark.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-input-dark.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=c3ff3b556d6846f2d9165b412238c1a6 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-input-dark.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=05141d8da78ff89772320163907bcca3 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-input-dark.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=84bb288f5177209bedf19af6b31a9d3e 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-input-dark.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=3da0b0a74708ec92b87e5c26f582b080 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-input-dark.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=bd5bc714669248418067fdd5710dafc1 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-input-dark.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=2927b8d8d644ac306363dc956a96928a 2500w" data-optimize="true" data-opv="2" />

<Note>This component is returned by [`useForm()`](../hooks/use-form).</Note>

## Example

```tsx form-text-input-dialog.tsx
import React from "react";
import { Forms, useForm, showToast } from "attio/client";

export function FormTextInputDialog() {
	const { Form, SubmitButton, TextInput } = useForm(
		{
			firstName: Forms.string(),
			lastName: Forms.string(),
		},
		{
			firstName: "",
			lastName: "",
		},
	);
	return (
		<Form
			onSubmit={async (values) => {
				await showToast({
					title: "Form submitted",
					variant: "success",
					text: JSON.stringify(values),
				});
			}}
		>
			<TextInput label="First name" name="firstName" />
			<TextInput label="Last name" name="lastName" />
			<SubmitButton label="Submit" />
		</Form>
	);
}
```

## Props

<ParamField path="label" type="string" required>
  The label of the input field.
</ParamField>

<ParamField path="name" type="string" required>
  The path to the `string` value of the input field in your [form schema](../form-schema).

  e.g. `"name"`, `"shipping.address.street"`
</ParamField>

<ParamField path="type" type="&#x22;text&#x22; | &#x22;email&#x22; | &#x22;password&#x22; | &#x22;tel&#x22; | &#x22;url&#x22;">
  The type of the input field.

  They roughly correspond to the HTML types
  [`text`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text),
  [`email`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email),
  [`password`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/password),
  [`tel`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/tel), and
  [`url`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/url).

  Defaults to `"text"`.
</ParamField>

<Tip>Useful on mobile devices with virtual keyboards.</Tip>

<ParamField path="placeholder" type="string">
  An optional placeholder text for your input.
</ParamField>

<ParamField path="disabled" type="boolean">
  Whether or not the field should be disabled.

  Defaults to `false` (not disabled).
</ParamField>


# <Toggle />
Source: https://docs.attio.com/sdk/components/toggle

A toggle input field.

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/toggle.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=b03837752efcbf127ac299ab568f498a" width="1440" height="880" data-path="images/toggle.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/toggle.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=1f410d39065e9cd7a13b328e03a92175 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/toggle.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=1365e48e500e0b3aa9996f015de08ab1 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/toggle.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=c8eca2db575fa78d04a34cf8588fdd31 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/toggle.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=b81d5601bf172aba44cb0d3cdbbd3709 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/toggle.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=c6d6cb1af4b6feafb4b77085701d0eea 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/toggle.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=7d7a84890ca49db978a97d61758a083b 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/toggle-dark.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=bf09a7b95eea4204f7c8e243a5d58b64" width="1440" height="880" data-path="images/toggle-dark.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/toggle-dark.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=4f9ff3438f2cdd299bac326989c6b7e1 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/toggle-dark.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=46733472c46715667e6b30a22858f72e 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/toggle-dark.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=5726d420ce36d94ac0f5a96704ccdd11 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/toggle-dark.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=88a2c8b33278d4b29a14e88ce561cc75 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/toggle-dark.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=8b84a36e45e259130d17b93d703be031 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/toggle-dark.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=955fb7205ab141d5da2401ce14455968 2500w" data-optimize="true" data-opv="2" />

<Note>This component is returned by [`useForm()`](../hooks/use-form).</Note>

## Example

```tsx approval-dialog.tsx
import React from "react";
import { Forms, useForm, showToast } from "attio/client";

export function ApprovalDialog() {
	const { Form, SubmitButton, Toggle } = useForm(
		{
			approved: Forms.boolean(),
		},
		{
			approved: false,
		},
	);
	return (
		<Form
			onSubmit={async (values) => {
				await showToast({
					title: "Form submitted",
					variant: "success",
					text: values.approved ? "Approved" : "Not approved",
				});
			}}
		>
			{/* Some information here */}
			<Toggle label="Approved" name="approved" />
			<SubmitButton label="Submit" />
		</Form>
	);
}
```

## Props

<ParamField path="label" type="string" required>
  The label of the input field.
</ParamField>

<ParamField path="name" type="string" required>
  The path to the `boolean` value of the input field in your [form schema](../form-schema).

  e.g. `"is_active"`, `"shipping.is_express"`
</ParamField>

<ParamField path="disabled" type="boolean">
  Whether or not the field should be disabled.

  Defaults to `false` (not disabled).
</ParamField>


# <Typography />
Source: https://docs.attio.com/sdk/components/typography

A component to style text.

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/typography.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=3997d2660e417303e20d3f1cb203f159" width="1440" height="880" data-path="images/typography.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/typography.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=1dcf84ce41dfdc4ae31baf7294b3ee0c 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/typography.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=6607d644c9167be472bf372151cc205f 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/typography.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=49813f1b91ff623a418da408643bbbf4 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/typography.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=af348bbeeb3276af57b9706c47e98256 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/typography.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=1700419696d01576c068e5606e1afc6a 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/typography.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=229669d0a0f9929f441167cf056c223f 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/typography-dark.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=ea1b716056cb5ec0a9a33596c6220c46" width="1440" height="880" data-path="images/typography-dark.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/typography-dark.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=a9098f74f492fe20b9b8be3756f0c834 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/typography-dark.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=a3b7c2dd3278ae9e663b32a418560dfb 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/typography-dark.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=d9ac7235696f78c9a1f827439ce61a66 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/typography-dark.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=d9a6eb622325e5db695160ac30920018 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/typography-dark.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=bdd2157e4f5d21c7b27c7aebdf3a8ff7 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/typography-dark.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=2c0918abe96a9195c8377f5a5a2afac5 2500w" data-optimize="true" data-opv="2" />

```js
import {Typography} from "attio/client"
```

# `<Typography.Title />`

## Props

<ParamField path="children" type="React.ReactNode" required>
  The content of the title.
</ParamField>

<ParamField path="variant" type="&#x22;extraLarge&#x22; | &#x22;large&#x22; | &#x22;standard&#x22; | &#x22;medium&#x22; | &#x22;small&#x22; | &#x22;extraSmall&#x22;">
  The variant of the title.

  Defaults to `"standard"`.
</ParamField>

# `<Typography.Body />`

## Props

<ParamField path="children" type="React.ReactNode" required>
  The content of the body.
</ParamField>

<ParamField path="variant" type="&#x22;standard&#x22; | &#x22;large&#x22; | &#x22;strong&#x22; | &#x22;interactive&#x22;">
  The variant of the body.

  Defaults to `"standard"`.
</ParamField>

# `<Typography.Caption />`

## Props

<ParamField path="children" type="React.ReactNode" required>
  The content of the caption.
</ParamField>


# <Widget.Badge />
Source: https://docs.attio.com/sdk/components/widgets/badge

A badge to show a small amount of status on a widget.

export const ExperimentalWarning = ({api}) => <Note>
      The <code>{api}</code> API is experimental and may change in the future. It has been
      marked as <code>@deprecated</code> to remind the developer that it is
      experimental. <strong>It is <em>not</em> "deprecated", just experimental.</strong> Please
      don't use it in production versions of your app. We do not guarantee backward compatibility,
      or that the API will remain stable.
    </Note>;

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=905d99548719a1fe3fa5ed50327194c4" width="1440" height="880" data-path="images/text-widget.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=126a8d5ecfb1722483163e4f2bab0ecc 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=b1bf149dc32c27e77ba9ae9f7c3f5d09 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=88acf1585887898c3815b792daf34fa3 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=146f07c9e7db168dc6aa8016a14de374 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=05b6ade4e65606e105eddfc8092955ee 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=16a5358cb369d5f7df67497fc0f5d625 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=effd70a15c784e18ba183266c5b0dc5a" width="1440" height="880" data-path="images/text-widget-dark.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=44ef5e2c8c189f1323158cce821733ae 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=86ff65c41895b736c3fda39cca906894 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=b510e92fd32100bded4bb7cb204d4392 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=5c5f72bde14ee46eefc55a4824881429 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=4840043856c4578210fbf35d52994619 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=3a091da7f8ae010b152ad32b875da3cf 2500w" data-optimize="true" data-opv="2" />

<ExperimentalWarning api="Widget" />

```js
import {Widget} from "attio/client"
```

## Example

```jsx
<Widget.Badge text="42" color="green" />
```

## Props

<ParamField path="text" type="() => void" required>
  The text content to display in the badge
</ParamField>

<ParamField path="color" type="'amber' | 'blue' | 'cyan' | 'green' | 'grey' | 'lavender' | 'lime' | 'orange' | 'pink' | 'purple' | 'red' | 'yellow'" required>
  The color variant for the badge
</ParamField>


# <Widget.Loading />
Source: https://docs.attio.com/sdk/components/widgets/loading

A loading state for a widget.

export const ExperimentalWarning = ({api}) => <Note>
      The <code>{api}</code> API is experimental and may change in the future. It has been
      marked as <code>@deprecated</code> to remind the developer that it is
      experimental. <strong>It is <em>not</em> "deprecated", just experimental.</strong> Please
      don't use it in production versions of your app. We do not guarantee backward compatibility,
      or that the API will remain stable.
    </Note>;

This is a component meant to be used as a [React Suspense](https://react.dev/reference/react/Suspense)
fallback while your widget is loading data.

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/widget-loading.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=953788b8466af2cc963d1b5da44523f5" width="1440" height="880" data-path="images/widget-loading.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/widget-loading.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=f003bda51f497cab44e5a1225af9b22c 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/widget-loading.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=e64282c5e6ae3de14168a3ffb59cb6d8 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/widget-loading.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=36f944546a3fa07cd4d89dd87b1728f8 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/widget-loading.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=7efb652a1374607e99f6ac47c833375f 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/widget-loading.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=98b688b9a8370bd36a7be5816f36adcd 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/widget-loading.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=a2f82ce6fa43e6e14430dcf3e2668aa2 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/widget-loading-dark.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=1ab061d607c1e31f39d87c9b0308edc7" width="1440" height="880" data-path="images/widget-loading-dark.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/widget-loading-dark.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=cf3891ce9ab633bc6a8bffdc5ee79002 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/widget-loading-dark.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=4e450c5ded16135d21bd1e25ad071ba9 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/widget-loading-dark.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=d3941d7a69e5656f45b1d5a80d6e3a5e 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/widget-loading-dark.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=d7f1dceb8957d7f56440de091d9faceb 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/widget-loading-dark.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=11dd4266449caf11cd25f4d97b32fa3f 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/widget-loading-dark.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=5b58c98d02de65ae035cfc383589ca47 2500w" data-optimize="true" data-opv="2" />

<ExperimentalWarning api="Widget" />

```js
import {Widget} from "attio/client"
```

## Example

```jsx
<React.Suspense fallback={<Widget.Loading />}>
  <MySuspensefulWidget />
</React.Suspense>
```

## Props

None.


# <Widget.Text.Primary />
Source: https://docs.attio.com/sdk/components/widgets/text-primary

The primary text information in a widget.

export const ExperimentalWarning = ({api}) => <Note>
      The <code>{api}</code> API is experimental and may change in the future. It has been
      marked as <code>@deprecated</code> to remind the developer that it is
      experimental. <strong>It is <em>not</em> "deprecated", just experimental.</strong> Please
      don't use it in production versions of your app. We do not guarantee backward compatibility,
      or that the API will remain stable.
    </Note>;

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=905d99548719a1fe3fa5ed50327194c4" width="1440" height="880" data-path="images/text-widget.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=126a8d5ecfb1722483163e4f2bab0ecc 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=b1bf149dc32c27e77ba9ae9f7c3f5d09 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=88acf1585887898c3815b792daf34fa3 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=146f07c9e7db168dc6aa8016a14de374 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=05b6ade4e65606e105eddfc8092955ee 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=16a5358cb369d5f7df67497fc0f5d625 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=effd70a15c784e18ba183266c5b0dc5a" width="1440" height="880" data-path="images/text-widget-dark.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=44ef5e2c8c189f1323158cce821733ae 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=86ff65c41895b736c3fda39cca906894 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=b510e92fd32100bded4bb7cb204d4392 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=5c5f72bde14ee46eefc55a4824881429 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=4840043856c4578210fbf35d52994619 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=3a091da7f8ae010b152ad32b875da3cf 2500w" data-optimize="true" data-opv="2" />

<ExperimentalWarning api="Widget" />

```js
import {Widget} from "attio/client"
```

## Example

```jsx
<Widget.Text.Primary>Important information</Widget.Text.Primary>
```

## Props

<ParamField path="children" type="React.ReactNode" required>
  The primary text content
</ParamField>


# <Widget.Text.Secondary />
Source: https://docs.attio.com/sdk/components/widgets/text-secondary

The secondary text information in a widget.

export const ExperimentalWarning = ({api}) => <Note>
      The <code>{api}</code> API is experimental and may change in the future. It has been
      marked as <code>@deprecated</code> to remind the developer that it is
      experimental. <strong>It is <em>not</em> "deprecated", just experimental.</strong> Please
      don't use it in production versions of your app. We do not guarantee backward compatibility,
      or that the API will remain stable.
    </Note>;

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=905d99548719a1fe3fa5ed50327194c4" width="1440" height="880" data-path="images/text-widget.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=126a8d5ecfb1722483163e4f2bab0ecc 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=b1bf149dc32c27e77ba9ae9f7c3f5d09 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=88acf1585887898c3815b792daf34fa3 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=146f07c9e7db168dc6aa8016a14de374 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=05b6ade4e65606e105eddfc8092955ee 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=16a5358cb369d5f7df67497fc0f5d625 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=effd70a15c784e18ba183266c5b0dc5a" width="1440" height="880" data-path="images/text-widget-dark.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=44ef5e2c8c189f1323158cce821733ae 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=86ff65c41895b736c3fda39cca906894 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=b510e92fd32100bded4bb7cb204d4392 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=5c5f72bde14ee46eefc55a4824881429 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=4840043856c4578210fbf35d52994619 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=3a091da7f8ae010b152ad32b875da3cf 2500w" data-optimize="true" data-opv="2" />

<ExperimentalWarning api="Widget" />

```js
import {Widget} from "attio/client"
```

## Example

```jsx
<Widget.Text.Secondary>Less important, descriptive information</Widget.Text.Secondary>
```

## Props

<ParamField path="children" type="React.ReactNode" required>
  The secondary text content.

  Typically a less important description of what is displayed using `<Widget.Text.Primary/>`.
</ParamField>


# <Widget.TextWidget />
Source: https://docs.attio.com/sdk/components/widgets/text-widget

Text widget that can be shown on a record page.

export const ExperimentalWarning = ({api}) => <Note>
      The <code>{api}</code> API is experimental and may change in the future. It has been
      marked as <code>@deprecated</code> to remind the developer that it is
      experimental. <strong>It is <em>not</em> "deprecated", just experimental.</strong> Please
      don't use it in production versions of your app. We do not guarantee backward compatibility,
      or that the API will remain stable.
    </Note>;

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=905d99548719a1fe3fa5ed50327194c4" width="1440" height="880" data-path="images/text-widget.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=126a8d5ecfb1722483163e4f2bab0ecc 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=b1bf149dc32c27e77ba9ae9f7c3f5d09 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=88acf1585887898c3815b792daf34fa3 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=146f07c9e7db168dc6aa8016a14de374 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=05b6ade4e65606e105eddfc8092955ee 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=16a5358cb369d5f7df67497fc0f5d625 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=effd70a15c784e18ba183266c5b0dc5a" width="1440" height="880" data-path="images/text-widget-dark.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=44ef5e2c8c189f1323158cce821733ae 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=86ff65c41895b736c3fda39cca906894 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=b510e92fd32100bded4bb7cb204d4392 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=5c5f72bde14ee46eefc55a4824881429 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=4840043856c4578210fbf35d52994619 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=3a091da7f8ae010b152ad32b875da3cf 2500w" data-optimize="true" data-opv="2" />

<ExperimentalWarning api="Widget" />

```js
import {Widget} from "attio/client"
```

## Example

```jsx
<Widget.TextWidget
  onTrigger={() => {
    // do something
  }
}>
  <Widget.Title>Title</Widget.Title>
  <Widget.Text.Primary>Main text</Widget.Text.Primary>
  <Widget.Text.Secondary>Description text</Widget.Text.Secondary>
  <Widget.Badge text="42" color="blue" />
/>
```

## Props

<ParamField path="onTrigger" type="() => void">
  An optional function that will be called when a user clicks on the widget.
</ParamField>

<ParamField path="children" type="React.ReactNode" required>
  A text widget can have – at least one – of the following children:

  * [`Widget.Title`](./title)
  * [`Widget.Text.Primary`](./text-primary)
  * [`Widget.Text.Secondary`](./text-secondary)
  * [`Widget.Loading`](./loading)
  * [`Widget.Badge`](./badge)

  Not all of them are required.

  <Info>
    If you do not provide a `<Widget.Title />` your app's name will be used.
  </Info>

  <Note>At least one text component is required for the badge to be displayed.</Note>
</ParamField>


# <Widget.Title />
Source: https://docs.attio.com/sdk/components/widgets/title

The title of the widget

export const ExperimentalWarning = ({api}) => <Note>
      The <code>{api}</code> API is experimental and may change in the future. It has been
      marked as <code>@deprecated</code> to remind the developer that it is
      experimental. <strong>It is <em>not</em> "deprecated", just experimental.</strong> Please
      don't use it in production versions of your app. We do not guarantee backward compatibility,
      or that the API will remain stable.
    </Note>;

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=905d99548719a1fe3fa5ed50327194c4" width="1440" height="880" data-path="images/text-widget.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=126a8d5ecfb1722483163e4f2bab0ecc 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=b1bf149dc32c27e77ba9ae9f7c3f5d09 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=88acf1585887898c3815b792daf34fa3 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=146f07c9e7db168dc6aa8016a14de374 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=05b6ade4e65606e105eddfc8092955ee 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=16a5358cb369d5f7df67497fc0f5d625 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=effd70a15c784e18ba183266c5b0dc5a" width="1440" height="880" data-path="images/text-widget-dark.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=44ef5e2c8c189f1323158cce821733ae 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=86ff65c41895b736c3fda39cca906894 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=b510e92fd32100bded4bb7cb204d4392 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=5c5f72bde14ee46eefc55a4824881429 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=4840043856c4578210fbf35d52994619 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=3a091da7f8ae010b152ad32b875da3cf 2500w" data-optimize="true" data-opv="2" />

<ExperimentalWarning api="Widget" />

```js
import {Widget} from "attio/client"
```

## Example

```jsx
<Widget.Title>Widget title</Widget.Title>
```

## Props

<ParamField path="children" type="React.ReactNode" required>
  The title text content.

  <Info>
    If your app only provides a single widget, it should probably be the same name as your app.
  </Info>
</ParamField>


# <WithState />
Source: https://docs.attio.com/sdk/components/with-state

A non-visual component to get form state when rendering JSX

<Note>This component is returned by [`useForm()`](../hooks/use-form).</Note>

## Example: Conditional fields

`<WithState />` allows you to access the form values via render props
in the JSX, so you can conditionally render fields.

```tsx conditional-fields-dialog.tsx
import React from "react";
import { Forms, useForm, showToast } from "attio/client";

export function HelloWorldDialog() {
	const { Form, SubmitButton, Checkbox, TextInput, WithState } = useForm(
		{
			requireName: Forms.boolean(),
			name: Forms.string(),
		},
		{
			requireName: false,
			name: "",
		},
	);
	return (
		<Form
			onSubmit={async (values) => {
				await showToast({
					title: "Form submitted",
					variant: "success",
					text: JSON.stringify(values),
				});
			}}
		>
			<Checkbox label="Require name" name="requireName" />
			<WithState values>
				{({ values }) =>
					values.requireName ? <TextInput label="Name" name="name" /> : <></>
				}
			</WithState>
			<SubmitButton label="Submit" />
		</Form>
	);
}
```

## Example: Submitting state

`<WithState />` allows you to know whether or not the form is currently being
submitted, so you can change the UI, e.g. disabling a secondary button.

```tsx submitting-state-dialog.tsx
import React from "react";
import { Forms, useForm, showToast, Button } from "attio/client";

export function SubmittingStateDialog() {
	const { Form, SubmitButton, TextInput, WithState } = useForm(
		{
			name: Forms.string(),
		},
		{
			name: "",
		},
	);
	return (
		<Form
			onSubmit={async (values) => {
				await new Promise((resolve) => setTimeout(resolve, 2_000));
				await showToast({
					title: "Form submitted",
					variant: "success",
					text: JSON.stringify(values),
				});
			}}
		>
			<TextInput label="Name" name="name" />

			<WithState submitting>
				{({ submitting }) => (
					<Button
						label="Remove"
						variant="destructive"
						disabled={submitting}
						onClick={() => {
							// do something
						}}
					/>
				)}
			</WithState>
			<SubmitButton label="Submit" />
		</Form>
	);
}
```

## Props

<ParamField path="errors" type="boolean">
  Whether or not to request the form validation errors.

  Defaults to `false`.

  If `true`, the `errors` will be passed to the `children` render prop.
</ParamField>

<ParamField path="submitting" type="boolean">
  Whether or not to request whether the form is currently being submitted.

  Defaults to `false`.

  If `true`, the `submitting` will be passed to the `children` render prop.
</ParamField>

<ParamField path="values" type="boolean">
  Whether or not to request the form values.

  Defaults to `false`.

  If `true`, the `values` will be passed to the `children` render prop.
</ParamField>

<ParamField path="children" type="({ errors, submitting, values }) => React.ReactNode">
  A [render prop](https://react.dev/reference/react/Children#calling-a-render-prop-to-customize-rendering)
  that receives the requested form state.

  #### `errors? : Object`

  An object of form validation errors in the same shape as your form values.

  #### `submitting? : boolean`

  `true` until the `Promise` resolves from `onSubmit`, `false` otherwise.

  #### `values? : Object`

  The current values of your form.
</ParamField>


# Overview of App SDK
Source: https://docs.attio.com/sdk/deep-dives/overview

An overview of the functionality provided by the App SDK

export const MermaidDiagram = ({children, large = false, id}) => {
  if (large) {
    return <div className="flex justify-center w-full">
        <code className="language-mermaid w-full">
          {children}
        </code>
      </div>;
  }
  return <div className="mermaid-inline">
  <Tooltip tip="Click to enlarge">
    <a href={`/diagrams/${id}`}>
      <code className="language-mermaid">{children}</code>
    </a>
  </Tooltip>
</div>;
};

<Note>
  This only covers apps from the perspective of the App SDK, apps can also use the REST API
</Note>

**An app is a way to extend the existing functionality of Attio**,
typically by pulling data into Attio from a third party source, or of
extracting data out of Attio to use with some tool. Apps can provide custom
UI *directly inside of Attio's user interface* using custom React components.

Specifically you can add custom actions (buttons) to record pages inside Attio. When clicked you can trigger a server function, and/or display a modal to users with custom UI to complete a form or view information.

Let's look at an example.

Let's imagine a hypothetical service called **Acme Lead Checker** (ALC) that has
an API to receive potential leads, an AI agent initiates an SMS chat with the lead,
and then needs to update the lead's record in Attio about how interested the
person is in whatever product we are selling.

Our app needs:

* A button inside Attio that will call a server function
* A server function to actually send the data to ALC
* A webhook to receive the lead status back from ALC sometime in the future

<Note>
  App UI components cannot directly communicate with the outside world. They can only call custom
  app server functions, which *can* communicate with the outside world via
  [`fetch()`](../server/available-globals#server-only), and communicate with Attio's REST API via
  [`attioFetch()`](../server/attio-fetch).
</Note>

## Sequence

The general sequence of how the app will work is:

### Installation

1. User clicks to install the app.
2. User is prompted to add a [connection](../server/connections) to Acme Lead Checker
3. User logs into Acme Lead Checker to complete the OAuth flow.
4. User is redirected back to Attio. The app is now installed.
5. The [`connection-added`](../server/events/connection-added) event handler the app
   registered is fired.
6. Event Handler calls [`createWebhookHandler()`](../server/webhooks/create-webhook-handler)
   to register a [webhook handler](../server/webhooks/update-webhook-handler).
7. Event Handler registers the new webhook with Acme Lead Checker.

<MermaidDiagram id="app-install-sequence">
  ```mermaid
  sequenceDiagram
      actor User
      participant Attio UI
      participant ALC as Acme Lead Checker
      participant Event Handler
      participant Attio Server SDK

      User->>Attio UI: Clicks to install app
      Attio UI->>User: Prompts to add connection to ALC
      User->>ALC: Logs in (OAuth flow)
      ALC-->>Attio UI: Redirects back with auth token
      Attio UI-->>User: Shows app is now installed
      Attio UI->>Event Handler: Fires 'connection-added' event
      Event Handler->>Attio Server SDK: Calls createWebhookHandler()
      Attio Server SDK-->>Event Handler: Returns webhook handler details
      Event Handler->>ALC: Registers webhook
  ```
</MermaidDiagram>

### Usage

1. App provides a [record action](../entry-points/record-action) which will manifest
   itself in Attio's UI as - a button on the People record page - in the CMD-K quick action palette.
2. User views the record page
3. User clicks button
4. Attio's UI fires the `onTrigger()` function provided by the record action
5. Record Action notifies the user that async things are happening
   with [`showToast()`](../notifications/show-toast).
6. Record Action loads the phone number of the person whose record page we are on
   asynchronously via [GraphQL](../graphql) using [`runQuery()`](../graphql/run-query). - If no phone numbers are found, the user is notified via an [`alert()`](../notifications/alert).
   Otherwise...
7. Record Action calls a
   [server function](../server/server-functions) called `sendToALC()`.
8. Server function uses [`fetch()`](../server/available-globals#server-only)
   to send a `POST` request to `api.acmeleadchecker.ai`.
9. Server function uses [`attioFetch()`](../server/attio-fetch) to mark the record
   as "Pending".
10. Server function returns success.
11. Record Action hides first toast
    with [`hideToast()`](../notifications/show-toast#hidetoast-promise-void).
12. Record Action notifies the user that the process was successful
    with [`showToast()`](../notifications/show-toast).

...some time later...

10. Acme Lead Checker's server calls a webhook provided by the app.
11. Webhook Handler uses [`attioFetch()`](../server/attio-fetch) to mark the record
    as "Complete".

<MermaidDiagram id="app-usage-sequence">
  ```mermaid
  sequenceDiagram
      actor User
      participant Attio UI
      participant Record Action
      participant GraphQL
      participant Server Function
      participant ALC as api.acmeleadchecker.ai
      participant Webhook
      participant Attio API

      User->>Attio UI: Clicks button
      Attio UI->>Record Action: Fires onTrigger()
      Record Action-->>Attio UI: showToast()
      Attio UI-->>User: Shows "Loading" toast
      Record Action->>GraphQL: Load phone numbers
      GraphQL-->>Record Action: Query result
      Record Action->>Server Function: Calls sendToALC()
      Server Function->>ALC: POST request
      Server Function->>Attio API: attioFetch() to mark record "Pending"
      Server Function-->>Record Action: Returns success
      Record Action-->>Attio UI: hideToast()
      Attio UI-->>User: Hides "Loading" toast
      Record Action-->>Attio UI: showToast()
      Attio UI-->>User: Shows "Success" toast

      Note over User,Attio API: Some time later...

      ALC->>Webhook: Calls the app's webhook
      Webhook->>Attio API: attioFetch() to mark record "Complete"
  ```
</MermaidDiagram>

## Implementation

### Record action

[Record action](../entry-points/record-action) files can have any name, but they
*MUST* have a *named* export called `recordAction`.

```typescript send-to-alc-record-action.ts
import type {RecordAction} from "attio/client"
import {runQuery, showToast, alert} from "attio/client"
import getPersonPhoneNumbersQuery from "./get-person-phone-numbers.graphql"
import sendToAlc from "./send-to-alc.server"

// This must be a named export called "recordAction"
export const recordAction: RecordAction = {
  id: "send-to-alc", // internal unique identifier
  label: "Send to ALC", // user-facing label
  onTrigger: async ({recordId}) => {
    const {hideToast} = await showToast({
      title: "Preparing to send to ALC...",
      variant: "neutral",
    })

    const {person} = await runQuery(getPersonPhoneNumbersQuery, {recordId})
    // `person` is strongly typed here as:
    // {
    //   name: {
    //     full_name: string | null
    //   } | null
    //   phone_numbers: string[]
    // } | null
    // ...so TypeScript will help us know the checks we need to perform.

    if (!person) {
      await hideToast()
      await alert({
        title: "Failed to load person data",
        text: "Please try again.",
      })
      return
    }

    const firstPhoneNumber = person.phone_numbers[0] ?? null
    if (!firstPhoneNumber) {
      await hideToast()
      await alert({
        title: "No phone number found",
        text: "Please add a phone number to the person and try again.",
      })
      return
    }

    try {
      await sendToAlc(recordId, person.name?.full_name ?? "Unknown", firstPhoneNumber)
    } catch {
      await hideToast()
      await alert({
        title: "Failed to send to ALC",
        text: "Please try again.",
      })
      return
    }

    await hideToast()
    await showToast({
      title: "Successfully sent to ALC!",
      variant: "success",
    })
  },
  objects: "person", // only show this action on person records
}
```

### GraphQL query

Now let's write that [GraphQL](../graphql) query we're importing.

```graphql get-person-phone-numbers.graphql
query getPersonPhoneNumbers($recordId: String!) {
  person(id: $recordId) {
    name {
      full_name
    }
    phone_numbers
  }
}
```

### Server function

[Server function](../server) file names *MUST*:

* have a `.server.ts` suffix
* contain an `export default async function`

The suffix is how Attio knows to execute them on the server. However,
they are imported as if they were in the same bundle as the client side code,
even though they are not.

<Warning>
  Because they live in different bundles and runtimes, everything passed to, returned from, or
  thrown by server functions *MUST* be serializable.
</Warning>

```typescript send-to-alc.server.ts
import {attioFetch, getWorkspaceConnection} from "attio/server"

export default async function sendToAlc(recordId: string, name: string, phoneNumber: string) {
  // Get the authorization token from the workspace connection
  // that the user has set up in their Attio account.
  const connection = getWorkspaceConnection()
  const authorizationToken = connection.value

  const response = await fetch("https://api.acmeleadchecker.ai/api/v1/leads", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${authorizationToken}`,
    },
    body: JSON.stringify({recordId, name, phoneNumber}),
  })

  if (!response.ok) {
    throw new Error("Failed to send to ALC")
  }

  const lead = await response.json()

  // Update the person record with the ALC ID
  await attioFetch({
    // call to Attio's REST API
  })

  return lead
}
```

### Webhook handler

Our [webhook handler](../server/webhooks) is going to be called by Acme Lead Checker
when they have processed our lead that we sent them.

Webhook handler files *MUST*:

* Live under the `src/webhooks` directory
* Have a `.webhook.ts` suffix.
* Contain an `export default async function` that:
  * takes an HTTP [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request) argument
  * returns an HTTP [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response)

```typescript webhooks/lead-processed.webhook.ts
import {attioFetch} from "attio/server"

export default async function leadProcessedWebhook(req: Request): Promise<Response> {
  const body = await req.json()

  const recordId = body.record_id
  const status = body.status

  await attioFetch({
    // call to Attio's REST API
  })

  return new Response(null, {status: 200})
}
```

### Connection event handlers

In order to let Acme Lead Checker know how to call our app's webhook, we need to
tell them as soon as our user creates an authorized [connection](../server/connections);
we accomplish this with [event handlers](../server/events).

Connection Event Handler files *MUST*:

* Live in `src/events`
* Have a `.event.ts` suffix.
* Contain an `export default async function` that:
  * Takes a `{ connection: Connection }` argument
  * Returns `void`

#### Connection added event handler

When a connection is added, we need to:

1. Create a webhook
2. Register our webhook with Acme Lead Checker
3. Update our webhook with the unique identifier of our webhook on ALC's side

```typescript events/connection-added.event.ts
import type {Connection} from "attio/server"
import {createWebhookHandler, updateWebhookHandler} from "attio/server"

export default async function connectionAdded({connection}: {connection: Connection}) {
  // The filename must match the file in src/webhooks, but without the suffix
  const handler = await createWebhookHandler({fileName: "lead-processed"})

  const authorizationToken = connection.value

  const response = await fetch("https://api.acmeleadchecker.ai/api/v1/webhooks", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${authorizationToken}`,
    },
    body: JSON.stringify({
      name: handler.id,
      url: handler.url,
      event: "lead.processed",
    }),
  })

  if (!response.ok) {
    throw new Error(`Failed to register webhook: ${response.statusText}`)
  }

  const webhook = await response.json()

  // Save the external webhook ID so we can delete it when the connection is removed
  await updateWebhookHandler(handler.id, {
    externalWebhookId: webhook.webhook_id,
  })
}
```

#### Connection removed event handler

When a connection is removed, we need to:

1. Load all our app's webhook handlers (there should only be one)
2. For each handler, tell ALC to stop calling it
3. Delete the webhook from Attio

```typescript events/connection-removed.event.ts
import type {Connection} from "attio/server"
import {deleteWebhookHandler, listWebhookHandlers} from "attio/server"

export default async function connectionRemoved({connection}: {connection: Connection}) {
  try {
    const handlers = await listWebhookHandlers()
    const authorizationToken = connection.value

    // Delete webhooks on ALC
    // There should be only one webhook handler active as we have single workspace connection
    await Promise.all(
      handlers.map(async (handler) => {
        const response = await fetch(
          `https://api.acmeleadchecker.ai/api/v1/webhooks/${handler.externalWebhookId}`,
          {
            method: "DELETE",
            headers: {
              Authorization: `Bearer ${authorizationToken}`,
            },
          }
        )
        if (!response.ok) {
          throw new Error(`Failed to delete webhook: ${response.statusText}`)
        }
      })
    )

    // Delete webhooks on Attio
    await Promise.all(
      handlers.map(async (handler) => {
        await deleteWebhookHandler(handler.id)
      })
    )
  } catch (error) {
    console.error(error)
    // don't rethrow the error so the connection is still removed
  }
}
```


# <DialogList />
Source: https://docs.attio.com/sdk/dialogs/dialog-list

A navigatable and clickable list of items in a dialog.

export const ExperimentalWarning = ({api}) => <Note>
      The <code>{api}</code> API is experimental and may change in the future. It has been
      marked as <code>@deprecated</code> to remind the developer that it is
      experimental. <strong>It is <em>not</em> "deprecated", just experimental.</strong> Please
      don't use it in production versions of your app. We do not guarantee backward compatibility,
      or that the API will remain stable.
    </Note>;

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog-list.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=a37bdf43ccb4038cbb7cdf0b5157f7c2" width="1440" height="880" data-path="images/dialog-list.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog-list.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=368e3743e9f827f583652d4a85913bdb 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog-list.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=80bccac382488b40e9fcf490f3863228 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog-list.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=10a4c3496a4de5233ad6eae316e8bd2f 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog-list.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=7f23a7e1313a1686a151186a4f758f61 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog-list.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=47f5284a8a298340af34b3f429777882 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog-list.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=328d232da19e7dbac81d36ab44f69f7a 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog-list-dark.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=48cc5be636a78d431f719af77c15f92e" width="1440" height="880" data-path="images/dialog-list-dark.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog-list-dark.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=16b045cc96b3fea5c49b9a290397637e 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog-list-dark.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=bbe63fb6b8b64d04389aa12f6c654513 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog-list-dark.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=e8f94e35c7dcdc89e1c25342a62f8b0f 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog-list-dark.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=47151ba961e32f5c17c6cd908a75547b 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog-list-dark.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=871e3a9b132520eba7e00f5a44de502c 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog-list-dark.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=8e2a77a02a64d85d0821f58089e83b9d 2500w" data-optimize="true" data-opv="2" />

<ExperimentalWarning api="DialogList" />

## Example

```tsx
import {DialogList, showDialog, StatusBadge} from "attio/client"

showDialog({
    title: "My Items",
    Dialog: () => {
        return (
            <DialogList emptyState={{text: "No items found"}}>
                {items.map((item) => (
                    <DialogList.Item
                        key={item.id}
                        icon="Note"
                        onTrigger={() => {
                            window.open(item.url)
                        }}
                        actionLabel="View item"
                        suffix={<StatusBadge color="#00D17E">{item.status}</StatusBadge>}
                    >
                        {item.name}
                    </DialogList.Item>

                ))}
            </DialogList>
        )
    },
})
```

## `DialogList` Props

<ParamField path="emptyState" type="{text:string, actions: Array<{label:string, onTrigger:() => void, icon?: Icon}>}" required>
  The text to display when the list is empty,
  and an optional array of actions to display when the user clicks the empty state.
</ParamField>

<ParamField path="children" type="React.ReactNode" required>
  The children should be a list of `DialogList.Item` components.
</ParamField>

## `DialogList.Item` Props

<ParamField path="children" type="React.ReactNode" required>
  The text to display for the item.
</ParamField>

<ParamField path="icon" type="Icon" required>
  The icon to display for the item.
</ParamField>

<ParamField path="onTrigger" type="() => void">
  A function that will be called if the user clicks the item.
</ParamField>

<ParamField path="actionLabel" type="string">
  The text to display for the action button for the item in the dialog footer.
  Required if `onTrigger` is provided.
</ParamField>

<ParamField path="suffix" type="React.ReactNode">
  The suffix to display for the item. Can be a [Typography](/sdk/components/typography) component or a [StatusBadge](/sdk/components/status-badge) component.
</ParamField>


# showDialog()
Source: https://docs.attio.com/sdk/dialogs/show-dialog

Show a dialog box

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=8382f7d690adc03b3bde9da44d844d5b" width="1440" height="880" data-path="images/dialog.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=6f7a41e77554b7e105c00d78e9dbb311 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=6ac7b7cf4f7229eb2284821781ff4c6b 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=bcf80cb3072efd48182cb25e17b520ce 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=5a571967156ed6406de877ff55a33f01 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=da4b14b4709ef6290379052751ffa9b3 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=6ade8278ab19cea21a68619533e5eff4 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog-dark.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=152f14974743b47e31894f064e6e75a3" width="1440" height="880" data-path="images/dialog-dark.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog-dark.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=8e26b76d38114daff00a7695b95eb8b9 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog-dark.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=c0573bed407b10254cc839bb4e978bde 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog-dark.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=73f06e33b33cda37e916e22d89622ca0 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog-dark.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=7f0612667a2639f6083efa3817c27cc4 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog-dark.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=9aa5a1e17dd11c02d776eb306a20ebbe 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog-dark.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=ff523ee4421f0a7384f53c063293edb6 2500w" data-optimize="true" data-opv="2" />

## Example

Call `showDialog()` from record actions. Hiding the dialog is automatically handled by Attio when the user closes it.

```tsx
import React from "react"
import {RecordAction, showDialog} from "attio/client"
import {AuroraDialog} from "./aurora-dialog"

export const recordAction: RecordAction = {
  id: "aurora",
  label: "Aurora",
  onTrigger: async ({recordId}) => {
    showDialog({
      title: "Aurora",
      Dialog: () => {
        // This is a React component. It can use hooks and render other components.
        return <AuroraDialog recordId={recordId} />
      },
    })
  },
}
```

## API

```ts TypeScript
async function showDialog(options: DialogOptions): Promise<void>
```

## Returns

A `Promise` that resolves when the dialog is closed.

## DialogOptions

<ParamField path="title" type="string" required>
  The title of the dialog.
</ParamField>

<ParamField path="Dialog" type="React.FC<{ hideDialog: () => void }>" required>
  The contents of the dialog.
</ParamField>


# BulkRecordAction
Source: https://docs.attio.com/sdk/entry-points/bulk-record-action

Registers a bulk action for records in Attio

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/bulk-record.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=fcf62f16279c33e94dd426e358cb3cb4" width="1440" height="880" data-path="images/bulk-record.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/bulk-record.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=eff98fec95353599b10fd62a19b19660 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/bulk-record.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=07b9606475045639fbd842e7f324c39d 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/bulk-record.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=e05961349e383268df7fa6c135eedd05 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/bulk-record.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=d4fd11ef6ef804b9fb3a9dce8b0a5715 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/bulk-record.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=02179cec61c704d61ad0901ea1182067 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/bulk-record.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=933367fe049ca4a516462f3041a2a7de 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/bulk-record-dark.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=b8cb79ec596a9cdb91ce4d60e3ad42e6" width="1440" height="880" data-path="images/bulk-record-dark.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/bulk-record-dark.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=003ea15c0306b8257ffdb318218561c9 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/bulk-record-dark.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=2f9cb81165a74e1b97c13e58314275e7 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/bulk-record-dark.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=61b7e67075c70245ef2345edb06533f4 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/bulk-record-dark.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=d5151c4328019058faec43974c527705 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/bulk-record-dark.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=bb0afd179e4c287d7a118facece84341 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/bulk-record-dark.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=ae61da8cdc3d49e991671b0e28273c48 2500w" data-optimize="true" data-opv="2" />

Bulk record actions are rendered when multiple record rows are selected in Attio.

```ts
import {type BulkRecordAction} from "attio/client"
```

Any file with a
[named export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#using_named_exports)
of `bulkRecordAction` will register a record action

## Example

```tsx TypeScript
import type {BulkRecordAction} from "attio/client"

export const bulkRecordAction: BulkRecordAction = {
  id: "send-invoices",
  label: "Send Invoices",
  icon: "Sales",
  onTrigger: async ({recordIds}) => {
    // Run code here
  },
  objects: "people",
}
```

## Arguments

<ParamField path="id" type="string" required>
  The unique identifier for this action.

  It is only used internally; never shown to the user.
</ParamField>

<ParamField path="label" type="string" required>
  The human readable label for the record action.
</ParamField>

<ParamField path="icon" type="AttioIcon | string">
  An icon to display in the action, either an [`AttioIcon`](./icons) or
  a string `.png` referencing a file in your app's `assets` directory.

  <Tip>
    If no `icon` prop is provided, it will default to your app's icon that you set up in the
    [Developer dashboard](https://build.attio.com).
  </Tip>
</ParamField>

<ParamField path="onTrigger" type="async ({ recordIds: string }) => Promise<void>">
  The function to run when the action is triggered. You'll likely want to [show a
  dialog](../dialogs/show-dialog) or run a [server function](../server/server-functions) here.
</ParamField>

<ParamField path="objects" type="ObjectSlug | Array<ObjectSlug>">
  A single slug or an array of slugs to select which types of record the record action will apply to.

  Defaults to `undefined`, which will cause the action to show on ***all*** types of records.

  The built-in slugs are

  * [`"companies"`](../../docs/standard-objects/standard-objects-companies)
  * [`"people"`](../../docs/standard-objects/standard-objects-people)
  * [`"deals"`](../../docs/standard-objects/standard-objects-deals)
  * [`"users"`](../../docs/standard-objects/standard-objects-users)
  * [`"workspaces"`](../../docs/standard-objects/standard-objects-workspaces)
</ParamField>


# CallRecordingInsightTextSelectionAction
Source: https://docs.attio.com/sdk/entry-points/call-recording-insight-text-selection-action

Call recording insights text selection actions are a way to perform an action based on a text selection on a call recording insights.

export const ExperimentalWarning = ({api}) => <Note>
      The <code>{api}</code> API is experimental and may change in the future. It has been
      marked as <code>@deprecated</code> to remind the developer that it is
      experimental. <strong>It is <em>not</em> "deprecated", just experimental.</strong> Please
      don't use it in production versions of your app. We do not guarantee backward compatibility,
      or that the API will remain stable.
    </Note>;

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-insight.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=9cfd4c214bd097eb35b3f801fbae831b" width="1440" height="880" data-path="images/text-selection-insight.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-insight.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=4d5db4768cb17718728586afa7a969d2 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-insight.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=0d55c171fabeff31e66a3016d6e2e064 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-insight.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=e6d3b0e6d2f2f6377ad75e10e5a8af2e 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-insight.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=b4c9116771b2ef840cf74f452593c9c0 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-insight.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=8e18d4234281dfa6d5fad31da55be97f 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-insight.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=75c98d94487f3cfeb4758a6e4579ba90 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-insight-dark.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=d267c2eeeaa91b79ecae6c8b75314bf1" width="1440" height="880" data-path="images/text-selection-insight-dark.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-insight-dark.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=db5bf94e10d921252532185f83452c86 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-insight-dark.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=59e257181d8f46a6bcb320282c2d8b18 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-insight-dark.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=828b9e893260192be90e0d85f5f6eb26 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-insight-dark.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=1682b8d3613d4f32929520acf8a16e51 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-insight-dark.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=ae1c5782560ac10fdcb67de2ea327e1e 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-insight-dark.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=4705238b56f2f58379790db095a83597 2500w" data-optimize="true" data-opv="2" />

<ExperimentalWarning api="CallRecordingInsightTextSelectionAction" />

```ts
import {type CallRecordingInsightTextSelectionAction} from "attio/client"
```

Any file with a
[named export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#using_named_exports)
of `callRecordingInsightTextSelectionAction` will register a call recording insights text selection action.

## Example

```tsx TypeScript
import {type CallRecordingInsightTextSelectionAction, showDialog} from "attio/client"
import {ProcessCallInsightDialog} from "./your-code"

export const callRecordingInsightTextSelectionAction: CallRecordingInsightTextSelectionAction =
  {
    id: "process-call-insights",
    label: "Process insights",
    onTrigger: async ({ markdown, text }: {
      markdown: string
      text: string
    }) => {
      await showDialog({
          title: "Process call insights",
          Dialog: ({hideDialog}: {hideDialog: () => void}) => {
            return (
              <ProcessCallInsightDialog
                markdown={markdown}
                text={text}
                onDone={hideDialog}
              />
            )
          },
        })
    },
  }
```

## Arguments

<ParamField path="id" type="string" required>
  The unique identifier for this call recording insight selection action.

  It is only used internally; never shown to the user.
</ParamField>

<ParamField path="label" type="string" required>
  A human-readable label of the call recording insight selection action that will be shown to the user when they make a text selection on a call recording insights.
</ParamField>

<ParamField path="icon" type="string">
  An [`AttioIcon`](./icons) to display beside the label.

  <Tip>
    If no `icon` prop is provided, it will default to your app's icon that you set up in the
    [Developer dashboard](https://build.attio.com).
  </Tip>
</ParamField>

<ParamField path="onTrigger" type="async (selection: {text: string; markdown: string}) => Promise<void>">
  The function to run when the action is triggered. You'll likely want to [show a
  dialog](../dialogs/show-dialog) or run a [server function](../server/server-functions) here.

  The function will be given an object containing:

  * `markdown` – a markdown respresentation of the text selected (e.g. may include bullet points)
  * `text` – the plain text of the text selected
</ParamField>


# CallRecordingSummaryTextSelectionAction
Source: https://docs.attio.com/sdk/entry-points/call-recording-summary-text-selection-action

Call recording summary text selection actions are a way to perform an action based on a text selection on a call recording summary.

export const ExperimentalWarning = ({api}) => <Note>
      The <code>{api}</code> API is experimental and may change in the future. It has been
      marked as <code>@deprecated</code> to remind the developer that it is
      experimental. <strong>It is <em>not</em> "deprecated", just experimental.</strong> Please
      don't use it in production versions of your app. We do not guarantee backward compatibility,
      or that the API will remain stable.
    </Note>;

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-summary.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=0bfd063131a03d2565000dec5cd3dd21" width="1440" height="880" data-path="images/text-selection-summary.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-summary.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=7e5d6955d098cb8fbec490b1128c1b95 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-summary.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=8c29b0cf93579cb497a8ef5c0fc84751 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-summary.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=1e7b8e6c4aa0d93a88060ea5d04cdd5e 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-summary.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=47b71e667b1811e0740d9cb926812293 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-summary.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=c96036cbe6b006397096105c9deb0608 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-summary.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=11dcadf2ffd62f058f0c62a64d3d7155 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-summary-dark.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=da5b3773807e93b911240999d71dd927" width="1440" height="880" data-path="images/text-selection-summary-dark.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-summary-dark.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=1cb70eeb5d0a4a1c7e9e4f7bcbd981c2 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-summary-dark.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=8600895935fc7b122d06888555181ecb 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-summary-dark.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=c36d22e6983cbb0d3d75dd3d13727d9f 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-summary-dark.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=2f1351187524522b174a6596f687163c 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-summary-dark.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=e60ff5882c5c2a848730d632be100a62 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-summary-dark.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=4e8b4fe4330074d1da10178da1e8249a 2500w" data-optimize="true" data-opv="2" />

<ExperimentalWarning api="CallRecordingSummaryTextSelectionAction" />

```ts
import {type CallRecordingSummaryTextSelectionAction} from "attio/client"
```

Any file with a
[named export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#using_named_exports)
of `callRecordingSummaryTextSelectionAction` will register a call recording summary text selection action.

## Example

```tsx TypeScript
import {type CallRecordingSummaryTextSelectionAction, showDialog} from "attio/client"
import {ProcessCallSummaryDialog} from "./your-code"

export const callRecordingSummaryTextSelectionAction: CallRecordingSummaryTextSelectionAction =
  {
    id: "process-call-summary",
    label: "Process summary",
    onTrigger: async ({ markdown, text }: {
      markdown: string
      text: string
    }) => {
      await showDialog({
          title: "Process call summary",
          Dialog: ({hideDialog}: {hideDialog: () => void}) => {
            return (
              <ProcessCallSummaryDialog
                markdown={markdown}
                text={text}
                onDone={hideDialog}
              />
            )
          },
        })
    },
  }
```

## Arguments

<ParamField path="id" type="string" required>
  The unique identifier for this call recording summary selection action.

  It is only used internally; never shown to the user.
</ParamField>

<ParamField path="label" type="string" required>
  A human-readable label of the call recording summary selection action that will be shown to the user when they make a text selection on a call recording summary.
</ParamField>

<ParamField path="icon" type="string">
  An [`AttioIcon`](./icons) to display beside the label.

  <Tip>
    If no `icon` prop is provided, it will default to your app's icon that you set up in the
    [Developer dashboard](https://build.attio.com).
  </Tip>
</ParamField>

<ParamField path="onTrigger" type="async (selection: {text: string; markdown: string}) => Promise<void>">
  The function to run when the action is triggered. You'll likely want to [show a
  dialog](../dialogs/show-dialog) or run a [server function](../server/server-functions) here.

  The function will be given an object containing:

  * `markdown` – a markdown respresentation of the text selected (e.g. may include bullet points)
  * `text` – the plain text of the text selected
</ParamField>


# CallRecordingTranscriptTextSelectionAction
Source: https://docs.attio.com/sdk/entry-points/call-recording-transcript-text-selection-action

Call recording transcript text selection actions are a way to perform an action based on a text selection on a call recording transcript.

export const ExperimentalWarning = ({api}) => <Note>
      The <code>{api}</code> API is experimental and may change in the future. It has been
      marked as <code>@deprecated</code> to remind the developer that it is
      experimental. <strong>It is <em>not</em> "deprecated", just experimental.</strong> Please
      don't use it in production versions of your app. We do not guarantee backward compatibility,
      or that the API will remain stable.
    </Note>;

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-transcript.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=b6291a66e6ba6fe498dcb760a1abf087" width="1440" height="880" data-path="images/text-selection-transcript.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-transcript.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=db658e8b2d2c66a27d44448a366aba51 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-transcript.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=3dbaf29cdb0c2b66a065e90b7fcd8c7c 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-transcript.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=5136907f2696a82b9af7803a86b307c7 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-transcript.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=3baef56e790accb12c0b97ab229d6e55 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-transcript.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=1f906685bba14f977f6382a95b3df60a 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-transcript.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=804ac1e5ef50d1cd9a0723892a8c8769 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-transcript-dark.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=d528fb6107e01cfaad869bc4f7118e7b" width="1440" height="880" data-path="images/text-selection-transcript-dark.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-transcript-dark.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=0b3efaf3dd50da30bd3f8732e704db36 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-transcript-dark.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=6f9d7a7dfaaba4ff53d4480f10a02d6d 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-transcript-dark.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=2382093a8ca2be6ce5fa84e92545611b 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-transcript-dark.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=178ee337f6d2b0ca9bda5ac56acca859 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-transcript-dark.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=ec3c812b2c6efe7a30ed5a683e91c515 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-selection-transcript-dark.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=bebe4bfcf7faf82e742809e7a3679559 2500w" data-optimize="true" data-opv="2" />

<ExperimentalWarning api="CallRecordingTranscriptTextSelectionAction" />

```ts
import {type CallRecordingTranscriptTextSelectionAction} from "attio/client"
```

Any file with a
[named export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#using_named_exports)
of `callRecordingTranscriptTextSelectionAction` will register a call recording transcript text selection action.

## Example

```tsx TypeScript
import {type CallRecordingTranscriptTextSelectionAction, showDialog} from "attio/client"
import {ProcessCallTranscriptDialog} from "./your-code"

export const callRecordingTranscriptTextSelectionAction: CallRecordingTranscriptTextSelectionAction =
  {
    id: "process-call-transcript",
    label: "Process transcript",
    onTrigger: async ({
      transcript,
      url,
    }: {
      transcript: {speaker: string; text: string}[]
      url: string
    }) => {
      await showDialog({
          title: "Process call transcript",
          Dialog: ({hideDialog}: {hideDialog: () => void}) => {
            return (
              <ProcessCallTranscriptDialog
                transcript={transcript}
                url={url}
                onDone={hideDialog}
              />
            )
          },
        })
    },
  }
```

## Arguments

<ParamField path="id" type="string" required>
  The unique identifier for this call recording transcript selection action.

  It is only used internally; never shown to the user.
</ParamField>

<ParamField path="label" type="string" required>
  A human-readable label of the call recording transcript selection action that will be shown to the user when they make a text selection on a call recording transcript.
</ParamField>

<ParamField path="icon" type="string">
  An [`AttioIcon`](./icons) to display beside the label.

  <Tip>
    If no `icon` prop is provided, it will default to your app's icon that you set up in the
    [Developer dashboard](https://build.attio.com).
  </Tip>
</ParamField>

<ParamField path="onTrigger" type="async (selection: { transcript: Array<{ speaker: string text: string }>, url: string }) => Promise<void>">
  The function to run when the action is triggered. You'll likely want to [show a
  dialog](../dialogs/show-dialog) or run a [server function](../server/server-functions) here.

  The function will be given an object containing:

  * `transcript` – the portion of the transcript that was selected, with speaker information
  * `url` – a url linking directly back to the call recording transcript section selected
</ParamField>


# RecordAction
Source: https://docs.attio.com/sdk/entry-points/record-action

Registers an action for records in Attio

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/record-action.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=5aa155a7e072505e191cf4106d79a314" width="1440" height="880" data-path="images/record-action.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/record-action.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=814822a7130aec689643d081de45a2ad 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/record-action.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=c4dce88a05040bab56f1fbbbba9cc45c 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/record-action.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=2c336cdd0f45848a8c413ad4f92604d6 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/record-action.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=30dfcf2fc9adfaa8cab0c62a3d08b5ce 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/record-action.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=a96df25ac2d93609039135c678f802d1 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/record-action.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=a4c1d07735aa9c84bdb4325fe6eceea9 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/record-action-dark.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=7eef3b679a0df3e281616fa1cc45313d" width="1440" height="880" data-path="images/record-action-dark.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/record-action-dark.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=df93a8ca364c364786fd9db557b06fde 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/record-action-dark.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=1e4d8bfa7f7206734ddfcb924e8c3ebb 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/record-action-dark.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=9a2fb5fd2856f92def2a3fafa661e097 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/record-action-dark.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=f50737363269e39f108230b043386fa8 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/record-action-dark.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=45a9407b64036235707892340f6f5cb5 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/record-action-dark.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=afe6a94b98bc6b58c8905f283527502b 2500w" data-optimize="true" data-opv="2" />

Record actions are rendered:

* on Record pages in Attio
* in the CMD+K quick action palette.

```ts
import {type RecordAction} from "attio/client"
```

Any file with a
[named export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#using_named_exports)
of `recordAction` will register a record action

## Example

```tsx TypeScript
import type {RecordAction} from "attio/client"

export const recordAction: RecordAction = {
  id: "send-invoice",
  label: "Send Invoice",
  icon: "Sales",
  onTrigger: async ({recordId}) => {
    // Run code here
  },
  objects: "people",
}
```

## Arguments

<ParamField path="id" type="string" required>
  The unique identifier for this action.

  It is only used internally; never shown to the user.
</ParamField>

<ParamField path="label" type="string" required>
  The human readable label for the record action.
</ParamField>

<ParamField path="icon" type="AttioIcon | string">
  An icon to display in the action, either an [`AttioIcon`](./icons) or
  a string `.png` referencing a file in your app's `assets` directory.

  <Tip>
    If no `icon` prop is provided, it will default to your app's icon that you set up in the
    [Developer dashboard](https://build.attio.com).
  </Tip>
</ParamField>

<ParamField path="onTrigger" type="async ({ recordId: string }) => Promise<void>">
  The function to run when the action is triggered. You'll likely want to [show a
  dialog](../dialogs/show-dialog) or run a [server function](../server/server-functions) here.
</ParamField>

<ParamField path="objects" type="ObjectSlug | Array<ObjectSlug>">
  A single slug or an array of slugs to select which types of record the record action will apply to.

  Defaults to `undefined`, which will cause the action to show on ***all*** types of records.

  The built-in slugs are

  * [`"companies"`](../../docs/standard-objects/standard-objects-companies)
  * [`"people"`](../../docs/standard-objects/standard-objects-people)
  * [`"deals"`](../../docs/standard-objects/standard-objects-deals)
  * [`"users"`](../../docs/standard-objects/standard-objects-users)
  * [`"workspaces"`](../../docs/standard-objects/standard-objects-workspaces)
</ParamField>


# RecordWidget
Source: https://docs.attio.com/sdk/entry-points/record-widget

Record Widgets are way to show information on record pages.

export const ExperimentalWarning = ({api}) => <Note>
      The <code>{api}</code> API is experimental and may change in the future. It has been
      marked as <code>@deprecated</code> to remind the developer that it is
      experimental. <strong>It is <em>not</em> "deprecated", just experimental.</strong> Please
      don't use it in production versions of your app. We do not guarantee backward compatibility,
      or that the API will remain stable.
    </Note>;

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=905d99548719a1fe3fa5ed50327194c4" width="1440" height="880" data-path="images/text-widget.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=126a8d5ecfb1722483163e4f2bab0ecc 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=b1bf149dc32c27e77ba9ae9f7c3f5d09 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=88acf1585887898c3815b792daf34fa3 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=146f07c9e7db168dc6aa8016a14de374 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=05b6ade4e65606e105eddfc8092955ee 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=16a5358cb369d5f7df67497fc0f5d625 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=effd70a15c784e18ba183266c5b0dc5a" width="1440" height="880" data-path="images/text-widget-dark.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=44ef5e2c8c189f1323158cce821733ae 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=86ff65c41895b736c3fda39cca906894 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=b510e92fd32100bded4bb7cb204d4392 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=5c5f72bde14ee46eefc55a4824881429 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=4840043856c4578210fbf35d52994619 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/text-widget-dark.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=3a091da7f8ae010b152ad32b875da3cf 2500w" data-optimize="true" data-opv="2" />

<ExperimentalWarning api="Widget" />

```ts
import {type RecordWidget} from "attio/client"
```

Any file with a
[named export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#using_named_exports)
of `recordWidget` will register a record widget

<Note>
  Before your record widget will appear on a record page, you will need to go to "Configure page",
  click on "Add Widget", and select your widget.
</Note>

## Example

```tsx TypeScript
import React from "react"
import {type RecordWidget, Widget} from "attio/client"
import {useMyArrQuery} from "your-code-somewhere.ts"

const ArrWidget = ({recordId} : {recordId: string}) => {
  const { arr, delta } = useMyArrQuery(recordId) // may suspend!
  return (
    <Widget.TextWidget>
      <Widget.Title>ARR</Widget.Title>
      <Widget.Text.Primary>{arr}</Widget.Text.Primary>
      <Widget.Badge text={delta} color={delta < 0 ? "red" : "green"}/>
    </Widget.TextWidget>
  )
}

export const recordWidget: RecordWidget = {
  id: "company-arr",
  label: "ARR",
  Widget: ({recordId}) => {
    return (
      <React.Suspense fallback={<Widget.Loading />}>
        <ArrWidget recordId={recordId}/>
      </React.Suspense>
    )
  },
  objects: "companies" // only show on company records
}
```

<Note>
  The widget will always display your app’s icon, which you set in the [Developer
  dashboard](https://build.attio.com).
</Note>

## Arguments

<ParamField path="id" type="string" required>
  The unique identifier for this widget.

  It is only used internally; never shown to the user.
</ParamField>

<ParamField path="label" type="string" required>
  A human-readable label of the widget that will be shown to the user in the widget picker.
</ParamField>

<ParamField path="color" type="string">
  The base hexadecimal color of the gradient displayed in the background of the widget.
</ParamField>

<ParamField path="Widget" type="(props: { recordId: string, object: ObjectSlug }) => React.ReactNode" required>
  A React component that will render the widget.

  It can suspend while loading data.

  Must return a one of the following components as the root element:

  * [`Widget.Loading`](../components/widgets/loading)
  * [`Widget.TextWidget`](../components/widgets/text-widget)
</ParamField>

<ParamField path="objects" type="ObjectSlug | Array<ObjectSlug>">
  A single slug or an array of slugs to select which types of record the record action will apply to.

  Defaults to `undefined`, which will cause the action to show on ***all*** types of records.

  The built-in slugs are

  * [`"companies"`](../../docs/standard-objects/standard-objects-companies)
  * [`"people"`](../../docs/standard-objects/standard-objects-people)
  * [`"deals"`](../../docs/standard-objects/standard-objects-deals)
  * [`"users"`](../../docs/standard-objects/standard-objects-users)
  * [`"workspaces"`](../../docs/standard-objects/standard-objects-workspaces)
</ParamField>


# Form schema
Source: https://docs.attio.com/sdk/form-schema

Defines the shape of your form data

```js
import {Forms} from "attio/client"
```

The schema is formed using the [builder pattern](https://howtodoinjava.com/design-patterns/creational/builder-pattern-in-java/). Objects can be nested arbitrarily deep.

## Example

```js
const schema = {
  name: Forms.string(),
  note: Forms.string().multiline(),
  nickname: Forms.string().optional(),
  age: Forms.number().min(18),
  numTokens: Forms.number().max(100),
  phoneNumbers: Forms.array(Forms.string()),
  addresses: Forms.array({
    street: Forms.string(),
    city: Forms.string(),
  }),
  meetingAt: Forms.dateTime()
    .min(new Date("2025-01-01"), {message: "Meeting must be on or after Jan 1, 2025"})
    .max(new Date("2025-12-31"), {message: "Meeting must be on or before Dec 31, 2025"}),
  dateOfBirth: Forms.plainDate().optional(),
}
```

The allowed `FormValue`s are:

## `Forms.string()`

A string value. Required by default.

### Mutators

`.default(value : string)`

Sets a default value to return when no value is entered by the user.

<Warning>
  This is ***NOT*** the same as an “initial value”, which should be passed to the
  [`useForm()`](./hooks/use-form) hook.
</Warning>

`.multiline()`

Will cause the string input to be multiline.

<Info>
  A `<textarea />` rather than an `<input type="text" />` in DOM-speak
</Info>

`.url(options?: { protocol: RegExp; message?: string})`

Validates that the string is a valid URL with an allowed protocol (default http/https) and a valid top-level domain. You can override the allowed protocol via `options.protocol`.

`.optional()`

By default, strings are required. This will change that to let `null`, `undefined`, and `""` pass validation.

## `Forms.number()`

A numeric value. Required by default.

### Mutators

`.default(value : number)`

Sets a default value to return when no value is entered by the user.

<Warning>
  This is ***NOT*** the same as an “initial value”, which should be passed to the
  [`useForm()`](./hooks/use-form) hook.
</Warning>

`.optional()`

By default, numbers are required. This will change that to let `null` and `undefined` pass validation.

`.min(min: number)`

Provide a minimum value. Validation will fail if the user inputs number `< min`.

`.max(max: number)`

Provide a maximum value. Validation will fail if the user inputs number `> max`.

## `Forms.array(FormValue | Record<string, FormValue>)`

An array of other form values or objects of form values.

<Info>They are referenced with a `name` prop like `"addresses[0].street"`.</Info>

### Mutators

`.optional()`

By default, arrays are required. This will change that to let `undefined` pass validation.

## Forms.dateTime()

A date and time value. Required by default.

### Mutators

`.default(value: Date)`

Sets a default value to return when no value is entered by the user.

<Warning>
  This is ***NOT*** the same as an “initial value,” which should be passed to the
  [`useForm()`](./hooks/use-form) hook.
</Warning>

`.optional()`

By default, dateTimes are required. This changes the behavior to allow `undefined` to pass validation.

`.min(date: Date, options?: { message?: string })`

Sets a minimum date. Validation will fail if the user inputs a date earlier than the given date.\
You can override the default error message with `options.message`.

`.max(date: Date, options?: { message?: string })`

Sets a maximum date. Validation will fail if the user inputs a date later than the given date.\
You can override the default error message with `options.message`.

## Forms.plainDate()

A date string in ISO 8601 format (YYYY-MM-DD). Required by default.

### Mutators

`.default(value: string)`

Sets a default value to return when no value is entered by the user.

<Warning>
  This is ***NOT*** the same as an “initial value,” which should be passed to the
  [`useForm()`](./hooks/use-form) hook.
</Warning>

`.optional()`

By default, plainDates are required. This changes the behavior to allow `undefined` to pass validation.


# Using GraphQL
Source: https://docs.attio.com/sdk/graphql/graphql

Querying Attio data on the client via GraphQL

## API

The Attio client SDK provides a typesafe way to query record data via GraphQL.

There are two main functions for this. Which you choose to use is a design decision of your app.

### [`runQuery`](./run-query)

An imperative asynchronous function to query record data.

### [`useQuery`](./use-query)

A suspenseful hook to query record data.

## Writing GraphQL Queries

When you run `npx attio dev` to develop your app, you will be prompted to
`Press "o" to open GraphQL Explorer.`. If you do press `o`, it will open an
instance of
[GraphiQL](https://github.com/graphql/graphiql/tree/main/packages/graphiql#graphiql).

GraphiQL will help you explore the schema as well as autocomplete your query as you type.

<Warning>
  The GraphiQL instance is not hooked up to any data source!

  Pressing the ▶️ button to execute the query will return `null` if there are no errors.
</Warning>

### Query composing example

<img width="1304" height="866" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/graphiql-light.gif?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=3ba407b34492cee394cf3dc9662f92bc" className="w-full block dark:hidden" width="1304" height="866" data-path="images/graphiql-light.gif" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/graphiql-light.gif?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=81f500f0a5f920a0a565f67223e779c8 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/graphiql-light.gif?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=16539fba2195ff5554619d0aa7aae9df 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/graphiql-light.gif?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=caa4d5854bad65950a06f23b87a7ff10 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/graphiql-light.gif?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=c3a986c7fd3933c24fbf212523fefa70 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/graphiql-light.gif?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=9a8c547a51758088f46697471f91f7dc 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/graphiql-light.gif?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=cdf70cf42c0f04e2a9d806598c25b430 2500w" data-optimize="true" data-opv="2" />

<img width="1304" height="866" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/graphiql-dark.gif?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=89224abc5fc97c2f85b9f035b4f21459" className="w-full hidden dark:block" width="1304" height="866" data-path="images/graphiql-dark.gif" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/graphiql-dark.gif?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=e84935d63a7c0c33d33c8610c856dfe4 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/graphiql-dark.gif?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=d227ecfcf830daee3810c8e67ceb18e9 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/graphiql-dark.gif?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=7b9c26cc038c3d5e103e1dcb1cecdea1 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/graphiql-dark.gif?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=dd99d2ba6ee20a01441312a92e3e837b 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/graphiql-dark.gif?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=6ef220f76c50ada486d670a49289b247 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/graphiql-dark.gif?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=d61939f83329b67a6f55d1c741405e98 2500w" data-optimize="true" data-opv="2" />

## Example Queries

<AccordionGroup>
  <Accordion title="Get information about the current user">
    ```graphql
    query getCurrentUser {
      currentUser {
        id
        name
        email
      }
    }
    ```
  </Accordion>

  <Accordion title="Get email addresses for the current person record">
    ```graphql
    query getPersonEmailAddresses($recordId: String!) {
      person(id: $recordId) {
        email_addresses
      }
    }
    ```
  </Accordion>

  <Accordion title="Get the names and email addresses of people at the current company record">
    ```graphql
    query getTeam($recordId: String!) {
      company(id: $recordId) {
        team {
          name {
            full_name
          }
          email_addresses
        }
      }
    }
    ```
  </Accordion>
</AccordionGroup>

## TypeScript Code-Gen

`runQuery()` and `useQuery()` will accept just a `string` as your query, but if you write your
query in a separate file with the `.graphql` or `.gql` extension, you can then `import` your
query into your TypeScript file. If you pass the imported query to these functions, your results
will be strongly typed. The code generator will look for query files as long as you are runnning
`npx attio dev`.

Let's look at an example:

<CodeGroup>
  ```graphql getCurrentUser.graphql
  query getCurrentUser {
    currentUser {
      id
      name
      email
    }
  }
  ```

  ```typescript getCurrentUser.graphql.d.ts
  /**
   * ****************************************************
   * THIS FILE IS AUTO-GENERATED AT DEVELOPMENT TIME.
   *
   * DO NOT EDIT DIRECTLY OR COMMIT IT TO SOURCE CONTROL.
   * ****************************************************
   */
  import { Query } from "attio/client";

  type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };

  declare module "./getCurrentUser.graphql" {
  export type GetCurrentUserQueryVariables = Exact<{ [key: string]: never }>;

  export type GetCurrentUserQuery = {
  currentUser: { id: string; name: string; email: string };
  };

  const value: Query<GetCurrentUserQueryVariables, GetCurrentUserQuery>;
  export default value;
  }

  ```

  ```typescript usage.tsx
  import {runQuery} from "attio/client"
  import getCurrentUser from "./getCurrentUser.graphql"

  ...

  const {currentUser} = await runQuery(getCurrentUser)

  // currentUser is of type { id: string, name: string, email: string }
  ```
</CodeGroup>

## Custom Attributes

Custom attributes can be loaded via GraphQL with their slug. The slug can be found under
the kebab menu for the custom attribute in Workspace Settings.

<img width="820" height="564" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/copy-slug-light.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=6ea8f94ea46fdc79212579f134f56766" className="w-full block dark:hidden" width="1640" height="1128" data-path="images/copy-slug-light.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/copy-slug-light.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=4d5aed8b894311e2adcd294ba691bdc3 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/copy-slug-light.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=6633747279a07fff884d39e8567f96b0 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/copy-slug-light.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=2f73c90bb275b74e7b3fb2cfc6cc952a 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/copy-slug-light.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=362bdfbb841a2d896fd2fd28f3c6c96e 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/copy-slug-light.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=64834a26d7c382088f4b5eacb4e9c615 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/copy-slug-light.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=e1d4087e3b7746424c2f619472694fef 2500w" data-optimize="true" data-opv="2" />

<img width="820" height="564" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/copy-slug-dark.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=461d39e7687f40cf316bf7a2d9767132" className="w-full hidden dark:block" width="1640" height="1128" data-path="images/copy-slug-dark.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/copy-slug-dark.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=7a738874c84b02b5e494951c1ea7a21c 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/copy-slug-dark.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=e857965e069e47a23f68e198f64fe78f 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/copy-slug-dark.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=b1b25f324fa49e877a524f27268a1964 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/copy-slug-dark.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=07a0e6a7a725b5f57f4629b7341cab42 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/copy-slug-dark.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=dd02443be14742f8dc85fbf40b16a226 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/copy-slug-dark.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=bdee90bebda7ce382ae2a68cecf2ad6f 2500w" data-optimize="true" data-opv="2" />

You can then use that slug in your GraphQL query like so:

```graphql get-bluesky.graphql
query getBlueSky($recordId: String!, $slug: String!) {
  person(id: $recordId) {
    attribute(slug: $slug) {
      __typename
      ... on TextValue {
        value
      }
    }
  }
}
```

<Warning>
  You *must* include `__typename` and the `... on` syntax to match the type of the attribute you are
  querying.
</Warning>

To please TypeScript, you will need check the `__typename` before reading the value.

```typescript
const {person} = useQuery(getBlueSky, {recordId, slug: "bluesky"})

const blueSkyValue = person?.attribute?.__typename === "TextValue" ? person.attribute.value : null
```

## Advanced Usage

### Fragments

Some queries can return multiple types of objects. The way this is handled in GraphQL
is with [fragments](https://graphql.org/learn/queries/#fragments) and by querying
`__typename` and then `switch`ing on its value.

The `record` query takes a record id and an object type and returns the matching object.
Those variables happen to be *exactly* what the `onTrigger()` function on our
[record action](../entry-points/record-action) is given.

<CodeGroup>
  ```graphql get-record.gql
  query getRecord($recordId: String!, $object: String!) {
    record(id: $recordId, object: $object) {
      id
      __typename
      url
      ...PersonFragment
      ...CompanyFragment
      ...DealFragment
      ...UserFragment
      ...WorkspaceFragment
    }
  }

  fragment PersonFragment on Person {
    personName: name {
      full_name
    }
  }

  fragment CompanyFragment on Company {
    companyName: name
  }

  fragment DealFragment on Deal {
    dealName: name
  }

  fragment UserFragment on UserRecord {
    person {
      ...PersonFragment
    }
  }

  fragment WorkspaceFragment on WorkspaceRecord {
    workspaceName: name
  }

  ```

  ```typescript example-record-action.tsx
  import { RecordAction, runQuery } from "attio/client"
  import getRecordQuery from "./get-record.gql"
  import type {GetRecordQuery} from "./get-record.gql"

  function getName(record: GetRecordQuery["record"]) {
    switch (record?.__typename) {
      case "Person":
        return record.personName?.full_name ?? null
      case "Company":
        return record.companyName ?? null
      case "Deal":
        return record.dealName ?? null
      case "WorkspaceRecord":
        return record.workspaceName ?? null
      case "UserRecord":
        return record.person?.personName?.full_name ?? null
      default:
        return null
    }
  }

  export const recordAction: RecordAction = {
      id: "example",
      label: "Example",
      onTrigger: async ({recordId, object}) => {
        const {record} = await runQuery(getRecordQuery, {recordId, object})
        const name = getName(record)

        // do something with the name
      },
  }
  ```

  ```typescript example-record-action.jsx
  import {RecordAction, runQuery} from "attio/client"
  import getRecordQuery from "./get-record.gql"

  function getName(record) {
    switch (record?.__typename) {
      case "Person":
        return record.personName?.full_name ?? null
      case "Company":
        return record.companyName ?? null
      case "Deal":
        return record.dealName ?? null
      case "WorkspaceRecord":
        return record.workspaceName ?? null
      case "UserRecord":
        return record.person?.personName?.full_name ?? null
      default:
        return null
    }
  }

  export const recordAction = {
    id: "example",
    label: "Example",
    onTrigger: async ({recordId, object}) => {
      const {record} = await runQuery(getRecordQuery, {recordId, object})
      const name = getName(record)

      // do something with the name
    },
  }
  ```
</CodeGroup>


# runQuery()
Source: https://docs.attio.com/sdk/graphql/run-query

Imperatively run an asynchronous GraphQL query

```js
import {runQuery} from "attio/client"
```

## Parameters

<ParamField path="query" type="string" required>
  A GraphQL query string.

  <Tip>
    If you're using TypeScript and \[default] `import` this value from a `.graphql` or `.gql` file,
    the variables and return value with be strongly typed.

    [Read more](./graphql#typescript-code-gen).
  </Tip>
</ParamField>

<ParamField path="variables" type="Record<string, any>">
  The named variables your query accepts. If your query has no variables, you needn't pass any.
</ParamField>

## Returns

<ResponseField name=" " type="Promise<Record<string, any>>">
  A `Promise` to the structured JSON as defined by your query.
</ResponseField>


# useQuery()
Source: https://docs.attio.com/sdk/graphql/use-query

A suspensful hook to run a GraphQL query

<Note>
  Not to be confused with the popular [TanStack
  `useQuery()`](https://tanstack.com/query/latest/docs/framework/react/reference/useQuery) of
  [Apollo `useQuery()`](https://www.apollographql.com/tutorials/lift-off-part1/10-the-usequery-hook)
  hooks; this hook is custom to the Attio runtime for running GraphQL queries against the [Attio
  GraphQL Schema](../graphql/graphql).
</Note>

```js
import {useQuery} from "attio/client"
```

<Warning>
  While the query is running, the component that uses this hook will "suspend".

  You *MUST* wrap the component in a
  [`<React.Suspense/>`](https://react.dev/reference/react/Suspense) component
  and give it a `fallback` component to render until the query has completed.
</Warning>

If you use more than one `useQuery()` hook in a component, ***they will be executed in sequence,
not parallel!*** Sometimes this is desired, but sometimes you might want to
[run them in parallel](#running-in-parallel).

## Parameters

### `query : string`

A GraphQL query string.

<Tip>
  If you're using TypeScript and \[default] `import` this value from a `.graphql` or `.gql` file,
  the variables and return value with be strongly typed.

  [Read more](../graphql/graphql).
</Tip>

### `variables? : Record<string, any>`

The named variables your query accepts. If your query has no variables, you needn't pass any.

## Returns

### `Record<string, any>`

The structured JSON as defined by your query.

## Running in parallel

If you need to run multiple GraphQL queries in parallel, this can be accomplished with a combination
of [`runQuery()`](../graphql/run-query) and [`useAsyncCache()`](../hooks/use-async-cache) like so:

<CodeGroup>
  ```typescript meet-person.tsx
  import React from "react"
  import {runQuery, TextBlock, useAsyncCache} from "attio/client"
  import getPersonName from "./get-person-name.graphql"
  import getCurrentUser from "./get-current-user.graphql"

  export function MeetPerson({ recordId }: { recordId: string }) {
    // Will run in parallel and suspend until both queries have returned
    const { values } = useAsyncCache({
      currentUserResult: async () => await runQuery(getCurrentUser),
      personResult: async () => await runQuery(getPersonName, { recordId })
    })
    const currentUserName : string =
      values.currentUserResult.currentUser.name
    const personName : string | null | undefined =
      values.personResult.person?.name?.full_name

  return (

  <TextBlock>
    {personName ?? "Unknown"} would like to meet with {currentUserName}.
  </TextBlock>
  ) }

  ```

  ```typescript meet-person.jsx
  import React from "react"
  import {runQuery, TextBlock, useAsyncCache} from "attio/client"
  import getPersonName from "./get-person-name.graphql"
  import getCurrentUser from "./get-current-user.graphql"

  export function MeetPerson({ recordId }) {
    // Will run in parallel and suspend until both queries have returned
    const { values } = useAsyncCache({
      currentUserResult: async () => await runQuery(getCurrentUser),
      personResult: async () => await runQuery(getPersonName, { recordId })
    })
    const currentUserName = values.currentUserResult.currentUser.name
    const personName = values.personResult.person?.name?.full_name

    return (
      <TextBlock>{personName ?? "Unknown"} would like to meet with {currentUserName}.</TextBlock>
    )
  }
  ```

  ```graphql get-current-user.graphql
  query getCurrentUser {
    currentUser {
      name
    }
  }
  ```

  ```graphql get-person-name.graphql
  query getPersonName($recordId: String!) {
    person(id: $recordId) {
      name {
        full_name
      }
    }
  }
  ```
</CodeGroup>


# Authenticating to external services
Source: https://docs.attio.com/sdk/guides/authenticating-to-external-services

How to use Connections to authenticate users to external services

Connections are a way to authenticate Attio users to external services.
You simply setup a connection configuration in the [Developer Portal](https://build.attio.com) and App SDK will handle that your users are authenticated to the external service.
You will be able to retrieve the connection value whether it's a secret or an access token in your server functions.

## Example: Authenticating to an external mail sequencing API

To get started, head to the [Developer Portal](https://build.attio.com) and open the Connections tab for your app.

Enable either a **User** or **Workspace** connection:

* **User connections** authenticate with external services on behalf of individual users.
  Use this if you want to track who performed an action, for example, who added a prospect to a sequence.
* **Workspace connections** authenticate on behalf of the entire workspace.
  These are easier for Attio users to set up, since only one person in the workspace needs to authenticate with the external service.
  However, if you want to track who performed an action, you'll need to enable a user connection.

<Note>It's possible to enable both connection types, though most apps only require one.</Note>

Once you have enabled a connection, you can retrieve the connection value in your server functions.
We can modify the example from [Making HTTP requests](./making-http-requests) to use a connection to authenticate to the external mail sequencing API, instead of using a hardcoded API key.

```ts add-to-sequence.server.ts
// You will need to call the correct function
// based on the connection type you've enabled
import {getUserConnection, getWorkspaceConnection} from "attio/server"

export default async function addToSequence({
  email,
  sequenceId,
  mailboxId,
}: {
  email: string
  sequenceId: number
  mailboxId: number
}): Promise<Record<string, string>> {
  const response = await fetch(`https://emailsequencingtool.com/api/v1/sequences`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      // ℹ️ Here we are using User connection instead of hardcoded API key
      "Authorization": `Bearer ${getUserConnection().value}`,
    },
    body: JSON.stringify({email, sequenceId, mailboxId}),
  })

  if (!response.ok) {
    throw new Error(`Failed to add prospect to sequence: ${await response.text()}`)
  }

  // ℹ️ better to parse with a tool like Zod than to cast
  const body: {data: Record<string, string>} = await response.json()

  return body.data
}
```

When a user is not authenticated with the external service, calling `getUserConnection`/`getWorkspaceConnection` will throw an error.
The App SDK handles this for you by catching the error and showing a prompt that asks the user to connect their account.


# Building forms
Source: https://docs.attio.com/sdk/guides/building-forms

How to build and validate forms

Forms can be displayed inside [dialogs](../dialogs/show-dialog) using components
returned from [`useForm()`](../hooks/use-form), which is given a
[form schema](../form-schema).

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=8382f7d690adc03b3bde9da44d844d5b" width="1440" height="880" data-path="images/dialog.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=6f7a41e77554b7e105c00d78e9dbb311 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=6ac7b7cf4f7229eb2284821781ff4c6b 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=bcf80cb3072efd48182cb25e17b520ce 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=5a571967156ed6406de877ff55a33f01 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=da4b14b4709ef6290379052751ffa9b3 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=6ade8278ab19cea21a68619533e5eff4 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog-dark.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=152f14974743b47e31894f064e6e75a3" width="1440" height="880" data-path="images/dialog-dark.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog-dark.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=8e26b76d38114daff00a7695b95eb8b9 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog-dark.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=c0573bed407b10254cc839bb4e978bde 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog-dark.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=73f06e33b33cda37e916e22d89622ca0 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog-dark.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=7f0612667a2639f6083efa3817c27cc4 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog-dark.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=9aa5a1e17dd11c02d776eb306a20ebbe 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/dialog-dark.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=ff523ee4421f0a7384f53c063293edb6 2500w" data-optimize="true" data-opv="2" />

## Example: Simple Form

```typescript simple-form.tsx
import {Forms, useForm, showToast} from "attio/client"

// Form schema is constant (it cannot be changed via props)
// so we should define it outside of the component
const formSchema = {
  title: Forms.string(),
  url: Forms.string().url(),
  age: Forms.number().min(18),
  approved: Forms.boolean(),
  subscribed: Forms.boolean(),
}

export function SimpleFormDialog({ onDone } : { onDone: () => void }){
  const {
    Form,
    TextInput,
    NumberInput,
    Checkbox,
    Toggle,
    SubmitButton,
  } = useForm(formSchema,
    {
      // These default values are required because these strings are required
      title: "",
      url: "",
      // No defaults are obligatory for required numbers or booleans
      // They default to 0 and false respectively
    },
  );
  return (
    <Form
      onSubmit={async (values) => {
        // Usually you'd call a server function here
        await showToast({
          title: "Form submitted",
          variant: "success",
          text: JSON.stringify(values, null, 2),
        });
        onDone()
      }}
    >
      {/* These `name` props are strongly typed to your form schema */} 
      <TextInput label="Title" name="title" />
      <TextInput label="URL" name="url" />
      <NumberInput label="Age" name="age" />
      <Checkbox label="Approved" name="approved" />
      <Toggle label="Subscribed" name="subscribed" />
      {/* A `<SubmitButton/>` is required as a direct child of `<Form/>`. */} 
      {/* No matter where you place it, it will be */} 
      {/* rendered in the footer of the dialog. */} 
      <SubmitButton label="Submit" />
    </Form>
  );
}
```

The process to create a form is:

1. Create a [form schema](../form-schema)
2. Destructure the form components you need from [`useForm()`](../hooks/use-form)
3. Wrap your form inputs in the `<Form/>` tag
4. Define your `onSubmit` function in `<Form/>`

## Example: Complex Validation

Sometimes you may need to add more complex validation than a static schema can express.
For example, you might want to ensure that the minimum value is less than the maximum value.
You can achieve this by passing a validation function to `useForm()`.

```typescript complex-validation.tsx
import {Forms, useForm, showToast} from "attio/client"

// Form schema is constant (it cannot be changed via props)
// so we should define it outside of the component
const formSchema = {
  min: Forms.number().min(0).max(100),
  max: Forms.number().min(0).max(100),
}

export function ComplexValidationDialog({ onDone } : { onDone: () => void }){
  const {
    Form,
    NumberInput,
    SubmitButton,
  } = useForm(formSchema,
    {},
    // As a third parameter to useForm(), you can pass a validation function
    // that takes all the form values and returns errors in the same shape
    // as the form values.
    (values) => {
      const errors = {} // empty errors object means validation passes
      if(values.min > values.max) {
        errors.min = "Must be less than max"
        errors.max = "Must be greater than than min"
      }
      return errors
    }
  );
  return (
    <Form
      onSubmit={async (values) => {
        // Usually you'd call a server function here
        await showToast({
          title: "Form submitted",
          variant: "success",
          text: JSON.stringify(values, null, 2),
        });
        onDone()
      }}
    >
      {/* These `name` props are strongly typed to your form schema */} 
      <NumberInput label="Minimum" name="min" />
      <NumberInput label="Maximum" name="max" />
      {/* A `<SubmitButton/>` is required as a direct child of `<Form/>`. */} 
      {/* No matter where you place it, it will be */} 
      {/* rendered in the footer of the dialog. */} 
      <SubmitButton label="Submit" />
    </Form>
  );
}
```

Related API documentation:

* [`showDialog()`](../dialogs/show-dialog)
* [`useForm()`](../hooks/use-form)
* [Form schema](../form-schema)


# Creating an app
Source: https://docs.attio.com/sdk/guides/creating-an-app

Learn how to build your first app with the App SDK

<Steps>
  <Step title="Create a developer account">
    Head over to our [Developer dashboard](https://build.attio.com) and sign in with your Attio account.

    <img className="dark:hidden" width="640" height="450" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/build-attio-screenshot.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=1b83eb3812e896c7f7f445a510729fdd" width="1280" height="900" data-path="images/build-attio-screenshot.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/build-attio-screenshot.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=9c6a8feb27103ffb8d2951f64d627f28 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/build-attio-screenshot.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=443d1d8e2bfff557e717169a14f27cd0 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/build-attio-screenshot.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=5a44ec8882b89f9a88226520598b4de5 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/build-attio-screenshot.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=979a29a766cae939231eab80869b705a 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/build-attio-screenshot.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=a025f1dbbb73887270c9c79458447ef1 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/build-attio-screenshot.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=c3beece81ea34d9bf4778216ab68f00b 2500w" data-optimize="true" data-opv="2" />

    <img className="hidden dark:block" width="640" height="450" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/build-attio-screenshot-dark.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=b5388afeb4036738dd61910bccd21b59" width="1280" height="900" data-path="images/build-attio-screenshot-dark.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/build-attio-screenshot-dark.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=26ae08ea11c036a75c3cc61a87e5397f 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/build-attio-screenshot-dark.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=aa768d7029695eec1565871a01a29a30 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/build-attio-screenshot-dark.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=6bffabae0c670c8697dc2daa58235ba9 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/build-attio-screenshot-dark.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=1e32d0c74c736e7bfa231a19fb8063a4 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/build-attio-screenshot-dark.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=20b090e42272df98dcbcf1eddc934cbf 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/build-attio-screenshot-dark.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=11dee940cc5fc0c3677537dc4be3e326 2500w" data-optimize="true" data-opv="2" />

    Then, create a developer account. You should set the name of your account to the name of your company
    or organization.

    <img className="dark:hidden" width="640" height="450" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/developer-account-creation.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=92ee26865339c13468b279d52e3b3098" width="1280" height="900" data-path="images/developer-account-creation.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/developer-account-creation.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=f03e78f79c714a22b8874d811841511c 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/developer-account-creation.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=d4a51ae7348c468448ea34c8a4b3c400 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/developer-account-creation.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=64e5ed6d7e7e6fdf665b46a4961a2465 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/developer-account-creation.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=b78395bfcd2e23eff34473d0cf827ccc 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/developer-account-creation.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=e427ffe6ab5a86c5473a83af571d2e1f 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/developer-account-creation.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=9e71726f630745fa8130a92b920b8e1f 2500w" data-optimize="true" data-opv="2" />

    <img className="hidden dark:block" width="640" height="450" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/developer-account-creation-dark.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=67ecee55a5c3518db59255adb9a59a68" width="1280" height="900" data-path="images/developer-account-creation-dark.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/developer-account-creation-dark.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=55ef6d997916d984fff02baa2550fc41 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/developer-account-creation-dark.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=9d931202ccc5d2423aec38db5e237f92 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/developer-account-creation-dark.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=e404220294129d752c1cef956b00c83a 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/developer-account-creation-dark.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=19385b296dc48b913c13d54277d91e76 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/developer-account-creation-dark.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=0e4261a11a562329e0ddca1eef4f1a08 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/developer-account-creation-dark.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=a76c0abf1287f3013b045a537eaed50d 2500w" data-optimize="true" data-opv="2" />
  </Step>

  <Step title="Create a new app">
    Now that you've created a developer account, lets create an app.

    Fill in the app's name and ensure it has a unique slug.
  </Step>

  <Step title="Initialize your app">
    Now that you've created your app, lets download your apps starter code. You can do this by following the quickstart instructions in the developer dashboard's app information tab, or follow these instructions:

    Fire up your favourite terminal and enter:

    ```bash
    npx attio init [your-app-slug]
    ```

    For example, if your app slug is `my-first-app` you would enter:

    ```bash
    npx attio init my-first-app
    ```

    <Tip>Your app slug can be found on the app details page in our [Developer dashboard](https://build.attio.com).</Tip>
  </Step>

  <Step title="Install dependencies">
    Next you need to `cd` into the newly created project folder and run:

    ```bash
    npm install
    ```
  </Step>

  <Step title="Start development server">
    Now that's complete all that's left to do is start running your app locally. To do this run:

    ```bash
    npx attio dev
    ```

    It will ask you to choose a workspace to develop your app in. Once you choose a workspace you will be redirected to install the app.

    <Tip>We recommend creating a separate workspace for development that isn't your main production Attio workspace.</Tip>
  </Step>

  <Step title="Install your app">
    Once you've chosen a workspace, you'll be asked to press `i` to be directed to the install app page where you can install your app in the chosen workspace.
  </Step>

  <Step title="Try out your app">
    Now that your app is installed lets take a look at the example action we've added to Attio.

    Head over to any record page. Click the three dots overflow menu button and you should see your app's name listed as an option.

    <img className="dark:hidden" width="640" height="450" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/app-action-button.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=27a3165a94691fa038b6d269141bbd80" width="1280" height="900" data-path="images/app-action-button.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/app-action-button.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=6f9caa6e8f15b6821ab89f666d457ba6 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/app-action-button.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=f0c1093174272b1da45b9fd3cfd4838b 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/app-action-button.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=5137143d5040229c729538cfbf998298 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/app-action-button.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=5bc6e2847a40b0e4bd7549098f53c0a1 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/app-action-button.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=ce06a2329d9b7714e5770474dd2f2063 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/app-action-button.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=4f4e0c4fd1de07d20e1b1113592c7c0e 2500w" data-optimize="true" data-opv="2" />

    <img className="hidden dark:block" width="640" height="450" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/app-action-button-dark.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=57f3ce71bc66c1242a4f7e7acda573c4" width="1280" height="900" data-path="images/app-action-button-dark.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/app-action-button-dark.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=5b0cf776a35e3d112188794559a6cfbc 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/app-action-button-dark.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=b2577c149783377d8992a82768eb2a25 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/app-action-button-dark.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=302cac14b76585f8f42d62667b568281 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/app-action-button-dark.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=d46e1577b1554bae81a5a1e113a4f34f 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/app-action-button-dark.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=d4e3b96e241e864959ea955e5a77c0d0 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/app-action-button-dark.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=aa0505abf1aa9af32e690eb53f7b8bc0 2500w" data-optimize="true" data-opv="2" />

    Click it, and it will reveal a dialog.

    Congratulations! Your app is now running inside Attio.
  </Step>

  <Step title="Make changes">
    Lets try editing the dialog code. Head over to `hello-world-dialog.tsx`. And try changing some of the code in the dialog.

    Hit save. Head back to Attio, close your dialog and re-open it by clicking the action button again. You should see your changes live.

    Well done! You're now well on your way to building apps in Attio.
  </Step>
</Steps>


# Debugging your app
Source: https://docs.attio.com/sdk/guides/debugging-your-app

How to debug your app using logging in frontend and server environments

When developing apps with the App SDK, debugging is essential for understanding your app's behavior and fixing issues. You can log messages both in your client and server code.

## Logging

The App SDK supports standard `console` methods that work in both frontend and server environments:

* **`console.log()`** - For general information and debugging output
* **`console.warn()`** - For warnings that don't break functionality but need attention
* **`console.error()`** - For unexpected errors that break functionality for your app's users

```typescript
// Works in both frontend components and server functions
console.log("Server function started")
console.warn("User not found")
console.error("Failed to connect to external API:", error.message)
```

These logs will appear in different places depending on where they're called from. Let's explore where to find your logs.

## Frontend logs

Frontend logs appear in your browser's console. To access them, open the dev tools of your browser and navigate to the Console tab.

## Server logs via Developer Portal

The Developer Portal provides a comprehensive logs viewer for your app's server code across all workspaces where your app is installed. This is the primary way to monitor your app in production.

**How to access:**

1. Navigate to the [Developer Portal](https://build.attio.com)
2. Select your app
3. Click on the **Logs** tab

<img className="dark:hidden" width="3050" height="2082" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/developer-portal-logs-light.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=a40937174c2d97a53aa7c50e4948062f" width="3050" height="2082" data-path="images/developer-portal-logs-light.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/developer-portal-logs-light.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=b872bf3a0f5a2d2dea8b0a26f0d49719 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/developer-portal-logs-light.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=a49c3d3fc91b9006d79cadd016c24be8 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/developer-portal-logs-light.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=54ff1407e7fbcb50c4add3712a23e778 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/developer-portal-logs-light.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=242e048d8fd68ad9cfe3bb2480ca0f64 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/developer-portal-logs-light.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=05a2436aa60f26fa1af893262086459f 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/developer-portal-logs-light.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=e76498a6a227107434dc78f1ae433c34 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="3050" height="2082" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/developer-portal-logs-dark.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=401fb438d6277f1a8dc01401b40ecf65" width="3050" height="2082" data-path="images/developer-portal-logs-dark.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/developer-portal-logs-dark.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=ed1400a7af441e3bf4db7560c92e0011 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/developer-portal-logs-dark.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=ffaf8b1c8c1b7fb26ca01498e19ef4f8 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/developer-portal-logs-dark.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=80ce46834965ad9671773b513145d18d 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/developer-portal-logs-dark.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=5c23a11e84274e831727f8dfc42c09d0 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/developer-portal-logs-dark.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=81d2df2f2957f01722068622b5b3b2ca 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/developer-portal-logs-dark.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=6659995813afa78e840678ad2c9e337e 2500w" data-optimize="true" data-opv="2" />

You can only view the logs for one workspace at a time. To get started, enter the workspace's slug to select it.

## Development server logs via CLI

For your development build, you can stream logs directly to your terminal using the Attio CLI. This provides a real-time view of your development logs to debug your app while you're building it.

**How to access:**

Run the following command:

```bash
npx attio logs
```

You can optionally specify a workspace:

```bash
npx attio logs --workspace your-workspace-slug
```

**Example output:**

```
2024-01-15T10:30:45.123Z INFO: Server function started
2024-01-15T10:30:45.234Z WARNING: User not found
2024-01-15T10:30:45.302Z ERROR: Failed to connect to external API: Connection timeout
```


# Design guidelines
Source: https://docs.attio.com/sdk/guides/design-guidelines

Icon and screenshot guidelines

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/icon-design-guidelines.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=a7cf3a660086cad5f98be308e163bb6d" width="1440" height="880" data-path="images/icon-design-guidelines.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/icon-design-guidelines.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=cac7d41c5705931623c750e9afa304dd 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/icon-design-guidelines.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=cdc04644eef1d69b4dc393956598bc8b 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/icon-design-guidelines.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=e2115fb974366e7095d58a9a0570b1dc 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/icon-design-guidelines.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=2a5f8a1e4693b8cc7d26124c79933d11 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/icon-design-guidelines.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=f849bed3ceb437d82c7017880a7ff8fe 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/icon-design-guidelines.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=594162d99cae44467c87293a49ba3d00 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/icon-design-guidelines-dark.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=707923fc22a6d00209d05ee2d43819a7" width="1440" height="880" data-path="images/icon-design-guidelines-dark.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/icon-design-guidelines-dark.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=025e44b65d9e84549593a5d05436bbcb 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/icon-design-guidelines-dark.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=59c4ca8ad33392f21ea57a2a2c3fb59a 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/icon-design-guidelines-dark.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=9715cb38c543f7c0d35356e6cb17d5df 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/icon-design-guidelines-dark.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=ca0728ec1baadfd5545e8f73465a451e 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/icon-design-guidelines-dark.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=a42242776a2dbc4a2f8bfbd37ab3543a 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/icon-design-guidelines-dark.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=6b5a784d962a099288ad08850bd71451 2500w" data-optimize="true" data-opv="2" />

## Icon guidelines

When submitting an app to Attio, the icon you provide plays a crucial role in how your app is presented across different areas of the platform. To ensure a consistent and professional appearance, please adhere to the following specifications and best practices.

### General Specifications

* **Minimum Size:** 280px by 280px (ensures high-quality rendering on all screens, especially on retina displays).
* **No Rounded Corners:** Attio automatically applies a **30% corner radius** based on the icon size.
* **Format:** PNG (without transparency) for optimal display quality.
* **Inset Outline:** Attio automatically adds a **10% opacity inset outline** to icons.

### **Corner Radius Reference**

For different icon sizes, use the following corner radii as a reference:

| Icon Size | Corner Radius |
| --------- | ------------- |
| 1000px    | 300px         |
| 500px     | 150px         |
| 280px     | 84px          |

### Icon Display Specifications

| Placement        | Size           |
| ---------------- | -------------- |
| App Details Page | 230px by 144px |
| App Store        | 720px by 462px |
| Action Buttons   | 14px by 14px   |

### Additional Considerations

* **Consistency:** Ensure the icon remains visually clear and recognizable at both small and large sizes.
* **Color Compatibility:** Make sure the icon is effective on both light and dark backgrounds within the platform.

***

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/images.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=73c4e404de3b9a0e7aff5f1d1ebe4bbf" width="1440" height="880" data-path="images/images.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/images.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=e3472ea52ca863bfdfa5f15e5f3d568f 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/images.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=9abb0671759a4d530ec46d8e6545cfd6 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/images.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=b288cffb79e43c749c5022b62a075588 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/images.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=e8d64ec2760ff9b8812683486cc81f78 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/images.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=7052da9f951e4043b1d17dbc4e738fd6 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/images.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=743b909fe62e67380abbcb39206cfe69 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/images-dark.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=e418d65ea11d448d9df4a43697be306e" width="1440" height="880" data-path="images/images-dark.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/images-dark.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=25495ac50a7251445c1b4632398d9733 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/images-dark.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=cf277453689ae48ae843f8af2121c4ad 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/images-dark.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=af38e621650410f7bc5a0de05ee3797b 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/images-dark.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=afeb5f96a066b47514c6ba3e515b9d09 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/images-dark.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=d3f8be66b0d2abc972ad5962cc9d4547 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/images-dark.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=3cbda9b9edd93497893cb4564755a617 2500w" data-optimize="true" data-opv="2" />

## Screenshot Guidelines

Screenshots are essential for showcasing your app on the Attio marketplace. To maintain high quality and consistency, please follow these specifications and best practices.

* **Aspect Ratio:** 16:10
* **Size:** 2960px by 1848px (ensures high-quality rendering on all screens).
* **No Rounded Corners:** Attio applies the necessary corner radius automatically.


# Making HTTP requests
Source: https://docs.attio.com/sdk/guides/making-http-requests

How to make HTTP requests from your app with server functions

<Note>
  Not to be confused with [React Server
  Functions](https://react.dev/reference/rsc/server-functions); while they serve similar purposes,
  Attio server functions have different capabilities and therefore do not follow the React Server
  Components protocol.
</Note>

Server functions let you make HTTP requests from your app, whether it's to a third-party API or to
the [Attio REST API](/rest-api/overview) using `attioFetch`. App SDK does not allow
client-side fetch requests, so all HTTP requests must go through server functions, which run inside
a secure sandbox within the Attio infrastructure. The server function runtime ***is not Node.js
compatible***, meaning some libraries that work in Node.js might not work in our environment.

<Tip>
  The globals available to you are listed in [Available Globals](../server/available-globals).
</Tip>

## Example: Add a prospect to an external mail sequencing API

You can use a server function to call an external mail sequencing API and add a prospect to a sequence.

To add a server function to your app, create a file with the `.server.ts` suffix. The file can be placed anywhere in your app, but it must `export default` an async function. This function acts as the entry point for the server function.

```ts add-to-sequence.server.ts
const API_KEY = "your-api-key"

export default async function addToSequence({
  email,
  sequenceId,
  mailboxId,
}: {
  email: string
  sequenceId: number
  mailboxId: number
}): Promise<Record<string, string>> {
  const response = await fetch(`https://emailsequencingtool.com/api/v1/sequences`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${API_KEY}`,
    },
    body: JSON.stringify({email, sequenceId, mailboxId}),
  })

  if (!response.ok) {
    throw new Error(`Failed to add prospect to sequence: ${await response.text()}`)
  }

  // ℹ️ better to parse with a tool like Zod than to cast
  const body: {data: Record<string, string>} = await response.json()

  return body.data
}
```

Then, this `addToSequence()` function can be called from your client by simply importing it and calling it with the required arguments.

```typescript add-to-sequence-action.ts
import {showToast, runQuery, RecordAction} from "attio/client"
import addToSequence from "./add-to-sequence.server"
import getPersonContactDetails from "./get-person-contact-details.graphql"

export const recordAction: RecordAction = {
  id: "add-to-sequence",
  label: "Add to Sequence",
  objects: "people",
  onTrigger: async ({recordId}) => {
    const {person} = await runQuery(getPersonContactDetails, {recordId})

    if (!person) {
      showToast({
        variant: "error",
        title: "Person not found",
      })
      return
    }

    const result = await addToSequence({
      email: person.email_addresses[0],
      sequenceId: 42,
      mailboxId: 42,
    }).catch((error) => {
      console.error(error)
      showToast({
        variant: "error",
        title: "Failed to add person to sequence",
      })
    })
  },
}
```

As you can see, it's possible to pass arguments to a server function and access its return value. Each call to a server function sends a request to Attio's infrastructure, where server function runs in a sandboxed environment. Because the functioncall crosses a network boundary, **only JSON-serializable data** can be passed between client and server functions.

<Warning>
  Whatever you pass to or return from a server function will go through
  `JSON.stringify(JSON.parse(...))`.
</Warning>

As you can see in the example code, if a server function throws an error, it is re-thrown on the client side and can be
handled with `try/catch` or `.catch`
[promise chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises#chaining).

## Debugging server functions

To check output of `console.log()` placed inside the server functions, open the Logs tab for your app in the [Developer Portal](https://build.attio.com).

## Next steps

In the example above, we used a hardcoded API token. That might be sufficient for testing or simple use cases, but most of the time you'll want to perform actions on behalf of the Attio user.
For that, the App SDK offers a built-in system for [managing authentication](./authenticating-to-external-services) for you.


# Querying Attio data
Source: https://docs.attio.com/sdk/guides/querying-attio-data

How to query Attio data with GraphQL

## Querying Attio data

The App SDK provides a GraphQL API for querying data within Attio. You can use this API to retrieve Attio's standard and custom records, information about the current user, and other relevant data.

## Example: Get a person's contact details

First, create a new `.graphql` file within your application and include the following GraphQL query:

```graphql get-person-contact-details.graphql
query getPersonContactDetails($recordId: String!) {
  person(id: $recordId) {
    name {
      full_name
    }
    email_addresses
    phone_numbers
    company {
      name
    }
  }
}
```

This query retrieves person's full name, email addresses, phone numbers, and associated company name.

After defining the query, you can import and run it within your app:

```typescript
import {showToast, runQuery, RecordAction} from "attio/client"
import getPersonContactDetails from "./get-person-contact-details.graphql"

export const recordAction: RecordAction = {
  id: "add-to-sequence",
  label: "Add to Sequence",
  // ℹ️ Here we are restricting the action to person records only
  objects: "people",
  onTrigger: async ({recordId}) => {
    const {person} = await runQuery(getPersonContactDetails, {recordId})

    if (!person) {
      showToast({
        variant: "error",
        title: "Person not found",
      })
      return
    }

    // process the retrieved contact details
  },
}
```

<Tip>
  The App SDK includes [useQuery](../graphql/use-query) hook for querying within React components.
</Tip>

Once you've fetched the contact details, you can send the data to [external service](./making-http-requests)
or use it as a starting point to prefill [form fields](../hooks/use-form).

## Example: Get a text attributes value on a company record

First, create a new `.graphql` file within your application and include the following GraphQL query:

```graphql get-text-attribute-value.graphql
query getTextAttributeValue($recordId: String!, $slug: String!) {
  company(id: $recordId) {
    attribute(slug: $slug) {
      __typename
      ... on TextValue {
        value
      }
    }
  }
}
```

After defining the query, you can import and run it within your app, be sure to pass the slug of the attribute you'd like to access.

<Tip>
  You can find the slug of an attribute in:
  **Settings** > **Data** > **Objects** > **Attributes** > (three dots menu) > **Copy slug**.
</Tip>

```typescript
import {showToast, runQuery, RecordAction} from "attio/client"
import getTextAttributeValue from "./get-text-attribute-value.graphql"

export const recordAction: RecordAction = {
    id: "get-stock-price",
    label: "Get Stock Price",
    // ℹ️ Here we are restricting the action to company records only
    objects: "companies",
    onTrigger: async ({recordId}) => {
        const values = await runQuery(getTextAttributeValue, {recordId, slug: "ticker"})
        const ticker = (values.company?.attribute as { value: string }).value

        if (!ticker) {
            showToast({
                variant: "error",
                title: "Ticker not found",
            })
            return
        }

        // process the retrieved ticker details and fetch stock price
    },
}
```

## Exploring the GraphQL schema

To inspect the App SDK’s GraphQL schema, run `npx attio dev` and press `o`.
This opens a local [GraphiQL instance](https://github.com/graphql/graphiql/tree/main/packages/graphiql#graphiql) in read-only mode, where you can browse available types and operations.

<Note>Query execution against workspace data is not yet supported in the playground.</Note>

If you need access to data that isn’t available in the GraphQL schema,
you can use the [Attio REST API](/rest-api/overview) by calling [`attioFetch`](../server/attio-fetch)
from within your [server functions](../server/server-functions).


# Receiving HTTP requests
Source: https://docs.attio.com/sdk/guides/receiving-http-requests

How to use webhooks handlers to receive HTTP requests from external services

Webhook Handlers enable apps to receive incoming requests from third-party services.
Unlike [server functions](/sdk/server/server-functions), which are used to send requests,
Webhook Handlers are designed to *listen* for and process external requests. They
can be used to sync data into Attio or respond with on-demand data to third-party
services, making them essential for integrating external systems and automating workflows.

## Example: Receiving prospect updated webhook from email sequencing API

You can use a webhook handler to receive a prospect updated event from the email sequencing API and update the corresponding record in Attio.

To add a webhook handler to your app;

* create a file with the `.webhook.ts` suffix.
* The file **must** be placed under the `src/webhooks` directory, and it must `export default` an async function.
* The function **must** take an HTTP [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request) argument
  and **must** return an HTTP [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response).

```typescript webhooks/prospect-updated.webhook.ts
import {attioFetch} from "attio/server"

type WebhookBody = {
  event: "prospect_updated"
  data: {
    prospectId: string
    prospectName: string
    prospectEmail: string
  }
}

export default async function handleProspectUpdate(req: Request) {
  const body: WebhookBody = await req.json()

  const {prospectEmail, prospectName} = body.data

  // ℹ️ Assert endpoint will update Attio record details
  // or create a new record if it doesn't exist
  try {
    await attioFetch({
      path: `/objects/people/records`,
      method: "PUT",
      queryParams: {
        matching_attributes: "email_addresses",
      },
      body: {
        data: {
          name: {
            full_name: prospectName,
          },
          email_addresses: [
            {
              email: prospectEmail,
            },
          ],
        },
      },
    })
    return new Response(null, {status: 200})
  } catch (error) {
    console.error(error)
    return new Response(null, {status: 500})
  }
}
```

This webhook handler calls the [Assert Record endpoint](/rest-api/endpoint-reference/records/assert-a-record) to create or update a record in Attio.

Whatever status code your handler returns will be passed back to the third-party service to indicate success or failure.
If your handler doesn’t return a `Response` object, the App SDK will respond with a 500 status code by default.

Defining a webhook handler isn’t enough to make it usable. You’ll need to enable it programmatically and register it with the third-party service.
You can do this from any server function, but most of the time you'll want to do it inside the [`connection-added` event](../server/events/connection-added).

The `connection-added` event runs whenever an Attio user connects to a third-party service through your app.
If your event handler completes without throwing an error, the connection will be saved.
If it throws, the user will be asked to authenticate again.

<Note>
  Be sure to test your `connection-added` events carefully. If something goes wrong, users won’t be
  able to connect to third-party services.
</Note>

Now back to our example. We are going to add `connection-added` event handler to our app.

* The file must live in `src/events/connection-added.event.ts`
* The file **must** `export default` an async function that takes a `{ connection: Connection }` argument.

```typescript events/connection-added.event.ts
import type {Connection} from "attio/server"
import {createWebhookHandler, updateWebhookHandler} from "attio/server"

export default async function connectionAdded({connection}: {connection: Connection}) {
  // ℹ️ The filename must match the file in src/webhooks, but without the suffix
  const handler = await createWebhookHandler({fileName: "prospect-updated"})

  const authorizationToken = connection.value

  const response = await fetch("https://emailsequencingtool.com/api/v1/webhooks", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${authorizationToken}`,
    },
    body: JSON.stringify({
      name: handler.id,
      url: handler.url,
      event: "lead.processed",
    }),
  })

  if (!response.ok) {
    // ℹ️ Because we throw an error, the connection will not be saved
    // and user will be asked to authenticate again
    throw new Error(`Failed to register webhook: ${response.statusText}`)
  }

  const webhook = await response.json()

  // ℹ️ Save the external webhook ID so we
  // can delete it when the connection is removed
  await updateWebhookHandler(handler.id, {
    externalWebhookId: webhook.webhook_id,
  })
}
```

And that's it! now whenever a prospect update webhook is received, the `prospect-updated` webhook handler will be called.

<Tip>
  You can use the `externalWebhookId` to delete the webhook from the third-party service when the
  connection is removed inside the `connection-removed` event.
</Tip>


# Sharing your app
Source: https://docs.attio.com/sdk/guides/sharing-your-app

How to share or publish your app

You can share your app privately, and optionally publish it to the Attio AppStore. We'll cover both ways of sharing your app here and when to use them.

## Sharing your app privately

This is a good option if you've built an app for your own use (and if using the App SDK want to install it in a different workplace to which you used for developing it), or if you're working with a few companies using Attio and have built an app for them.

You can get a shareable link that anyone with it can use to install your app.

Head over to the [Developer dashboard](https://build.attio.com), select your app, and click the three dots overflow menu.

<img className="dark:hidden" width="720" height="450" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/sharing-your-app.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=c603cd468f380f1c6b067fd3fecd768a" width="1440" height="900" data-path="images/sharing-your-app.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/sharing-your-app.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=9c295cc8be404c7979f721ffef0bc0f7 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/sharing-your-app.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=a3522d38c7841f4e758a2bcb96b0d608 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/sharing-your-app.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=a9074965744aab78ab90e54e1b571072 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/sharing-your-app.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=39f5d2f497fa4885b5c4678536f0a717 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/sharing-your-app.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=1de5974d15f817b95dc14d78936c01d4 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/sharing-your-app.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=efd8f76d39c8122114e7af70077f5904 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="450" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/sharing-your-app-dark.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=345614befd48aa40bce8fbd8aa70c280" width="1440" height="900" data-path="images/sharing-your-app-dark.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/sharing-your-app-dark.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=de3878292c2064b28e29addf610f75bc 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/sharing-your-app-dark.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=b9a66352ff58be7453808a6255373c91 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/sharing-your-app-dark.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=0c317892c10fb45a7bd4640449e74255 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/sharing-your-app-dark.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=b1c9a70088c346515c561432eeb66b5e 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/sharing-your-app-dark.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=14d09687dcc912e5c52e671a419b010b 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/sharing-your-app-dark.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=8526be40a08530f2950362cc019d6ce2 2500w" data-optimize="true" data-opv="2" />

Then select Share.

Copy the link and share it.

## Publishing your app

This is a good option if you'd like to make your app available to all Attio users.

Publishing has two steps:

1. Getting your app reviewed and approved: this removes any warnings users see when they try to install an unapproved app.
2. Listing your app on the [in-product app store](https://app.attio.com/_/settings/apps) and [public website app store](https://attio.com/apps).

Publishing your app requires a review from the Attio team which can take up to 2 business days.

Once your done building your app and are ready to publish it, head over to the [developer dashboard](https://build.attio.com).

Ensure you have a complete App Listing (note: you'll want to review our [design guidelines](/sdk/guides/design-guidelines) as you add your icon and app screenshots).

Once you're ready, hit publish.

Once you Publish your app, the Attio team will begin reviewing it to ensure it meets our app quality and UX standards. Within 2 business days we will complete our review and either approve your app or provide feedback on what changes you need to make to get approved.

Once your app is approved the Attio team will decide whether to list your app on the [in-product app store](https://app.attio.com/_/settings/apps), and then whether to also feature it on the [public website app store](https://attio.com/apps).

## Listing criteria

We prioritise listing apps that:

1. Are official integrations, i.e. you make Product X and this is your official integration with Attio.
2. Integrations between products that have mutual customers with Attio.
3. The integration & listing content is high-quality and meets our design standards.

In addition to the above, we also look for solid community (third-party) built integrations that can be listed as a Community built app.

Optionally we pick and choose a subset of the above for listing in the public website app store.

## Partnerships

If you've built an official integration and would like to get in touch with partnerships please reach out to us [here](https://attio.com/partners/app-partners)


# Shipping updates
Source: https://docs.attio.com/sdk/guides/shipping-updates

How to ship new versions of your app

In the [sharing your app](/sdk/guides/sharing-your-app) guide we covered how to either privately share your app or publish it to the Attio AppStore.

Regardless of how you've shared your app, when you're ready to ship updates Attio provides a versioning system for your apps code so you can do this in a managed way.

Follow these steps to ship a new update of your app:

<Steps>
  <Step title="Create a new version">
    Everytime you want to ship a new version of your app. Run this command in your project directory:

    ```bash
    npx attio version create
    ```

    This will increment the minor version number of your app and upload the latest code to Attio's servers.
  </Step>

  <Step title="Publish newly created version">
    <Note>If you've shared your app privately via a link there's no need to publish, everyone who installed the app with the private link will get the latest version automatically.</Note>

    Once you've run this command and created a version, head over to the [developer dashboard](https://build.attio.com) to publish it.

    You can find the newly created version under the Versions tab. It will be marked as private, with the option to publish it.

    On publishing, we'll review your update (this can take up to 2 business days). Once complete, if approved your update will be made immediately available to Attio users. If it's rejected we will provide feedback why and what to fix.
  </Step>
</Steps>


# useAsyncCache()
Source: https://docs.attio.com/sdk/hooks/use-async-cache

A suspenseful hook that returns, and caches, the results of calling one or more async functions, typically to load data from a third-party via server functions.

```js
import {useAsyncCache} from "attio/client"
```

<Warning>
  While the async functions are running, the component that uses this hook will "suspend".

  You *MUST* wrap the component in a
  [`<React.Suspense/>`](https://react.dev/reference/react/Suspense) component
  and give it a `fallback` component to render until the functions have completed.
</Warning>

## Example

```tsx load-widgets.server.tsx
export default async function loadWidgets(): Promise<Array<Widget>> {
  // fetch widgets from somewhere
}
```

```tsx load-sprockets.server.ts
export default async function loadSprockets(
  material: Material,
  max?: number
): Promise<Array<Sprocket>> {
  // fetch sprockets from somewhere
}
```

```tsx
import { useAsyncCache } from "attio/client"

import loadWidgets from "./load-widgets.server.ts"
import loadSprockets from "./load-sprockets.server.ts"

...

// inside component:

const results = useAsyncCache({
  // loadWidgets takes zero parameters and can thus be called without an array
  widgets: loadWidgets,
  // loadSprockets takes a `material` parameter, so we call it like this
  ironSprockets: [loadSprockets, "iron"],
  copperSprockets: [loadSprockets, "copper", 42],
})

const { widgets, ironSprockets, copperSprockets } = results.values

...

// inside an event handler, perhaps, to refetch _only_ the iron sprockets
results.invalidate("ironSprockets")
```

## Parameters

It takes an object mapping a `string` key to an async function. If the function requires parameters,
the key should map to an array with the async function as the first element and the parameters as
the subsequent elements.

## Returns

An object containing:

* `values`: an object mapping from the `string` keys provided to whatever type that key's async
  function returns
* `invalidate`: a `(key: string) => void` function to call to invalidate individual cached
  values, called with the key you want to invalidate

<Warning>
  Calling `invalidate()` will cause the values for the specified function to be fetched again,
  re-suspending the component.
</Warning>


# useForm()
Source: https://docs.attio.com/sdk/hooks/use-form

A hook for creating forms inside your Attio app.

## Parameters

<ParamField path="schema" type="Record<string, FormValue>" required>
  A [form schema](../form-schema) is how you tell Attio about the shape and validation rules of your form data.
</ParamField>

<ParamField path="initialValues" type="Record<string, any>" required>
  These values must match the type defined by your [form schema](/sdk/forms/schema).
</ParamField>

## Returns

an object containing:

### Functions

<ResponseField name="change" type="(path: string, value: any) => void">
  An imperative function to update a particular value in the form.
</ResponseField>

<ResponseField name="submit" type="() => void">
  An imperative function to submit the form. It will cause validation to run, and if the validation passes it will call the `onSubmit` handler that you have passed to `<Form/>`.

  <Note>
    Typically you won’t be using this, but will rather render a `<SubmitButton />`
  </Note>
</ResponseField>

### Components

* [`<Checkbox />`](../components/checkbox)
* [`<Combobox />`](../components/combobox)
* [`<Form />`](../components/form)
* [`<NumberInput />`](../components/number-input)
* [`<SubmitButton />`](../components/submit-button)
* [`<TextInput />`](../components/text-input)
* [`<Toggle />`](../components/toggle)
* [`<WithState />`](../components/with-state)


# alert()
Source: https://docs.attio.com/sdk/notifications/alert

Shows an alert to the user

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/alert.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=5cc9094573670f69cd42a11d0d962497" width="1440" height="880" data-path="images/alert.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/alert.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=38a2e7ce6e70e4b6803587ddc62b7306 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/alert.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=d88b5317aa856fcc6264c5f6d1028b04 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/alert.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=d00a3cd637af2951454742881ebe1b93 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/alert.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=a79126f6740bcc0bbcddc50e836d6267 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/alert.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=4281b024eb77ff6b64677b7cc9250db0 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/alert.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=056a6581189869edb15a93a12105e75e 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/alert-dark.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=f58a7423c3aeccd0b9f5a241ad9beb36" width="1440" height="880" data-path="images/alert-dark.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/alert-dark.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=4d783434e7f6d550a62b7ce154416d41 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/alert-dark.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=faaaef46a3fa46d9c6053f91501cd3d2 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/alert-dark.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=6b0af136dc8c63b08c3cb138b9e05397 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/alert-dark.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=59522661eb166bb7a197d791627a5a0f 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/alert-dark.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=4dee7097dffd894e83d2528b4964de12 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/alert-dark.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=8a570c475f3e240c243fa939a2685792 2500w" data-optimize="true" data-opv="2" />

```js
import {alert} from "attio/client"
```

Analogous to the
[`window.alert()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert)
function in web browser JavaScript. The popup is
[modal](https://en.wikipedia.org/wiki/Modal_window).

<Tip>It is useful when you forcefully let the user know that something has happened.</Tip>

## API

```ts TypeScript
async function alert(options: Options): Promise<void>
```

## Options

### `title : string`

The title of the alert pop-up.

### `text : string`

The text of the alert pop-up.

### `okLabel? : string`

The label for the "OK" button.

Defaults to `"OK"`.


# confirm()
Source: https://docs.attio.com/sdk/notifications/confirm

Shows a confirmation prompt to the user

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/confirm.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=248fdd310992d741884c7e40d229d2f1" width="1440" height="880" data-path="images/confirm.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/confirm.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=26c7e1a8448b3ffaf6f2eafeb5e86d7e 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/confirm.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=5729ca5a99559bd6c7073b16c221ddc9 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/confirm.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=7c0974800d4267d362e59c12d3d026ed 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/confirm.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=9aea9c3c978cbc3691ca67eae32560db 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/confirm.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=18afb2307e6849efd3d402a56e7e877c 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/confirm.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=26d32236d49dd0d7acfdfad9aba2fb99 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/confirm-dark.png?fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=dc9999ba226e6e5406134b3007557d18" width="1440" height="880" data-path="images/confirm-dark.png" srcset="https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/confirm-dark.png?w=280&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=0594a622aaaa0fe3fbe48fed04f777ea 280w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/confirm-dark.png?w=560&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=a274f3744a012e6595aab4c1040d1b11 560w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/confirm-dark.png?w=840&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=c7489c3b2b2b126b099c3219c89cbbef 840w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/confirm-dark.png?w=1100&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=e119d05b807afdc7d6d1bc2c1042d51e 1100w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/confirm-dark.png?w=1650&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=96158c42c83b1948b620cf1a442fc323 1650w, https://mintcdn.com/attio/4Fh2EPa8-SlLTNAV/images/confirm-dark.png?w=2500&fit=max&auto=format&n=4Fh2EPa8-SlLTNAV&q=85&s=822b9e74855f2fa45d5d691a2abf4c6d 2500w" data-optimize="true" data-opv="2" />

```js
import {confirm} from "attio/client"
```

Analogous to the
[`window.confirm()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm)
function in web browser JavaScript. The popup is
[modal](https://en.wikipedia.org/wiki/Modal_window).

<Tip>
  It is useful when you need to get a yes/no answer back from the user, e.g. "Are you sure you want
  to delete this item?".
</Tip>

## API

```ts TypeScript
async function confirm(options: Options): Promise<boolean>
```

## Options

<ParamField path="title" type="string" required>
  The title of the confirm pop-up.
</ParamField>

<ParamField path="text" type="string" required>
  The text of the confirm pop-up.
</ParamField>

<ParamField path="confirmLabel" type="string">
  The label for the confirm button.

  Defaults to `"OK"`.
</ParamField>

<ParamField path="cancelLabel" type="string">
  The label for the cancel button.

  Defaults to `"Cancel"`.
</ParamField>

<ParamField path="confirmVariant" type="&#x22;primary&#x22; | &#x22;secondary&#x22; | &#x22;secondary-destructive&#x22; | &#x22;destructive&#x22;">
  The style of the confirm button.

  Defaults to `"primary"`.
</ParamField>


# Notifying the user
Source: https://docs.attio.com/sdk/notifications/notifications

Methods to imperatively give feedback to the user

There are three main ways that you can send a notification to the user:

## [Toasts](./show-toast)

A [toast](https://en.wikipedia.org/wiki/Pop-up_notification) is a subtle, usually temporary,
pop-up notification to let the user know that something is happening or has just happened.

These are useful to show when you are performing asynchronous actions such as loading
or saving data.

You show one using [`showToast()`](./show-toast).

## [Confirmations](./confirm)

Analogous to the
[`window.confirm()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm)
function in web browser JavaScript. The popup is
[modal](https://en.wikipedia.org/wiki/Modal_window).

It is useful when you need to get a yes/no answer back from the user,
e.g. "Are you sure you want to delete this item?".

You show one using [`confirm()`](./confirm).

## [Alerts](./alert)

Analogous to the
[`window.alert()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert)
function in web browser JavaScript. The popup is
[modal](https://en.wikipedia.org/wiki/Modal_window).

It is useful when you forcefully let the user know that something has happened.

You show one using [`alert()`](./alert).


# showToast()
Source: https://docs.attio.com/sdk/notifications/show-toast

Shows a toast to the user

<img className="dark:hidden" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/notification.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=52ecd1f9a39275ac87e8a237d90f3bb6" width="1440" height="880" data-path="images/notification.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/notification.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=eb4d16ef3ef8de4c4c45f69b3471e6f5 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/notification.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=eb7ed2c8961388bfaa9897abf35f42af 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/notification.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=c9069e033f27f655254d51eb26564a60 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/notification.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=c8bd209caab26210d54533ee17dcffed 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/notification.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=514091a9775194d8e9b10e38d3310cfa 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/notification.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=2678574da2cdc4c4c12452dcaea91672 2500w" data-optimize="true" data-opv="2" />

<img className="hidden dark:block" width="720" height="440" noZoom src="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/notification-dark.png?fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=187a1966010df57261ac572a80172660" width="1440" height="880" data-path="images/notification-dark.png" srcset="https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/notification-dark.png?w=280&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=d41a6f31903f979d43d04847763cb5fc 280w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/notification-dark.png?w=560&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=97a41adeae269009929229c61222a764 560w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/notification-dark.png?w=840&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=054d3e349eb1265ad773510c17b90384 840w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/notification-dark.png?w=1100&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=3e9e5bddbca35b19178678c5e1fddad7 1100w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/notification-dark.png?w=1650&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=f4e187310835f7b26fb9b812eb70fc62 1650w, https://mintcdn.com/attio/2EyaTyByKNPeSVcd/images/notification-dark.png?w=2500&fit=max&auto=format&n=2EyaTyByKNPeSVcd&q=85&s=f12a353a856e24768aeff32a8622014f 2500w" data-optimize="true" data-opv="2" />

```js
import {showToast} from "attio/client"
```

A [toast](https://en.wikipedia.org/wiki/Pop-up_notification) is a subtle, usually temporary,
pop-up notification to let the user know that something is happening or has just happened.

<Tip>
  These are useful to show when you are performing asynchronous actions such as loading or saving
  data.
</Tip>

## API

```ts TypeScript
async function showToast(options: Options): Promise<{
  hideToast: () => Promise<void>
}>
```

## Returns

A `Promise` that resolves to an object containing:

<ResponseField name="hideToast" type="() => Promise<void>">
  By calling `hideToast()` you can imperatively hide the toast.

  <Tip>Useful if your toast was showing a "loading" or "saving" message.</Tip>
</ResponseField>

## Options

<ParamField path="title" type="string" required>
  The title of the toast.
</ParamField>

<ParamField path="text" type="string" required>
  The text of the toast.
</ParamField>

<ParamField path="action" type="{ label: string, onClick: () => void }">
  An optional action button that can execute code if and when the user triggers it.
</ParamField>

<ParamField path="durationMs" type="number">
  How long to keep the toast open.

  Defaults to `4_000` (four seconds)

  <Tip>
    If you want the toast to remain open indefinitely, you can pass `Number.POSITIVE_INFINITY`.

    <Warning>Only do this if you do ***not*** have `dismissable` set to `false`!</Warning>
  </Tip>
</ParamField>

<ParamField path="dismissable" type="boolean">
  Whether or not to allow the user to dismiss the toast.

  Defaults to `true`.
</ParamField>


# attioFetch()
Source: https://docs.attio.com/sdk/server/attio-fetch

Calls the Attio REST API

```js
import {attioFetch} from "attio/server"
```

Calls the [Attio REST API](/rest-api/overview). It's modeled after the
[Node `fetch()` API](https://nodejs.org/en/learn/getting-started/fetch).

<Tip>
  The auth credentials passed to the REST API will be those of your app.

  What the API will allow you to do depends on the scopes granted to your app.
</Tip>

## Example

```typescript
import {attioFetch} from "attio/server"

...

const notes = await attioFetch({
    method: "GET",
    path: "/notes",
})

notes.data.forEach(note => {
  // do something with each note
})
```

## Arguments

An object containing:

<ParamField path="method" type="&#x22;GET&#x22; | &#x22;POST&#x22; | &#x22;DELETE&#x22; | &#x22;PATCH&#x22;" required>
  The HTTP method to use.
</ParamField>

<ParamField path="queryParams" type="Record<string, unknown>">
  The query parameters to use in the HTTP request.
</ParamField>

<ParamField path="body" type="{ data?: Record<string, unknown>, filter?: Record<string, unknown> }">
  The body of the HTTP request.

  In the [Attio REST API](/rest-api/overview), this is always an object with key
  `"data"` or `"filter"`.
</ParamField>

## Returns

An object containing:

<ResponseField name="data" type="Record<string, unknown> | Array<Record<string, unknown>>">
  The result of the Attio REST endpoint.
</ResponseField>


# Connections
Source: https://docs.attio.com/sdk/server/connections/connections

Authentication to third party services

A Connection is a way of authenticating into a third party service, either via
OAuth 2.0 or a secret.

While an app can *technically* have one of each kind of connection, it will
be very rare.

There are two types of Connections:

## User Connections

A User Connection is a connection set up by a specific user to a third party
that is specific to a particular user.

e.g. Connecting one user's calendar to Attio.

On the server side, the secret or auth token for a User Connection is achieved by
calling [`getUserConnection()`](./get-user-connection).

## Workspace Connections

A Workspace Connection is a connection that is valid for an entire workspace.

e.g. Connecting an entire workspace to a third party SaaS product.

On the server side, the secret or auth token for a Workspace Connection is achieved by
calling [`getWorkspaceConnection()`](./get-workspace-connection).


# getUserConnection()
Source: https://docs.attio.com/sdk/server/connections/get-user-connection

Using a user connection.

```js
import {getUserConnection} from "attio/server"
```

A User Connection is a connection set up by a specific user to a third party service
using either OAuth or a secret. A User Connection is specific to a particular user,
as opposed to a [Workspace Connection](./get-workspace-connection), which acts on
behalf of an entire Attio Workspace.

## API

```ts TypeScript
function getUserConnection(): Connection
```

## Returns

A `Connection` object containing:

<ResponseField name="id" type="string">
  The unique identifier for the connection.
</ResponseField>

<ResponseField name="value" type="string">
  The access token or secret for the connection.
</ResponseField>

<ResponseField name="ownedBy" type="{ type: &#x22;user&#x22;, id: string }">
  An object containing the user id that owns this connection.
</ResponseField>

<ResponseField name="createdBy" type="{ type: &#x22;user&#x22;, id: string }">
  An object containing the user id that created this connection.
</ResponseField>


# getWorkspaceConnection()
Source: https://docs.attio.com/sdk/server/connections/get-workspace-connection

Using a workspace connection.

```js
import {getWorkspaceConnection} from "attio/server"
```

A Workspace Connection is a connection set up by a user to a third party service
using either OAuth or a secret. A Workspace Connection is workspace wide,
as opposed to a [User Connection](./get-user-connection), which acts on
behalf of a specific Attio user.

## API

```ts TypeScript
function getWorkspaceConnection(): Connection
```

## Returns

A `Connection` object containing:

<ResponseField name="id" type="string">
  The unique identifier for the connection.
</ResponseField>

<ResponseField name="value" type="string">
  The access token or secret for the connection.
</ResponseField>

<ResponseField name="ownedBy" type="{ type: &#x22;workspace&#x22;, id: string }">
  An object containing the workspace id that owns this connection.
</ResponseField>

<ResponseField name="createdBy" type="{ type: &#x22;user&#x22;, id: string }">
  An object containing the user id that created this connection.
</ResponseField>


# connection-added
Source: https://docs.attio.com/sdk/server/events/connection-added

Fires when a connection is added to an app

This event is triggered whenever a user adds a new
[connection](../connections/connections). The registered handler runs
before the connection is saved, meaning that if the handler throws an
error, the connection will not be created. You can use handler to validate
the connection and ensure that any necessary setup code has run successfully.

## Example

Here's an example that creates a [webhook handler](../webhooks/webhook-handlers).

```ts TypeScript
// src/events/connection-added.event.ts
import {createWebhookHandler, updateWebhookHandler} from "attio/server"
import type {Connection} from "attio/server"

export default async function connectionAdded({connection}: {connection: Connection}) {
  // You can create multiple webhook handlers for the same file
  const webhookHandler = await createWebhookHandler({
    fileName: "acme-webhook",
  })

  // create Webhook in third party system, with webhook handler URL
  const acmeResponse = await fetch(`https://api.acmeinc.com/api/v1/registerWebhook`, {
    method: "POST",
    headers: {
      "Content-Type": "application/vnd.api+json",
      "Authorization": `Bearer ${connection.value}`,
    },
    body: JSON.stringify({
      name: "prospect-enrolled",
      url: webhookHandler.url,
    }),
  })

  if (!acmeResponse.ok) {
    throw new Error("Failed to register webhook")
  }

  const body = await acmeResponse.json()

  // We store the external webhook ID in Attio so we can clean it later
  await updateWebhookHandler(webhookHandler.id, {
    externalWebhookId: body.webhookId,
  })
}
```

<Tip>
  When the event handler is invoked the new connection is only available as argument. It will not be
  available from usual Server SDK Connection functions
  ([`getUserConnection()`](../connections/get-user-connection) /
  [`getWorkspaceConnection()`](../connections//get-workspace-connection)).
</Tip>


# connection-removed
Source: https://docs.attio.com/sdk/server/events/connection-removed

Fires when a connection is removed from an app

This event is triggered whenever a user removes a
[connection](../connections/connections). The registered handler runs before
the connection is deleted, meaning that if the handler throws an error, the
connection will not be removed. You can use the handler to perform any necessary
teardown work.

## Example

Here's an example that cleans up a [webhook handler](../webhooks/webhook-handlers).

```ts TypeScript
// src/events/connection-removed.event.ts
import {listWebhookHandlers, deleteWebhookHandler} from "attio/server"
import type {Connection} from "attio/server"

export default async function connectionRemoved({connection}: {connection: Connection}) {
  const webhookHandlers = await listWebhookHandlers()

  for (const webhookHandler of webhookHandlers) {
    const acmeResponse = await fetch(
      `https://api.acmeinc.com/api/v1/webhooks${webhookHandler.externalWebhookId}`,
      {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${connection.value}`,
        },
      }
    )

    if (!acmeResponse.ok) {
      throw new Error("Failed to register webhook")
    }

    await deleteWebhookHandler(webhookHandler.id)
  }
}
```


# Events
Source: https://docs.attio.com/sdk/server/events/events

App lifecycle events

Events allow developers to perform setup or teardown tasks, such as registering or
unregistering a [webhook](../webhooks/webhook-handlers) in a third-party system or validating
a user's [connections](../connections/connections).

Event files ***MUST***:

* Live in `src/events`
* Have a `.event.ts` suffix.
* Contain an `export default async function` that:
  * Takes a `{ connection: Connection }` argument
  * Returns `void`

The arguments passed to the handler function depend on the type of event and are documented below.

## Available Events:

* [`connection-added`](./connection-added) – called when a connection is added
* [`connection-removed`](./connection-removed) – called when a connection is removed


# Experimental KV Store
Source: https://docs.attio.com/sdk/server/kv-store

A key-value store for your app

KV Store is a lightweight, server-side key-value database for your app.
Use it to cache data, ensure webhook idempotency, or store transient server state.
It’s available in server functions, webhook handlers, and event handlers.

<Note>
  The KV Store is experimental and may change in the future. Please don't use it in production
  versions of your app. We do not guarantee backward compatibility, or that the API will remain
  stable.
</Note>

## Example: Caching a response from an external API

When your app calls an external API, you don’t always need to fetch fresh data every time.
With the KV Store, you can cache the response and set a TTL so it clears itself after a certain period of time.

```ts get-users.server.ts
import {experimental_kv} from "attio/server"

export default async function getAllUsers() {
  const users = await experimental_kv.get("users")

  if (users !== null) {
    return users.value
  }

  const response = await fetch("https://api.emailsequence.com/v1/users")
  const data = await response.json()
  await experimental_kv.set("users", data, {ttlInSeconds: 60 * 60 * 24 * 30})
  return data
}
```

## API

### `get(key: string): Promise<{ value: string } | null>`

```ts
const value = await experimental_kv.get("key")
```

Get the value of a key. Returns `null` if the key does not exist.

#### Parameters

<ParamField path="key" type="string" required>
  The key to get the value of.
</ParamField>

### `set(key: string, value: string, options?: { ttlInSeconds?: number }): Promise<void>`

```ts
await experimental_kv.set("key", "value", {ttlInSeconds: 60})
```

Set the value of a key. Optionally, you can set a TTL in seconds after which the key will be deleted.

#### Parameters

<ParamField path="key" type="string" required>
  The key to set the value of.
</ParamField>

<ParamField path="value" type="string" required>
  The value to set for the key.
</ParamField>

<ParamField path="options" type="{ ttlInSeconds?: number }">
  The options for the key. Currently, the only option is `ttlInSeconds` which is the number of
  seconds after which the key will be deleted.
</ParamField>

### `delete(key: string): Promise<void>`

```ts
await experimental_kv.delete("key")
```

Delete a key.

#### Parameters

<ParamField path="key" type="string" required>
  The key to delete.
</ParamField>


# Server functions
Source: https://docs.attio.com/sdk/server/server-functions

Running code on the server

<Note>
  Not to be confused with [React Server
  Functions](https://react.dev/reference/rsc/server-functions); while they serve similar purposes,
  Attio server functions have different requirements and therefore do not follow the RSC protocol.
</Note>

Server functions allow you to get, update, or delete data from third-party
services, optionally using the user’s access token or secret. We do not
allow client-side fetch requests, so all HTTP requests to third-party services
must happen within server functions, which run inside a secure sandbox within
the Attio infrastructure. The server function runtime ***is not Node.js
compatible***, meaning some libraries that work in Node.js might not work in
our environment.

<Tip>The globals available to you are listed in [Available Globals](./available-globals).</Tip>

To add a server function to your app, you need to create a file with the `.server.ts` suffix. The file must `export` a `default async function`, which will serve as the
entry point for the server function. You can then import and call this function within the client
code.

Here is an example of using a server function to make
[a request](https://developers.outreach.io/api/reference/tag/Sequence-State/#tag/Sequence-State/paths/~1sequenceStates/post)
to Outreach on behalf of a user.

```tsx TypeScript
// add-to-sequence.server.ts
import {getUserConnection} from "attio/server"

export default async function addToSequence({
  prospectId,
  sequenceId,
  mailboxId,
}: {
  prospectId: string
  sequenceId: number
  mailboxId: number
}): Promise<{id: string}> {
  const response = await fetch(`https://api.outreach.io/api/v2/sequenceStates`, {
    method: "POST",
    headers: {
      "Content-Type": "application/vnd.api+json",
      "Authorization": `Bearer ${getUserConnection().value}`,
    },
    body: JSON.stringify({prospectId, sequenceId, mailboxId}),
  })

  if (!response.ok) {
    throw new Error(`Failed to add prospect to sequence: ${await response.text()}`)
  }

  // ℹ️ better to parse with a tool like Zod than to cast
  const body = (await response.json()) as {data: Record<string, string>}

  return body.data
}
```

Then, this `addToSequence()` function can be called from your client side code like:

```ts TypeScript
import addToSequence from "add-to-sequence.server.ts"

...

const sequenceState = await addToSequence({
  prospectId: "XXX",
  sequenceId: 42,
  mailboxId: 42
})
```

As you can see, it’s possible to pass arguments and access the return value of a
server function. Each call to a server function makes a request to the Attio
infrastructure which is executed in a sandbox environment. Since we have to cross
a network boundary, ***it's only possible to pass JSON-serializable data*** between
client and server functions.

<Warning>
  Whatever you pass to or return from a server function will go through
  `JSON.stringify(JSON.parse(...))`.
</Warning>

If a server function throws an error, it is re-thrown on the client side and can be
handled with `try/catch` or `.catch`
[promise chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises#chaining).

## Debugging

To check output of `console.log()` inside the server functions, open the Logs tab for your app in the [Developer Portal](https://build.attio.com).

## Timeout

Server functions have a non-configurable 30 second timeout. If a server function takes longer than 30 seconds to complete, it will be terminated and a timeout error will be thrown.


# createWebhookHandler()
Source: https://docs.attio.com/sdk/server/webhooks/create-webhook-handler

Creates a webhook handler

```js
import {createWebhookHandler} from "attio/server"
```

Creates a [webhook handler](/sdk/server/webhooks/webhook-handlers).

## API

```ts TypeScript
async function createWebhookHandler({fileName}: {fileName: string}): Promise<WebhookHandler>
```

## Arguments

An object containing:

### `fileName : string`

The name of your webhook file ***WITHOUT*** the `.webhook.ts` suffix.

## Returns

A `WebhookHandler` object containing:

### `id : string`

The unique identifier for the webhook handler.

<Tip>
  You may need this for calls to [`updateWebhookHandler()`](./update-webhook-handler) or
  [`deleteWebhookHandler()`](./delete-webhook-handler).
</Tip>

### `url : string`

The URL to trigger the webhook handler.

### `fileName: string`

The name of the webhook file that will be invoked when the webhook is triggered.


# deleteWebhookHandler()
Source: https://docs.attio.com/sdk/server/webhooks/delete-webhook-handler

Deletes a webhook handler

```js
import {deleteWebhookHandler} from "attio/server"
```

Deletes a [webhook handler](./webhook-handlers).

## API

```ts TypeScript
async function deleteWebhookHandler(id: string): Promise<void>
```

## Arguments

### `id : string`

The `id` of your webhook handler provided by [`createWebhookHandler()`](./create-webhook-handler).


# updateWebhookHandler()
Source: https://docs.attio.com/sdk/server/webhooks/update-webhook-handler

Updates a webhook handler

```js
import {updateWebhookHandler} from "attio/server"
```

Updates a [webhook handler](./webhook-handlers).

## API

```ts TypeScript
async function updateWebhookHandler(
  id: string,
  {externalWebhookId}: {externalWebhookId: string}
): Promise<void>
```

## Arguments

An object containing:

### `id : string`

The `id` of your webhook handler provided by [`createWebhookHandler()`](./create-webhook-handler).

### `data : {externalWebhookId: string}`

An object containing:

#### `externalWebhookId : string`

A unique identifier on the third party system.


# Webhook Handlers
Source: https://docs.attio.com/sdk/server/webhooks/webhook-handlers

Server code that can be executed when called via HTTP from a third party

Webhook Handlers enable apps to receive incoming requests from third-party services.
Unlike [server functions](/sdk/server/server-functions), which are used to send requests,
Webhook Handlers are designed to *listen* for and process external requests. They
can be used to sync data into Attio or respond with on-demand data to third-party
services, making them essential for integrating external systems and automating workflows.

Webhook files ***MUST***:

* Live under the `src/webhooks` directory
* Have a `.webhook.ts` suffix.
* Contain an `export default async function` that:
  * takes an HTTP [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request) argument
  * returns an HTTP [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response)

## API

* [`createWebhookHandler`](./create-webhook-handler) – creates a webhook handler
* [`updateWebhookHandler`](./update-webhook-handler) – updates a webhook handler
* [`deleteWebhookHandler`](./delete-webhook-handler) – deletes a webhook handler


# platform
Source: https://docs.attio.com/sdk/system/platform

Tells you which Attio platform your client code is running inside.

## Values

* `"web-app"`
* `"mobile-app"`

## Example

```tsx
import {platform, TextBlock} from "attio/client"

function WelcomeBlock() {
  switch (platform) {
    case "web-app": {
      return <TextBlock>Welcome to the web app! 🌍</TextBlock>
    }
    case "mobile-app": {
      return <TextBlock>Welcome to the mobile app! 📱</TextBlock>
    }
  }
}
```

