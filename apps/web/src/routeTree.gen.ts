/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as TodosRouteImport } from './routes/todos'
import { Route as PlaygroundRouteImport } from './routes/playground'
import { Route as CustomRouteImport } from './routes/custom'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ConversationConversationIdRouteImport } from './routes/conversation/$conversationId'
import { ServerRoute as ApiTwilioIndexServerRouteImport } from './routes/api/twilio/index'
import { ServerRoute as ApiTwilioWebhookLocalServerRouteImport } from './routes/api/twilio/webhook-local'
import { ServerRoute as ApiTwilioNumbersServerRouteImport } from './routes/api/twilio/numbers'

const rootServerRouteImport = createServerRootRoute()

const TodosRoute = TodosRouteImport.update({
  id: '/todos',
  path: '/todos',
  getParentRoute: () => rootRouteImport,
} as any)
const PlaygroundRoute = PlaygroundRouteImport.update({
  id: '/playground',
  path: '/playground',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomRoute = CustomRouteImport.update({
  id: '/custom',
  path: '/custom',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ConversationConversationIdRoute =
  ConversationConversationIdRouteImport.update({
    id: '/conversation/$conversationId',
    path: '/conversation/$conversationId',
    getParentRoute: () => rootRouteImport,
  } as any)
const ApiTwilioIndexServerRoute = ApiTwilioIndexServerRouteImport.update({
  id: '/api/twilio/',
  path: '/api/twilio/',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiTwilioWebhookLocalServerRoute =
  ApiTwilioWebhookLocalServerRouteImport.update({
    id: '/api/twilio/webhook-local',
    path: '/api/twilio/webhook-local',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiTwilioNumbersServerRoute = ApiTwilioNumbersServerRouteImport.update({
  id: '/api/twilio/numbers',
  path: '/api/twilio/numbers',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/custom': typeof CustomRoute
  '/playground': typeof PlaygroundRoute
  '/todos': typeof TodosRoute
  '/conversation/$conversationId': typeof ConversationConversationIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/custom': typeof CustomRoute
  '/playground': typeof PlaygroundRoute
  '/todos': typeof TodosRoute
  '/conversation/$conversationId': typeof ConversationConversationIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/custom': typeof CustomRoute
  '/playground': typeof PlaygroundRoute
  '/todos': typeof TodosRoute
  '/conversation/$conversationId': typeof ConversationConversationIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/custom'
    | '/playground'
    | '/todos'
    | '/conversation/$conversationId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/custom'
    | '/playground'
    | '/todos'
    | '/conversation/$conversationId'
  id:
    | '__root__'
    | '/'
    | '/custom'
    | '/playground'
    | '/todos'
    | '/conversation/$conversationId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CustomRoute: typeof CustomRoute
  PlaygroundRoute: typeof PlaygroundRoute
  TodosRoute: typeof TodosRoute
  ConversationConversationIdRoute: typeof ConversationConversationIdRoute
}
export interface FileServerRoutesByFullPath {
  '/api/twilio/numbers': typeof ApiTwilioNumbersServerRoute
  '/api/twilio/webhook-local': typeof ApiTwilioWebhookLocalServerRoute
  '/api/twilio': typeof ApiTwilioIndexServerRoute
}
export interface FileServerRoutesByTo {
  '/api/twilio/numbers': typeof ApiTwilioNumbersServerRoute
  '/api/twilio/webhook-local': typeof ApiTwilioWebhookLocalServerRoute
  '/api/twilio': typeof ApiTwilioIndexServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/twilio/numbers': typeof ApiTwilioNumbersServerRoute
  '/api/twilio/webhook-local': typeof ApiTwilioWebhookLocalServerRoute
  '/api/twilio/': typeof ApiTwilioIndexServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/twilio/numbers' | '/api/twilio/webhook-local' | '/api/twilio'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/twilio/numbers' | '/api/twilio/webhook-local' | '/api/twilio'
  id:
    | '__root__'
    | '/api/twilio/numbers'
    | '/api/twilio/webhook-local'
    | '/api/twilio/'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiTwilioNumbersServerRoute: typeof ApiTwilioNumbersServerRoute
  ApiTwilioWebhookLocalServerRoute: typeof ApiTwilioWebhookLocalServerRoute
  ApiTwilioIndexServerRoute: typeof ApiTwilioIndexServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/todos': {
      id: '/todos'
      path: '/todos'
      fullPath: '/todos'
      preLoaderRoute: typeof TodosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/playground': {
      id: '/playground'
      path: '/playground'
      fullPath: '/playground'
      preLoaderRoute: typeof PlaygroundRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/custom': {
      id: '/custom'
      path: '/custom'
      fullPath: '/custom'
      preLoaderRoute: typeof CustomRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/conversation/$conversationId': {
      id: '/conversation/$conversationId'
      path: '/conversation/$conversationId'
      fullPath: '/conversation/$conversationId'
      preLoaderRoute: typeof ConversationConversationIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/twilio/': {
      id: '/api/twilio/'
      path: '/api/twilio'
      fullPath: '/api/twilio'
      preLoaderRoute: typeof ApiTwilioIndexServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/twilio/webhook-local': {
      id: '/api/twilio/webhook-local'
      path: '/api/twilio/webhook-local'
      fullPath: '/api/twilio/webhook-local'
      preLoaderRoute: typeof ApiTwilioWebhookLocalServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/twilio/numbers': {
      id: '/api/twilio/numbers'
      path: '/api/twilio/numbers'
      fullPath: '/api/twilio/numbers'
      preLoaderRoute: typeof ApiTwilioNumbersServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CustomRoute: CustomRoute,
  PlaygroundRoute: PlaygroundRoute,
  TodosRoute: TodosRoute,
  ConversationConversationIdRoute: ConversationConversationIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiTwilioNumbersServerRoute: ApiTwilioNumbersServerRoute,
  ApiTwilioWebhookLocalServerRoute: ApiTwilioWebhookLocalServerRoute,
  ApiTwilioIndexServerRoute: ApiTwilioIndexServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
